Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 0)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 1025)
@@ -0,0 +1,54 @@
+package org.pathvisio.gui.wikipathways;
+
+import java.awt.Component;
+
+import javax.swing.JOptionPane;
+
+import org.pathvisio.wikipathways.UserInterfaceHandler;
+
+public class SwingUserInterfaceHandler implements UserInterfaceHandler {
+	Component parent;
+	
+	public SwingUserInterfaceHandler(Component parent) {
+		this.parent = parent;
+	}
+	
+	public int askCancellableQuestion(String title, String message) {
+		int status = JOptionPane.showConfirmDialog(parent, message, title, 
+				JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
+		switch(status) {
+		case JOptionPane.YES_OPTION:
+			return Q_TRUE;
+		case JOptionPane.NO_OPTION:
+			return Q_FALSE;
+		case JOptionPane.CANCEL_OPTION:
+			return Q_CANCEL;
+		}
+		return Q_FALSE;
+	}
+
+	public String askInput(String title, String message) {
+		return JOptionPane.showInputDialog(parent, message, title);
+	}
+
+	public boolean askQuestion(String title, String message) {
+		int status = JOptionPane.showConfirmDialog(parent, message, title, JOptionPane.YES_NO_OPTION);
+		return status == JOptionPane.YES_OPTION;
+	}
+
+	public void showError(String title, String message) {
+		JOptionPane.showMessageDialog(parent, message, title, JOptionPane.ERROR_MESSAGE);
+	}
+
+	public void showInfo(String title, String message) {
+		JOptionPane.showMessageDialog(parent, message, title, JOptionPane.INFORMATION_MESSAGE);
+	}
+	
+	public int startProgress() {
+		return 0;
+	}
+	
+	public void stopProgress(int id) {
+		
+	}
+}
Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1024)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1025)
@@ -16,6 +16,7 @@
 //
 package org.pathvisio.gui.wikipathways;
 
+import java.awt.event.ActionEvent;
 import java.net.CookieHandler;
 import java.net.URL;
 import java.util.HashMap;
@@ -23,9 +24,15 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.swing.AbstractAction;
+import javax.swing.Action;
+import javax.swing.Box;
+import javax.swing.BoxLayout;
+import javax.swing.ImageIcon;
 import javax.swing.JApplet;
+import javax.swing.JOptionPane;
+import javax.swing.JToolBar;
 
-import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
 import org.pathvisio.gui.swing.GuiInit;
 import org.pathvisio.gui.swing.MainPanel;
@@ -33,60 +40,94 @@
 import org.pathvisio.wikipathways.Parameter;
 import org.pathvisio.wikipathways.WikiPathways;
 
-public class AppletMain extends JApplet {
+public class AppletMain extends JApplet {	
+	private static final long serialVersionUID = 1L;
+
 	private static WikiPathways wiki;
 	
 	public static final String PAR_PATHWAY_URL = "pathway.url";
 	public void init() {
+		Engine.log.trace("init applet");
 		super.init();
 		
 		GuiInit.init();
 	
-		MainPanel mainPanel = SwingEngine.getApplicationPanel();		
+		MainPanel mainPanel = SwingEngine.getApplicationPanel();
+		
+		Action saveAction = new ExitAction(true);
+		Action discardAction = new ExitAction(false);
+		
+		JToolBar tb = mainPanel.getToolBar();
+		
+		tb.setLayout(new BoxLayout(tb,BoxLayout.LINE_AXIS));		
+		tb.add(Box.createHorizontalGlue());		
+		tb.addSeparator();		
+		tb.add(saveAction);
+		tb.add(discardAction);
+		
+		wiki = new WikiPathways(new SwingUserInterfaceHandler(this));
 		parseArguments();
+		loadCookies();
 		
+		add(mainPanel);
+		
 		try { 
-			wiki.openPathwayURL();
+			wiki.init(SwingEngine.createWrapper());
 		} catch(Exception e) {
-			e.printStackTrace();
+			Engine.log.error("Unable to load pathway", e);
+			JOptionPane.showMessageDialog(
+					this, e.getClass() + ": " + e.getMessage(), "Error while initializing editor", JOptionPane.ERROR_MESSAGE);
 		}
-		
-		add(mainPanel);
 	}
 	
 	public void start() {
+		Engine.log.trace("start applet");
 		// TODO Auto-generated method stub
 		super.start();
 	}
 	
 	public void stop() {
-		ApplicationEvent e = new ApplicationEvent(this, ApplicationEvent.APPLICATION_CLOSE);
+		Engine.log.trace("stop applet");
+		// TODO Auto-generated method stub
+		super.stop();
+	}
+
+	public void destroy() {
+		Engine.log.trace("destroy applet");
+/*		ApplicationEvent e = new ApplicationEvent(this, ApplicationEvent.APPLICATION_CLOSE);
 		Engine.fireApplicationEvent(e);
 		if(e.doit) {
-			super.stop();
-		}
+			super.destroy();
+		}*/
 	}
 	
 	void loadCookies() {
-		CookieHandler handler = CookieHandler.getDefault();
-		if (handler != null)    {
-			URL url = getDocumentBase();
-			try {
+		System.out.println("Loading cookies");
+
+		//wikipathwaysUserName=Thomas; wikipathwaysUserID=2; wikipathwaysToken=d8fa40c604ac290a5e2f65830279f518; wikipathways_session=6e153458660cf2cc888d37ec0e6f164b
+		
+		try {
+			CookieHandler handler = CookieHandler.getDefault();
+			if (handler != null)    {
+				URL url = getDocumentBase();
 				Map<String, List<String>> headers = handler.get(url.toURI(), new HashMap<String, List<String>>());
 				List<String> values = headers.get("Cookie");
 				for (Iterator<String> iter=values.iterator(); iter.hasNext();) {
-					String v = iter.next();
-					String[] vstr = v.split("=");
-					if(vstr.length == 2) {
-						wiki.addCookie(vstr[0].trim(), vstr[1].trim());
+					String c = iter.next();
+					String[] cvalues = c.split(";");
+					for(String cv : cvalues) {
+						String[] keyvalue = cv.split("=");
+						if(keyvalue.length == 2) {
+							System.out.println("COOKIE: " + keyvalue[0] + " | " + keyvalue[1]);
+							wiki.addCookie(keyvalue[0].trim(), keyvalue[1].trim());
+						}
 					}
 				}
-			} catch(Exception e) {
-				Engine.log.error("Unable to load cookies", e);
 			}
-			
+		} catch(Exception e) {
+			Engine.log.error("Unable to load cookies", e);
 		}
-//		JSObject myBrowser = (JSObject) JSObject.getWindow(this);
+//			JSObject myBrowser = (JSObject) JSObject.getWindow(this);
 //	        JSObject myDocument =  (JSObject) myBrowser.getMember("document");
 //	        String cookie = (String)myDocument.getMember("cookie");
 //	        String[] cstr = cookie.split(";");
@@ -103,4 +144,21 @@
 			p.setValue(getParameter(p.getName()));
 		}
 	}
+	
+	class ExitAction extends AbstractAction {
+		boolean doSave;
+		public ExitAction(boolean save) {
+			super("Finish", new ImageIcon(save ? Engine.getResourceURL("icons/apply.gif") : Engine.getResourceURL("icons/cancel.gif")));
+			String descr = doSave ? "Save pathway and close editor" : "Discard pathway and close editor";
+			putValue(Action.SHORT_DESCRIPTION, descr);
+		}
+		public void actionPerformed(ActionEvent e) {
+			System.out.println("DEBUG: exit pressed, " + doSave);
+			boolean saved = true;
+			if(doSave) {
+				saved = wiki.saveUI();
+			}
+			if(saved) getAppletContext().showDocument(getDocumentBase(), "_parent");
+		}
+	}
 }
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java	(revision 1024)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java	(revision 1025)
@@ -2,11 +2,11 @@
 
 public enum Parameter {
 	PW_NAME("pwName"),
-	PW_URL("pathwayUrl", false),
+	PW_URL("pwUrl", false),
 	PW_SPECIES("pwSpecies"),
-	PW_NEW("new", "false"),
+	PW_NEW("new", null),
 	USER("user"),
-	RPC_URL("prcUrl"),
+	RPC_URL("rpcUrl"),
 	;
 	
 	String name;
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1024)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1025)
@@ -20,19 +20,11 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.RandomAccessFile;
-import java.net.CookieHandler;
 import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 
-import javax.swing.JOptionPane;
-
 import org.apache.commons.codec.binary.Base64;
 import org.apache.xmlrpc.XmlRpcException;
 import org.apache.xmlrpc.XmlRpcRequest;
@@ -48,89 +40,76 @@
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
 import org.pathvisio.Engine.ApplicationEventListener;
-import org.pathvisio.gui.swing.SwingEngine;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.view.VPathway;
+import org.pathvisio.view.VPathwayWrapper;
 import org.xml.sax.SAXException;
 
-
 public class WikiPathways implements ApplicationEventListener {
 	public static String SITE_NAME = "WikiPathways.org";
 	
+	UserInterfaceHandler uiHandler;
 	HashMap<String, String> cookie;
-	String rpcURL;
-	String pwName;
-	String pwSpecies;
-	String pwURL;
-	String user;
-	boolean isNew;
 	
 	File localFile;
 	
 	boolean ovrChanged;
 	
-	public WikiPathways() {
+	public WikiPathways(UserInterfaceHandler uiHandler) {
+		this.uiHandler = uiHandler;
 		cookie = new HashMap<String, String>();
 		Engine.addApplicationEventListener(this);
 	}
+		
+	public void init(VPathwayWrapper wrapper) throws Exception {
+		for(Parameter p : Parameter.values()) {
+			//Check for required
+			assert !p.isRequired() || p.getValue() != null : 
+				"Missing required argument '" + p.name() + "'";
+		}
+		
+		if(isNew()) { //Create new pathway
+			Engine.newPathway(wrapper);
+		} else { //Download and open the pathway
+			Engine.openPathway(new URL(getPwURL()), wrapper);
+		}
+		
+		//TODO: notify user about this and hide edit actions
+		Engine.getActiveVPathway().setEditMode(isReadOnly());
+	}
 	
 	public String getPwName() {
-		return pwName;
+		return Parameter.PW_NAME.getValue();
 	}
 
-	public void setPwName(String pwName) {
-		this.pwName = pwName;
-	}
-
 	public String getPwSpecies() {
-		return pwSpecies;
+		return Parameter.PW_SPECIES.getValue();
 	}
 
-	public void setPwSpecies(String pwSpecies) {
-		this.pwSpecies = pwSpecies;
-	}
-
 	public String getPwURL() {
-		return pwURL;
+		return Parameter.PW_URL.getValue();
 	}
 
-	public void setPwURL(String pwURL) {
-		this.pwURL = pwURL;
-	}
-
 	public String getRpcURL() {
-		return rpcURL;
+		return Parameter.RPC_URL.getValue();
 	}
 
-	public void setRpcURL(String rpcURL) {
-		this.rpcURL = rpcURL;
-	}
-
 	public String getUser() {
-		return user;
+		return Parameter.USER.getValue();
 	}
 
-	public void setUser(String user) {
-		this.user = user;
-	}
-
 	public void addCookie(String key, String value) {
 		cookie.put(key, value);
 	}
-	
-	public void openPathwayURL() throws MalformedURLException, ConverterException {
-		localFile = SwingEngine.openPathway(new URL(pwURL));
-		Engine.getActiveVPathway().setEditMode(true);
+			
+	public boolean isNew() {
+		return Parameter.PW_NEW.getValue() != null;
 	}
 	
-	protected void setNew(boolean isNew) {
-		this.isNew = isNew;
+	public boolean isReadOnly() {
+		return getUser() != null;
 	}
 	
-	public boolean isNew() {
-		return isNew;
-	}
-	
 	protected File getLocalFile() { 
 		if(localFile == null) {
 			try {
@@ -142,6 +121,23 @@
 		return localFile;
 	}
 	
+	public boolean saveUI() {
+		VPathway vPathway = Engine.getActiveVPathway();
+		if(vPathway == null || vPathway.getGmmlData().hasChanged()) {
+			String description = uiHandler.askInput("Specify description", "Give a description of your changes");
+			try {
+				int id = uiHandler.startProgress();
+				saveToWiki(description);
+				uiHandler.stopProgress(id);
+				return true;
+			} catch (Exception e) {
+				Engine.log.error("Unable to save pathway", e);
+				uiHandler.showError("Unable to save pathway", e.getClass() + ": " + e.getMessage());
+			}
+		}
+		return false;
+	}
+	
 	protected void saveToWiki(String description) throws XmlRpcException, IOException, ConverterException {		
 		//TODO: check if changed
 		if(ovrChanged || Engine.getActivePathway().hasChanged()) {
@@ -150,7 +146,7 @@
 			//Save current pathway to local file
 			Engine.savePathway(gpmlFile);
 			saveToWiki(description, gpmlFile);
-			ovrChanged = false; //Save successfull, don't save next time
+			ovrChanged = false; //Save successful, don't save next time
 		} else {
 			Engine.log.trace("No changes made, ignoring save");
 			//Do nothing, no changes made
@@ -159,7 +155,7 @@
 	
 	protected void saveToWiki(String description, File gpmlFile) throws XmlRpcException, IOException {	
 		XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
-		config.setServerURL(new URL(rpcURL));
+		config.setServerURL(new URL(getRpcURL()));
 	
 		XmlRpcClient client = new XmlRpcClient();
 		XmlRpcCookieTransportFactory ctf = new XmlRpcCookieTransportFactory(client);
@@ -177,7 +173,7 @@
 		byte[] data = new byte[(int)raf.length()];
 		raf.readFully(data);
 		byte[] data64 = Base64.encodeBase64(data);
-		Object[] params = new Object[]{ pwName, pwSpecies, description, data64 };
+		Object[] params = new Object[]{ getPwName(), getPwSpecies(), description, data64 };
 				
 		client.execute("WikiPathways.updatePathway", params);
 	}
@@ -187,12 +183,12 @@
 		switch(e.type) {
 		case ApplicationEvent.APPLICATION_CLOSE:
 			VPathway vPathway = Engine.getActiveVPathway();
-			if(vPathway.getGmmlData().hasChanged()) {
-				int status = JOptionPane.showConfirmDialog(SwingEngine.getApplicationPanel(), 
-						"Do you want to save the changes to " + pwName + " on " + SITE_NAME + "?"); 
-				if(status == JOptionPane.OK_OPTION) {
-			//TODO		saveUI();
-				} else if(status == JOptionPane.CANCEL_OPTION) {
+			if(vPathway == null || vPathway.getGmmlData().hasChanged()) {
+				int status  = uiHandler.askCancellableQuestion("", 
+						"Do you want to save the changes to " + getPwName() + " on " + SITE_NAME + "?");
+				if(status == UserInterfaceHandler.Q_TRUE) {
+					saveUI();
+				} else if(status == UserInterfaceHandler.Q_CANCEL) {
 					e.doit = false;
 				}
 			} else {
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/UserInterfaceHandler.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/UserInterfaceHandler.java	(revision 0)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/UserInterfaceHandler.java	(revision 1025)
@@ -0,0 +1,16 @@
+package org.pathvisio.wikipathways;
+
+public interface UserInterfaceHandler {		
+	public static final int Q_CANCEL = -1;
+	public static final int Q_TRUE = 0;
+	public static final int Q_FALSE = 1;
+	
+	public void showInfo(String title, String message);
+	public void showError(String title, String message);
+	public String askInput(String title, String message);
+	public boolean askQuestion(String title, String message);
+	public int askCancellableQuestion(String title, String message);
+	
+	public int startProgress();
+	public void stopProgress(int id);
+}
Index: trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1024)
+++ trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1025)
@@ -62,7 +62,7 @@
 		}
 	}
 		
-	private static VPathwayWrapper createWrapper() {
+	public static VPathwayWrapper createWrapper() {
 		 return new VPathwaySwing(getApplicationPanel().getScrollPane());
 	}
 	
Index: trunk/src/core/org/pathvisio/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/Engine.java	(revision 1024)
+++ trunk/src/core/org/pathvisio/Engine.java	(revision 1025)
@@ -190,7 +190,7 @@
 			try {
 				f = File.createTempFile("urlPathway", ".gpml");
 				FileUtils.downloadFile(url, f);
-				openPathway(f.toString());
+				openPathway(f.toString(), w);
 			} catch(Exception e) {
 				throw new ConverterException(e);
 			}
Index: trunk/build.xml
===================================================================
--- trunk/build.xml	(revision 1024)
+++ trunk/build.xml	(revision 1025)
@@ -11,7 +11,7 @@
     <property name="apidoc.dir" value="apidoc"/>
 	<!-- <property name="dist.dir" value="dist"/> -->
 	<property name="webstart.dir" value="webstart"/>
-	<property name="wikipathway.dir" value="wikipathways"/>
+	<property name="wikipathways.dir" value="wikipathways"/>
 	<property name="lib.dir" value="lib"/>
 	<property name="exec.perl" value="perl"/>
 	<property name="svn.exec.svnversion" value="svnversion"/>
@@ -71,6 +71,7 @@
 		<delete dir="${build.test.dir}"/>
 		<delete dir="${apidoc.dir}"/>
 		<delete dir="${webstart.dir}/www"/>
+		<delete dir="${wikipathways.dir}/applet"/>
 	</target>
 	
 	<target name="compile-v1" depends="prepare,resources-jar" description="Compile all sources">
@@ -113,7 +114,7 @@
 				org.pathvisio.gui.wikipathways
 				org.pathvisio.wikipathways
 		-->
-		<javac srcdir="src"
+		<javac srcdir="src" debug="true"
 			includes="core/**,wikipathways/**,swing/**"
 			destdir="${build.wikipathways.dir}">
 			<classpath refid="project.wikipathways.class.path"/>
@@ -160,9 +161,18 @@
 		<jar jarfile="wikipathways.jar">
 			<fileset dir="${build.wikipathways.dir}" includes="**/*.class"/>
             <manifest>
-                <attribute name="Class-Path" value="jdom.jar apache/commons-codec-1.3.jar apache/commons-httpclient-3.0.1.jar apache/commons-logging-1.1.jar apache/ws-commons-util-1.0.1.jar apache/xmlrpc-client-3.0.jar apache/xmlrpc-common-3.0.jar"/>
+                <attribute name="Class-Path" value="jdom.jar resources.jar apache/commons-codec-1.3.jar apache/commons-httpclient-3.0.1.jar apache/commons-logging-1.1.jar apache/ws-commons-util-1.0.1.jar apache/xmlrpc-client-3.0.jar apache/xmlrpc-common-3.0.jar"/>
             </manifest>
 		</jar>
+		<!-- different resources.jar, only with minimal data -->
+		<jar jarfile="${wikipathways.dir}/applet/resources.jar">
+			<!--<fileset dir="." includes="backpage/*"/>-->
+			<fileset dir="." includes="icons/*"/>
+			<!--<fileset dir="." includes="images/*"/>-->
+			<fileset dir="." includes="GPML.xsd"/>
+			<!--<fileset dir="." includes="MAPPTmpl.gtp"/>-->
+			<!--<fileset dir="." includes="biopax-level2.owl"/>-->
+		</jar>
 	</target>
 	
 	<target name="run-v1" depends="compile-v1">
@@ -207,12 +217,25 @@
 	</target>
 
 	<target name="wikipathways" depends="jar-wikipathways" description="Build PathVisio for WikiPathways">
-		<copy file="wikipathways.jar" toDir="${wikipathway.dir}/applet"/>
-		<copy toDir="${webstart.dir}/www" overwrite="true">
-			<fileset dir="${lib.dir}" includes="**/*.jar"/>
+		<copy file="wikipathways.jar" toDir="${wikipathways.dir}/applet"/>
+		<copy toDir="${wikipathways.dir}/applet">
+			<fileset dir="${lib.dir}">
+				<include name="apache/*.jar"/>
+				<include name="jdom.jar"/>
+			</fileset>
+			
 		</copy>
+		<signjar alias="PathVisio" lazy = "true" 
+			storepass="PathVisio" keystore="${lib.dir}/visioKeyStore">
+			<fileset dir="${wikipathways.dir}/applet" includes="**/*.jar"/>
+		</signjar>
+		<!-- copy to /var/www/wikipathways -->
+		<copy toDir="/var/www/wikipathways/wpi/applet">
+			<fileset dir="${wikipathways.dir}/applet" includes="**/*.*" />
+		</copy>
+		<!-- todo: copy scripts and bin too -->
 	</target>
-			
+
 	<target name="docs" depends="prepare" description="generate api-docs">
 		<tstamp /> <!-- set ${TODAY} -->
 		<javadoc destdir="${apidoc.dir}" 
Index: trunk/icons/apply.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: trunk/icons/apply.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: trunk/icons/cancel.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: trunk/icons/cancel.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

