Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 1043)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 1044)
@@ -1,10 +1,13 @@
 package org.pathvisio.gui.wikipathways;
 
 import java.awt.Component;
+import java.util.concurrent.Callable;
 
 import javax.swing.JOptionPane;
+import javax.swing.SwingUtilities;
 
 import org.jdesktop.swingworker.SwingWorker;
+import org.pathvisio.Engine;
 import org.pathvisio.gui.swing.progress.ProgressDialog;
 import org.pathvisio.gui.swing.progress.SwingProgressKeeper;
 import org.pathvisio.util.RunnableWithProgress;
@@ -17,10 +20,33 @@
 		this.parent = parent;
 	}
 	
-	public int askCancellableQuestion(String title, String message) {
-		int status = JOptionPane.showConfirmDialog(parent, message, title, 
-				JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
-		switch(status) {
+	private abstract class RunnableValue <T> implements Runnable {
+		T value;
+		public T get() { return value; }
+		public void set(T value) { this.value = value; }
+	}
+	
+	private void invoke(Runnable r) {
+		try {
+			if(SwingUtilities.isEventDispatchThread()) {
+				r.run();
+			} else {
+				SwingUtilities.invokeAndWait(r);
+			}
+		} catch(Exception e) {
+			Engine.log.error("Unable to invoke runnable", e);
+		}
+	}
+	public int askCancellableQuestion(final String title, final String message) {
+		RunnableValue<Integer> r = new RunnableValue<Integer>() {
+			public void run() {
+				int status = JOptionPane.showConfirmDialog(parent, message, title, 
+						JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
+				set(status);
+			}
+		};
+		invoke(r);
+		switch(r.get()) {
 		case JOptionPane.YES_OPTION:
 			return Q_TRUE;
 		case JOptionPane.NO_OPTION:
@@ -31,8 +57,14 @@
 		return Q_FALSE;
 	}
 
-	public String askInput(String title, String message) {
-		return JOptionPane.showInputDialog(parent, message, title);
+	public String askInput(final String title, final String message) {
+		RunnableValue<String> r = new RunnableValue<String>() {
+			public void run() {
+				set(JOptionPane.showInputDialog(parent, message, title));
+			}
+		};
+		invoke(r);
+		return r.get();
 	}
 
 	public boolean askQuestion(String title, String message) {
Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1043)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1044)
@@ -20,7 +20,6 @@
 import java.net.CookieHandler;
 import java.net.URL;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -28,8 +27,10 @@
 import javax.swing.Action;
 import javax.swing.ImageIcon;
 import javax.swing.JApplet;
+import javax.swing.JLabel;
 import javax.swing.JOptionPane;
 import javax.swing.JToolBar;
+import javax.swing.SwingUtilities;
 
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
@@ -46,31 +47,63 @@
 public class AppletMain extends JApplet {	
 	private static final long serialVersionUID = 1L;
 
-	private static WikiPathways wiki;
-	private static MainPanel mainPanel;
+	private WikiPathways wiki;
+	private MainPanel mainPanel;
+	private UserInterfaceHandler uiHandler;
 	
 	public static final String PAR_PATHWAY_URL = "pathway.url";
 	public void init() {
-		Engine.log.trace("init applet");
-		final UserInterfaceHandler uiHandler = new SwingUserInterfaceHandler(JOptionPane.getFrameForComponent(this));
-		mainPanel = SwingEngine.getApplicationPanel();
-		RunnableWithProgress r = new RunnableWithProgress() {
+		System.out.println("INIT CALLED....");
+		Engine.log.trace("INIT CALLED....");
+		
+//		//Restore defaults for some static fields which may have a value
+//		//from previous applet sessions
+//		//Is there an automatic way to set all static fields to their default value?
+//		Parameter.restoreDefaults();
+		
+		uiHandler = new SwingUserInterfaceHandler(JOptionPane.getFrameForComponent(this));
+		
+		try {
+			SwingUtilities.invokeAndWait(new Runnable() {
+				public void run() {
+					//Since SwingEngine is static, the mainpanel may
+					//already have been initialized by previous applet instances
+					//Therefore, force it to create a new one.
+					//Storing the mainpanel in a static field may lead to problems 
+					//when we want multiple editors within a single JVM instance
+					mainPanel = SwingEngine.getApplicationPanel(true);
+					
+					Action saveAction = new ExitAction(true);
+					Action discardAction = new ExitAction(false);
+					
+					mainPanel.getToolBar().addSeparator();
+					mainPanel.addToToolbar(saveAction, MainPanel.TB_GROUP_HIDE_ON_EDIT);
+					mainPanel.addToToolbar(discardAction);
+
+					getContentPane().add(mainPanel);
+					mainPanel.setVisible(true);
+				}
+			});
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		System.out.println("INIT ENDED....");
+		Engine.log.trace("INIT ENDED....");
+	}
+		
+	public void start() {
+		System.out.println("START CALLED....");
+		Engine.log.trace("START CALLED....");
+		
+		final RunnableWithProgress r = new RunnableWithProgress() {
 			public Object excecuteCode() {				
 				GuiInit.init();
-								
-				Action saveAction = new ExitAction(true);
-				Action discardAction = new ExitAction(false);
-				
-				JToolBar tb = mainPanel.getToolBar();
-					
-				tb.addSeparator();		
-				tb.add(saveAction);
-				tb.add(discardAction);
-				
+												
 				wiki = new WikiPathways(uiHandler);
 				parseArguments();
 				loadCookies();
-								
+									
 				try { 
 					wiki.init(SwingEngine.createWrapper());
 				} catch(Exception e) {
@@ -78,45 +111,51 @@
 					JOptionPane.showMessageDialog(
 							AppletMain.this, e.getClass() + ": " + e.getMessage(), "Error while initializing editor", JOptionPane.ERROR_MESSAGE);
 				};
+															
 				return null;
 			}
 		};
-		uiHandler.runWithProgress(r, "Loading pathway", ProgressKeeper.PROGRESS_UNKNOWN, false, false);
-		getContentPane().add(mainPanel);
-	}
-	
-	boolean splitPaneSet = false;
-	public void start() {
-		Engine.log.trace("start applet");
-		
-		//Not the most elegant solution, but can't set splitpane in init()
-		//if statement because start() can be called multiple times
-		if(!splitPaneSet) {
-			int spPercent = GlobalPreference.getValueInt(GlobalPreference.GUI_SIDEPANEL_SIZE);
-			double spSize = (100 - spPercent) / 100.0;
-			mainPanel.getSplitPane().setDividerLocation(spSize);
-			splitPaneSet = true;
+		try {
+			SwingUtilities.invokeAndWait(new Runnable() {
+				public void run() {
+					int spPercent = GlobalPreference.getValueInt(GlobalPreference.GUI_SIDEPANEL_SIZE);
+					double spSize = (100 - spPercent) / 100.0;
+					System.out.println(spSize);
+					mainPanel.getSplitPane().setDividerLocation(spSize);
+					
+					uiHandler.runWithProgress(r, "Loading pathway", ProgressKeeper.PROGRESS_UNKNOWN, false, true);
+				}
+			});
+		} catch (Exception e) {
+			Engine.log.error("Unable to start applet", e);
 		}
-
+				
+		System.out.println("START ENDED....");
+		Engine.log.trace("START ENDED....");
 	}
 	
 	public void stop() {
-		Engine.log.trace("stop applet");
-		// TODO Auto-generated method stub
-		super.stop();
+		System.out.println("STOP CALLED....");
+		Engine.log.trace("STOP CALLED....");
+						
+		System.out.println("STOP ENDED....");
+		Engine.log.trace("STOP ENDED....");
 	}
 
 	public void destroy() {
-		Engine.log.trace("destroy applet");
+		System.out.println("DESTROY CALLED....");
+		Engine.log.trace("DESTROY CALLED....");
 		ApplicationEvent e = new ApplicationEvent(this, ApplicationEvent.APPLICATION_CLOSE);
 		Engine.fireApplicationEvent(e);
 		if(e.doit) {
 			super.destroy();
 		}
+		System.out.println("DESTROY ENDED....");
+		Engine.log.trace("DESTROY ENDED....");
 	}
 	
 	void loadCookies() {
-		System.out.println("Loading cookies");
+		Engine.log.trace("Loading cookies");
 
 		//wikipathwaysUserName=Thomas; wikipathwaysUserID=2; wikipathwaysToken=d8fa40c604ac290a5e2f65830279f518; wikipathways_session=6e153458660cf2cc888d37ec0e6f164b
 		
@@ -125,14 +164,17 @@
 			if (handler != null)    {
 				URL url = getDocumentBase();
 				Map<String, List<String>> headers = handler.get(url.toURI(), new HashMap<String, List<String>>());
+				if(headers == null) {
+					Engine.log.error("Unable to load cookies: headers null");
+					return;
+				}
 				List<String> values = headers.get("Cookie");
-				for (Iterator<String> iter=values.iterator(); iter.hasNext();) {
-					String c = iter.next();
+				for (String c : values) {
 					String[] cvalues = c.split(";");
 					for(String cv : cvalues) {
 						String[] keyvalue = cv.split("=");
 						if(keyvalue.length == 2) {
-							System.out.println("COOKIE: " + keyvalue[0] + " | " + keyvalue[1]);
+							Engine.log.trace("COOKIE: " + keyvalue[0] + " | " + keyvalue[1]);
 							wiki.addCookie(keyvalue[0].trim(), keyvalue[1].trim());
 						}
 					}
@@ -163,7 +205,7 @@
 		boolean doSave;
 		public ExitAction(boolean save) {
 			super("Finish", new ImageIcon(save ? Engine.getResourceURL("icons/apply.gif") : Engine.getResourceURL("icons/cancel.gif")));
-			this.doSave = save;
+			doSave = save;
 			String descr = doSave ? "Save pathway and close editor" : "Discard pathway and close editor";
 			putValue(Action.SHORT_DESCRIPTION, descr);
 		}
@@ -173,7 +215,14 @@
 			if(doSave) {
 				saved = wiki.saveUI();
 			}
-			if(saved) getAppletContext().showDocument(getDocumentBase(), "_parent");
+			if(saved) {
+				getContentPane().remove(mainPanel);
+				JLabel label = new JLabel("Please wait while you'll be redirected to the pathway page", JLabel.CENTER);
+				getContentPane().add(label);
+				getContentPane().validate();
+				
+				getAppletContext().showDocument(getDocumentBase(), "_parent");
+			}
 		}
 	}
 }
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java	(revision 1043)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/Parameter.java	(revision 1044)
@@ -5,7 +5,7 @@
 	PW_URL("pwUrl", false),
 	PW_SPECIES("pwSpecies"),
 	PW_NEW("new", null),
-	USER("user"),
+	USER("user", null),
 	RPC_URL("rpcUrl"),
 	;
 	
@@ -31,6 +31,10 @@
 		return defaultValue;
 	}
 	
+	private void restoreDefault() {
+		value = null;
+	}
+	
 	public String getName() {
 		return name;
 	}
@@ -50,4 +54,10 @@
 			return value;
 		}
 	}
+	
+	public static void restoreDefaults() {
+		for(Parameter p : values()) {
+			p.restoreDefault();
+		}
+	}
 }
\ No newline at end of file
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1043)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1044)
@@ -16,6 +16,7 @@
 //
 package org.pathvisio.wikipathways;
 
+import java.beans.DesignMode;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -83,7 +84,7 @@
 		}
 
 		//TODO: notify user about this and hide edit actions
-		Engine.getActiveVPathway().setEditMode(isReadOnly());
+		Engine.getActiveVPathway().setEditMode(!isReadOnly());
 		
 		//Connect to the gene database
 		DBConnector connector = new DBConnectorDerbyServer("wikipathways.org", 1527);
@@ -121,7 +122,7 @@
 	}
 	
 	public boolean isReadOnly() {
-		return getUser() != null;
+		return getUser() == null;
 	}
 	
 	protected File getLocalFile() { 
@@ -137,8 +138,13 @@
 		
 	public boolean saveUI() {
 		VPathway vPathway = Engine.getActiveVPathway();
+		if(isReadOnly()) {
+			uiHandler.showError("Unable to save the pathway", "Unable to save the pathway, you are not logged in");
+			return false;
+		}
 		if(vPathway != null && vPathway.getGmmlData().hasChanged()) {
 			final String description = uiHandler.askInput("Specify description", "Give a description of your changes");
+			Engine.log.trace("Save description: " + description);
 			if(description != null) {
 				RunnableWithProgress<Boolean> r = new RunnableWithProgress<Boolean>() {
 					public Boolean excecuteCode() {
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java	(revision 1043)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java	(revision 1044)
@@ -7,7 +7,7 @@
 
 public class WikiPathwaysEngine {
 	public static void init() throws Exception {
-		GlobalPreference.FILE_LOG.setDefault(getApplicationDir() + ".log");
+		GlobalPreference.FILE_LOG.setDefault(new File(getApplicationDir(), ".wikipathwaysLog").toString());
 	}
 		
 	private static File DIR_APPLICATION;
Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1043)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1044)
@@ -17,12 +17,18 @@
 package org.pathvisio.gui.swing;
 
 import java.awt.BorderLayout;
+import java.awt.Component;
 import java.awt.Container;
 import java.awt.Frame;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
 
+import javax.swing.Action;
 import javax.swing.ImageIcon;
+import javax.swing.JButton;
 import javax.swing.JComboBox;
 import javax.swing.JLabel;
 import javax.swing.JMenu;
@@ -52,7 +58,6 @@
 import org.pathvisio.gui.swing.propertypanel.PathwayTableModel;
 import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.view.AlignType;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.StackType;
@@ -165,18 +170,18 @@
 	protected void addToolBarActions(JToolBar tb) {
 		tb.setLayout(new WrapLayout(1, 1));
 		
-		tb.add(new SaveLocalAction());
-		tb.add(new SaveToServerAction());
-		tb.add(new ImportAction(this));
-		tb.add(new ExportAction());
+		addToToolbar(new SaveLocalAction());
+		addToToolbar(new SaveToServerAction(), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new ImportAction(this));
+		addToToolbar(new ExportAction());
 		tb.addSeparator();
-		tb.add(new CopyAction());
-		tb.add(new PasteAction());
+		addToToolbar(new CopyAction(), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new PasteAction(), TB_GROUP_HIDE_ON_EDIT);
 		tb.addSeparator();
 
 		tb.addSeparator();
 
-		tb.add(new JLabel("Zoom:", JLabel.LEFT));
+		addToToolbar(new JLabel("Zoom:", JLabel.LEFT));
 		JComboBox combo = new JComboBox(new Object[] {
 				new ZoomAction(VPathway.ZOOM_TO_FIT), new ZoomAction(10),
 				new ZoomAction(25), new ZoomAction(50), new ZoomAction(75),
@@ -201,12 +206,12 @@
 				}
 			}
 		});
-		tb.add(combo);
+		addToToolbar(combo);
 
 		tb.addSeparator();
 
-		tb.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
-		tb.add(new NewElementAction(VPathway.NEWLABEL));
+		addToToolbar(new NewElementAction(VPathway.NEWGENEPRODUCT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new NewElementAction(VPathway.NEWLABEL), TB_GROUP_HIDE_ON_EDIT);
 		// New line menu
 		DropDownButton lineButton = new DropDownButton(new ImageIcon(Engine
 				.getResourceURL("icons/newlinemenu.gif")));
@@ -219,13 +224,13 @@
 		lineButton.addComponent(new JMenuItem(new NewElementAction(
 				VPathway.NEWLINEDASHEDARROW)));
 		lineButton.setRunFirstItem(true);
-		tb.add(lineButton);
+		addToToolbar(lineButton, TB_GROUP_HIDE_ON_EDIT);
 
-		tb.add(new NewElementAction(VPathway.NEWRECTANGLE));
-		tb.add(new NewElementAction(VPathway.NEWOVAL));
-		tb.add(new NewElementAction(VPathway.NEWARC));
-		tb.add(new NewElementAction(VPathway.NEWBRACE));
-		tb.add(new NewElementAction(VPathway.NEWTBAR));
+		addToToolbar(new NewElementAction(VPathway.NEWRECTANGLE), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new NewElementAction(VPathway.NEWOVAL), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new NewElementAction(VPathway.NEWARC), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new NewElementAction(VPathway.NEWBRACE), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new NewElementAction(VPathway.NEWTBAR), TB_GROUP_HIDE_ON_EDIT);
 
 		// New lineshape menu
 		DropDownButton lineShapeButton = new DropDownButton(new ImageIcon(
@@ -239,25 +244,65 @@
 		lineShapeButton.addComponent(new JMenuItem(new NewElementAction(
 				VPathway.NEWRECEPTORSQUARE)));
 		lineShapeButton.setRunFirstItem(true);
-		tb.add(lineShapeButton);
+		addToToolbar(lineShapeButton, TB_GROUP_HIDE_ON_EDIT);
 		
 		tb.addSeparator();
 		
-		tb.add(new CommonActions.AlignAction(AlignType.CENTERX));
-		tb.add(new CommonActions.AlignAction(AlignType.CENTERY));
-		tb.add(new CommonActions.AlignAction(AlignType.LEFT));
-		tb.add(new CommonActions.AlignAction(AlignType.RIGHT));
-		tb.add(new CommonActions.AlignAction(AlignType.TOP));
-		tb.add(new CommonActions.AlignAction(AlignType.WIDTH));
-		tb.add(new CommonActions.AlignAction(AlignType.HEIGHT));
-		tb.add(new CommonActions.StackAction(StackType.CENTERX));
-		tb.add(new CommonActions.StackAction(StackType.CENTERY));
-		tb.add(new CommonActions.StackAction(StackType.LEFT));
-		tb.add(new CommonActions.StackAction(StackType.RIGHT));
-		tb.add(new CommonActions.StackAction(StackType.TOP));
-		tb.add(new CommonActions.StackAction(StackType.BOTTOM));
+		addToToolbar(new CommonActions.AlignAction(AlignType.CENTERX), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.CENTERY), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.LEFT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.RIGHT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.TOP), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.WIDTH), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.AlignAction(AlignType.HEIGHT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.CENTERX), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.CENTERY), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.LEFT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.RIGHT), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.TOP), TB_GROUP_HIDE_ON_EDIT);
+		addToToolbar(new CommonActions.StackAction(StackType.BOTTOM), TB_GROUP_HIDE_ON_EDIT);
 	}
 
+	public static final String TB_GROUP_HIDE_ON_EDIT = "edit";
+	
+	HashMap<String, List<Component>> toolbarGroups = new HashMap<String, List<Component>>();
+	
+	public void addToToolbar(Component c, String group) {
+		JToolBar tb = getToolBar();
+		tb.add(c);
+		addToToolbarGroup(c, group);
+	}
+		
+	public void addToToolbar(Component c) {
+		addToToolbar(c, null);
+	}
+	
+	public JButton addToToolbar(Action a, String group) {
+		JButton b = getToolBar().add(a);
+		addToToolbarGroup(b, group);
+		return b;
+	}
+	
+	public JButton addToToolbar(Action a) {
+		return addToToolbar(a, null);
+	}
+	
+	private void addToToolbarGroup(Component c, String group) {
+		if(group != null) {
+			List<Component> gb = toolbarGroups.get(group);
+			if(gb == null) {
+				toolbarGroups.put(group, gb = new ArrayList<Component>());
+			}
+			gb.add(c);
+		}
+	}
+	
+	public List<Component> getToolbarGroup(String group) {
+		List<Component> tbg = toolbarGroups.get(group);
+		if(tbg == null) tbg = new ArrayList<Component>();
+		return tbg;
+	}
+	
 	public JMenuBar getMenuBar() {
 		return menuBar;
 	}
@@ -285,7 +330,8 @@
 	}
 
 	public void vPathwayEvent(VPathwayEvent e) {
-		if(e.getType() == VPathwayEvent.ELEMENT_DOUBLE_CLICKED) {
+		switch(e.getType()) {
+		case VPathwayEvent.ELEMENT_DOUBLE_CLICKED:
 			if(e.getAffectedElement() instanceof Graphics) {
 				PathwayElement p = ((Graphics)e.getAffectedElement()).getGmmlData();
 				PathwayElementDialog pd = null;
@@ -295,6 +341,17 @@
 				}
 				if(pd != null) pd.setVisible(true);
 			}
+			break;
+		case VPathwayEvent.EDIT_MODE_ON:
+			for(Component b : getToolbarGroup(TB_GROUP_HIDE_ON_EDIT)) {
+				b.setEnabled(true);
+			}
+			break;
+		case VPathwayEvent.EDIT_MODE_OFF:
+			for(Component b : getToolbarGroup(TB_GROUP_HIDE_ON_EDIT)) {
+				b.setEnabled(false);
+			}
+			break;
 		}
 	}
 
Index: trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1043)
+++ trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1044)
@@ -34,10 +34,20 @@
 	private static MainPanel mainPanel;
 	
 	public static MainPanel getApplicationPanel() {
-		if(mainPanel == null) mainPanel = new MainPanel();
+		return getApplicationPanel(false);
+	}
+	
+	public static MainPanel getApplicationPanel(boolean forceNew) {
+		if(forceNew || !hasApplicationPanel()) {
+			mainPanel = new MainPanel();
+		}
 		return mainPanel;
 	}
 	
+	public static boolean hasApplicationPanel() {
+		return mainPanel != null;
+	}
+	
 	public static String MSG_UNABLE_IMPORT = "Unable to import GPML file.";
 	public static String MSG_UNABLE_EXPORT = "Unable to export GPML file.";
 	public static String MSG_UNABLE_SAVE = "Unable to save GPML file.";
