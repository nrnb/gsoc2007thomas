Index: trunk/src/core/org/pathvisio/gui/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/Engine.java	(revision 921)
+++ trunk/src/core/org/pathvisio/gui/Engine.java	(revision 922)
@@ -17,13 +17,16 @@
 package org.pathvisio.gui;
 
 import java.io.File;
+import java.lang.reflect.InvocationTargetException;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.EventObject;
 import java.util.HashMap;
 import java.util.List;
 
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.preference.PreferenceStore;
 import org.eclipse.jface.resource.ImageRegistry;
 import org.eclipse.jface.window.ApplicationWindow;
@@ -41,8 +44,14 @@
 import org.pathvisio.model.PathwayExporter;
 import org.pathvisio.preferences.Preferences;
 import org.pathvisio.util.Utils;
+import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
 import org.pathvisio.view.VPathway;
 
+import edu.stanford.ejalbert.BrowserLauncher;
+import edu.stanford.ejalbert.exception.BrowserLaunchingExecutionException;
+import edu.stanford.ejalbert.exception.BrowserLaunchingInitializingException;
+import edu.stanford.ejalbert.exception.UnsupportedOperatingSystemException;
+
 /**
  * This class contains the essential parts of the program: the window, drawing and gpml data
  */
@@ -288,7 +297,34 @@
 	
 		return connector;
 	}
+	
+	public static boolean openWebPage(String url, String progressMsg, String errMsg) {
+		Shell shell = getWindow().getShell();
+		if(shell == null || shell.isDisposed()) return false;
 		
+		SimpleRunnableWithProgress rwp = new SimpleRunnableWithProgress(
+				Engine.class, "doOpenWebPage", new Class[] { String.class }, new Object[] { url }, null);
+		SimpleRunnableWithProgress.setMonitorInfo(progressMsg, IProgressMonitor.UNKNOWN);
+		ProgressMonitorDialog dialog = new ProgressMonitorDialog(shell);
+		try {
+			dialog.run(true, true, rwp);
+			return true;
+		} catch (InvocationTargetException e) {
+			Throwable cause = e.getCause();
+			String msg = cause == null ? null : cause.getMessage();
+			MessageDialog.openError(shell, "Error",
+			"Unable to open web browser" +
+			(msg == null ? "" : ": " + msg) +
+			"\n" + errMsg);
+			return false;
+		} catch (InterruptedException ignore) { return false; }
+	}
+	
+	public static void doOpenWebPage(String url) throws BrowserLaunchingInitializingException, BrowserLaunchingExecutionException, UnsupportedOperatingSystemException {
+		BrowserLauncher bl = new BrowserLauncher(null);
+		bl.openURLinBrowser(url);
+	}
+	
 	public static boolean isUseR() { return USE_R; }
 	
 	
