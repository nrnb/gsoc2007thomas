Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java	(revision 930)
@@ -16,9 +16,12 @@
 //
 package org.pathvisio.visualization.plugins;
 
-import org.pathvisio.gui.Engine;
-import org.pathvisio.view.Graphics;
-
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Graphics2D;
+import java.awt.Image;
+import java.awt.Rectangle;
+import java.awt.Toolkit;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -26,7 +29,6 @@
 import java.net.URLConnection;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.List;
 
 import org.eclipse.jface.dialogs.MessageDialog;
@@ -41,17 +43,12 @@
 import org.eclipse.swt.custom.CLabel;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.graphics.PaletteData;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.RGB;
-import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -64,15 +61,16 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Spinner;
 import org.jdom.Element;
-
-import org.pathvisio.util.ColorConverter;
-import org.pathvisio.util.SwtUtils;
-import org.pathvisio.visualization.Visualization;
-import org.pathvisio.visualization.colorset.ColorSet;
 import org.pathvisio.data.CachedData;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.util.ColorConverter;
+import org.pathvisio.util.SwtUtils;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.visualization.Visualization;
+import org.pathvisio.visualization.colorset.ColorSet;
 
 public class ExpressionImagePlugin extends PluginWithColoredSamples {
 	static final String NAME = "Colored image";
@@ -80,7 +78,7 @@
 		"This plugin displays one or more images on Gene Product objects and \n" +
 		"colors the image(s) accoring to the expression value for the Gene Product.";
 		
-	static final RGB DEFAULT_TRANSPARENT = Engine.TRANSPARENT_COLOR;
+	static final Color DEFAULT_TRANSPARENT = Engine.TRANSPARENT_COLOR;
 		
 	List<URL> imageURLs;
 	
@@ -114,48 +112,44 @@
 		if(url.getProtocol().equals("file")) imageURLs.remove(url);
 	}
 	
-	protected void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, PaintEvent e, GC gc) {
+	protected void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, Graphics2D g2d) {
 		CachedData cache = Gex.getCachedData();
 		ColorSet cs = s.getColorSet();
 
-		RGB rgb = cs.getColor(cache.getAverageSampleData(idc), s.getId());
+		Color rgb = cs.getColor(cache.getAverageSampleData(idc), s.getId());
 		
-		drawImage((ImageSample)s, rgb, area, e, gc);
+		drawImage((ImageSample)s, rgb, area, g2d);
 	}
 	
-	protected void drawLegendSample(ConfiguredSample s, Rectangle area, PaintEvent e, GC gc) {
-		drawImage((ImageSample)s, new RGB(255, 255, 255), area, e, gc);
-		e.gc.drawRectangle(area);
+	protected void drawLegendSample(ConfiguredSample s, Rectangle area, Graphics2D g2d) {
+		drawImage((ImageSample)s, Color.WHITE, area, g2d);
+		g2d.draw(area);
 	}
 	
-	void drawImage(ImageSample is, RGB rgb, Rectangle area, PaintEvent e, GC gc) {
-		ImageData id = is.getImageData(rgb);
-		if(id != null) {
-			Image image = new Image(e.display, id);
-			Point scaleTo = is.getScaleSize(new Point(area.width, area.height));
+	void drawImage(ImageSample is, Color rgb, Rectangle area, Graphics2D g2d) {
+		Image img = is.getImage(rgb);
+		if(img != null) {
+			Dimension scaleTo = is.getScaleSize(new Dimension(area.width, area.height));
 
 			drawBackground(area, gc, e);
 
 			Rectangle ib = image.getBounds();
-			int xs = area.width - scaleTo.x;
-			int ys = area.height - scaleTo.y;
-			gc.drawImage(image, ib.x, ib.y, ib.width, ib.height, 
-					area.x + xs / 2, area.y + ys / 2, scaleTo.x, scaleTo.y);
-			image.dispose();
+			int xs = area.width - scaleTo.width;
+			int ys = area.height - scaleTo.height;
+			g2d.drawImage(image, ib.x, ib.y, ib.width, ib.height, 
+					area.x + xs / 2, area.y + ys / 2, scaleTo.height, scaleTo.width);
 		}
 	}
 		
-	void drawNoDataFound(ConfiguredSample s, Rectangle area, PaintEvent e, GC buffer) {
+	void drawNoDataFound(ConfiguredSample s, Rectangle area, Graphics2D g2d) {
 		Color c = new Color(e.display, s.getColorSet().getColor(ColorSet.ID_COLOR_NO_DATA_FOUND));
-		buffer.setBackground(c);
-		buffer.fillRectangle(area);
-		c.dispose();
+		g2d.setColor(s.getColorSet().getColor(ColorSet.ID_COLOR_NO_DATA_FOUND));
+		g2d.fill(area);
 	}
 	
-	void drawBackground(Rectangle area, GC buffer, PaintEvent e) {
-		buffer.setBackground(e.display.getSystemColor(SWT.COLOR_WHITE));
-		buffer.fillRectangle(area);
-		
+	void drawBackground(Rectangle area, Graphics2D g2d) {
+		g2d.setColor(Color.WHITE);
+		g2d.fill(area);
 	}
 	
 	final static String XML_ELM_URL = "image";
@@ -197,8 +191,8 @@
 	protected class ImageConfigComposite extends SampleConfigComposite {		
 		ListViewer imageList;
 		CLabel colorLabel, imageLabel;
-		Color replaceColor;
-		Image image;
+		org.eclipse.swt.graphics.Color replaceColor;
+		org.eclipse.swt.graphics.Image image;
 		Button aspectButton;
 		Spinner spinner;
 		
@@ -418,9 +412,9 @@
 	}
 	
 	protected class ImageSample extends ConfiguredSample {
-		ImageData cacheImageData;
+		Image cacheImage;
 		URL imageURL;
-		RGB replaceColor = DEFAULT_TRANSPARENT;
+		Color replaceColor = DEFAULT_TRANSPARENT;
 		int tolerance; //range 0 - 255;
 		boolean aspectRatio = true;
 		
@@ -438,7 +432,7 @@
 		
 		public void setURL(URL url) { 
 			imageURL = url;
-			cacheImageData = null;
+			cacheImage = null;
 			fireModifiedEvent();
 		}
 		
@@ -446,11 +440,11 @@
 			return imageURL == null ? imageURL = imageURLs.get(0) : imageURL; 
 		}
 		
-		public void setReplaceColor(RGB rgb) { 
+		public void setReplaceColor(Color rgb) { 
 			if(rgb != null) replaceColor = rgb;
 			fireModifiedEvent();
 		}
-		public RGB getReplaceColor() { return replaceColor; }
+		public Color getReplaceColor() { return replaceColor; }
 		public void setMaintainAspect(boolean maintain) { 
 			aspectRatio = maintain;
 			fireModifiedEvent();
@@ -464,11 +458,11 @@
 		
 		public ImageData getImageData() {
 			if(imageURL == null) return null;
-			if(cacheImageData == null) {
+			if(cacheImage == null) {
 				InputStream in = getInputStream(imageURL);
-				cacheImageData = new ImageData(in);
+				cacheImage = Toolkit.getDefaultToolkit().getImage(imageURL);
 			}
-			return (ImageData)cacheImageData.clone();
+			return cacheImage.clone();
 		}
 		
 		public ImageData getImageData(Point size) {
@@ -584,17 +578,4 @@
 	}
 	
 	public Composite visualizeOnToolTip(Composite parent, Graphics g) { return null; }
-
-	@Override
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC gc) {
-		// TODO Auto-generated method stub
-		
-	}
-
-	@Override
-	public void visualizeOnSidePanel(Collection<Graphics> objects) {
-		// TODO Auto-generated method stub
-		
-	}
-
 }
Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ColorByLinkPlugin.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ColorByLinkPlugin.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ColorByLinkPlugin.java	(revision 930)
@@ -16,22 +16,16 @@
 //
 package org.pathvisio.visualization.plugins;
 
-import org.pathvisio.view.Graphics;
-
+import java.awt.Color;
+import java.awt.Graphics2D;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Random;
 
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.RGB;
 import org.eclipse.swt.widgets.Composite;
-
-import org.pathvisio.visualization.Visualization;
-import org.pathvisio.visualization.plugins.VisualizationPlugin;
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.util.ColorConverter;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.visualization.Visualization;
 
 /**
  * Colors drawing-objects according to their graphId / graphRef values
@@ -46,7 +40,7 @@
 	static final int refMarkRadius = 12;
 	static final int refMarkAlpha = 128;
 	
-	HashMap<String, RGB> id2col;
+	HashMap<String, Color> id2col;
 	Random rnd;
 	
 	public ColorByLinkPlugin(Visualization v) {
@@ -55,7 +49,7 @@
 		setIsGeneric(true);
 		setIsConfigurable(false);
 		
-		id2col = new HashMap<String, RGB>();
+		id2col = new HashMap<String, Color>();
 		rnd = new Random();
 	}
 
@@ -64,61 +58,58 @@
 	
 	public void initSidePanel(Composite parent) { }
 
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC buffer) {
+	public void visualizeOnDrawing(Graphics g, Graphics2D g2d) {
 		PathwayElement gd = g.getGmmlData();
 		String[] ids = parseIds(gd);
 		if(ids[0] != null) { //This is a shape
-			drawShape(ids[0], g, e, buffer);
+			drawShape(ids[0], g, g2d);
 			return;
 		}
 		if(ids[1] != null) {
-			drawLineStart(ids[1], g, e, buffer);
+			drawLineStart(ids[1], g, g2d);
 		}
 		if(ids[2] != null) {
-			drawLineEnd(ids[2], g, e, buffer);
+			drawLineEnd(ids[2], g, g2d);
 		}
 	}
 	
-	void drawLineStart(String id, Graphics g, PaintEvent e, GC buffer) {
+	void drawLineStart(String id, Graphics g, Graphics2D g2d) {
 		PathwayElement gd = g.getGmmlData();
 		drawRefMark( 
 				id,			
 				// TODO: this should be in visual coords
 				(int)gd.getMStartX() - refMarkRadius/2, 
 				(int)gd.getMStartY() - refMarkRadius/2,
-				e, buffer);
+				g2d);
 	}
 	
-	void drawLineEnd(String id, Graphics g, PaintEvent e, GC buffer) {
+	void drawLineEnd(String id, Graphics g, Graphics2D g2d) {
 		PathwayElement gd = g.getGmmlData();
 		drawRefMark( 
 				id,			
 				// TODO: this should be in visual coords
 				(int)gd.getMEndX() - refMarkRadius/2, 
 				(int)gd.getMEndY() - refMarkRadius/2,
-				e, buffer);
+				g2d);
 	}
 	
-	void drawRefMark(String id, int x, int y, PaintEvent e, GC buffer) {
-		int origAlpha = buffer.getAlpha();
-		Color c = new Color(e.display, getRGB(id));
-		buffer.setBackground(c);
-		buffer.setAlpha(refMarkAlpha);
-		buffer.fillOval(x, y, refMarkRadius, refMarkRadius);
-		buffer.setAlpha(origAlpha);
+	void drawRefMark(String id, int x, int y, Graphics2D g2d) {
+		Color c = getRGB(id);
+		g2d.setColor(c);
+		g2d.fillOval(x, y, refMarkRadius, refMarkRadius);
 	}
 	
-	void drawShape(String id, Graphics g, PaintEvent e, GC buffer) {
+	void drawShape(String id, Graphics g, Graphics2D g2d) {
 		PathwayElement gd = g.getGmmlData();
-		RGB oldRGB = ColorConverter.toRGB(gd.getColor());
+		Color oldRGB = gd.getColor();
 		gd.dontFireEvents(2);
-		gd.setColor(ColorConverter.fromRGB(getRGB(id)));
-		g.draw(e, buffer);
-		gd.setColor(ColorConverter.fromRGB(oldRGB));
+		gd.setColor(getRGB(id));
+		g.draw(g2d);
+		gd.setColor(oldRGB);
 	}
 	
-	RGB getRGB(String id) {
-		RGB rgb = id2col.get(id);
+	Color getRGB(String id) {
+		Color rgb = id2col.get(id);
 		if(rgb == null) {
 			rgb = randomRGB();
 			id2col.put(id, rgb);
@@ -126,10 +117,10 @@
 		return rgb;
 	}
 	
-	RGB randomRGB() {
+	Color randomRGB() {
 		int rgb = java.awt.Color.HSBtoRGB(rnd.nextFloat(), 1, 1);
-		java.awt.Color c = new java.awt.Color(rgb);
-		return new RGB(c.getRed(), c.getGreen(), c.getBlue());
+		Color c = new Color(rgb);
+		return new Color(c.getRed(), c.getGreen(), c.getBlue(), refMarkAlpha);
 	}
 	
 	String[] parseIds(PathwayElement gd) {
Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java	(revision 930)
@@ -16,10 +16,11 @@
 //
 package org.pathvisio.visualization.plugins;
 
-import org.pathvisio.gui.Engine;
-import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.Graphics;
-
+import java.awt.Dimension;
+import java.awt.Font;
+import java.awt.Graphics2D;
+import java.awt.font.TextLayout;
+import java.awt.geom.Rectangle2D;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
@@ -35,13 +36,9 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ModifyEvent;
 import org.eclipse.swt.events.ModifyListener;
-import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -53,15 +50,17 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Spinner;
 import org.jdom.Element;
-
-import org.pathvisio.util.SwtUtils;
-import org.pathvisio.visualization.Visualization;
 import org.pathvisio.data.CachedData;
+import org.pathvisio.data.DataSources;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.CachedData.Data;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
-import org.pathvisio.model.PathwayElement;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.util.SwtUtils;
+import org.pathvisio.view.GeneProduct;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.visualization.Visualization;
 
 /**
  * Provides label for Gene Product
@@ -73,13 +72,13 @@
 	static final String DESCRIPTION = 
 		"This plugin displays expression data for a given set of samples as text";
 	
-	static final FontData DEFAULT_FONTDATA = new FontData("Arial narrow", 10, SWT.NORMAL);
+	static final Font DEFAULT_FONT = new Font("Arial narrow", Font.PLAIN, 10);
 			
 	final static String SEP = ", ";	
 	int roundTo = 2;
 	boolean mean = false;
 			
-	FontData fontData;
+	Font font;
 	Set<Sample> useSamples = new LinkedHashSet<Sample>();
 	
 	public ExpressionAsTextPlugin(Visualization v) {
@@ -94,34 +93,37 @@
 	public String getDescription() { return DESCRIPTION; }
 	
 	static final int SPACING = 3;
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC buffer) {
+	public void visualizeOnDrawing(Graphics g, Graphics2D g2d) {
 		if(g instanceof GeneProduct) {
 			GeneProduct gp = (GeneProduct) g;
 			CachedData  cache = Gex.getCachedData();
 			
-			IdCodePair idc = new IdCodePair(gp.getID(), gp.getSystemCode());
+			String id = gp.getGmmlData().getXref();
+			String db = DataSources.sysName2Code.get(gp.getGmmlData().getDataSource());
+			IdCodePair idc = new IdCodePair(id, db);
 			
 			if(cache == null || !cache.hasData(idc)|| useSamples.size() == 0) {
 				return;
 			}
-						
-			Font f = new Font(e.display, getFontData(true));
-			
+									
 			int startx = (int)(g.getVLeft() + g.getVWidth() + SPACING);
 			int starty = (int)(g.getVTop() + g.getVHeight() / 2);
 			
-
-			buffer.setFont(f);
+			Font f = getFont(true);
+			g2d.setFont(f);
+			
 			int w = 0, i = 0;
 			for(Sample s : useSamples) {
 				String str = getDataString(s, idc, cache, SEP + "\n") + 
 				(++i == useSamples.size() ? "" : SEP);
-				Point size = buffer.textExtent(str);
-				buffer.drawText(str, startx + w, starty - size.y / 2, true);
-				w += size.x;
+				
+				TextLayout tl = new TextLayout(str, f, g2d.getFontRenderContext());
+				Rectangle2D tb = tl.getBounds();
+				Dimension size = new Dimension((int)tb.getHeight(), (int)tb.getWidth());
+
+				g2d.drawString(str, startx + w, starty - size.height / 2);
+				w += size.width;
 			}
-				
-			f.dispose();
 		}
 	}
 	
@@ -213,30 +215,38 @@
 		return data;
 	}
 	
-	void setFontData(FontData fd) {
-		if(fd != null) {
-			fontData = fd;
+	void setFont(Font f) {
+		if(f != null) {
+			font = f;
 			fireModifiedEvent();
 		}
 	}
 	
-	int getFontSize() {
-		return getFontData().getHeight();
-	}
+//	int getFontSize() {
+//		return getFont().getSize()
+//	}
 	
-	FontData getFontData() {
-		return getFontData(false);
+	Font getFont() {
+		return getFont(false);
 	}
 	
-	FontData getFontData(boolean adjustZoom) {
-		FontData fd = fontData == null ? DEFAULT_FONTDATA : fontData;
+	Font getFont(boolean adjustZoom) {
+		Font f = font == null ? DEFAULT_FONT : font;
 		if(adjustZoom) {
-			fd = new FontData(fd.getName(), fd.getHeight(), fd.getStyle());
-			fd.setHeight((int)Math.ceil(Engine.getVPathway().vFromM(fd.getHeight()) * 15));//TODO: get rid of 15
+			int size = (int)Math.ceil(Engine.getVPathway().vFromM(f.getSize()) * 15);
+			f = new Font(f.getName(), size, f.getStyle());
 		}
-		return fd;
+		return f;
 	}
 	
+	FontData getFontData() {
+		return SwtUtils.awtFont2FontData(getFont());
+	}
+	
+	void setFontData(FontData fd) {
+		setFont(SwtUtils.fontData2awtFont(fd));
+	}
+	
 	void addUseSample(Sample s) {
 		if(s != null) {
 			useSamples.add(s);
@@ -412,7 +422,7 @@
 			} catch(Exception e) { Engine.log.error("Unable to add sample", e); }
 		}
 		roundTo = Integer.parseInt(xml.getAttributeValue(XML_ATTR_ROUND));
-		fontData = new FontData(xml.getAttributeValue(XML_ATTR_FONTDATA));
+		setFontData(new FontData(xml.getAttributeValue(XML_ATTR_FONTDATA)));
 		mean = Boolean.parseBoolean(xml.getAttributeValue(XML_ATTR_AVG));
 	}
 }
Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java	(revision 930)
@@ -16,6 +16,10 @@
 //
 package org.pathvisio.visualization.plugins;
 
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.Shape;
 import java.sql.Types;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -41,13 +45,9 @@
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.graphics.RGB;
-import org.eclipse.swt.graphics.Rectangle;
-import org.eclipse.swt.graphics.Region;
 import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
@@ -62,20 +62,19 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.jdom.Element;
-
-import org.pathvisio.gui.Engine;
-import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.Graphics;
-import org.pathvisio.util.ColorConverter;
+import org.pathvisio.data.CachedData;
+import org.pathvisio.data.Gex;
+import org.pathvisio.data.Gdb.IdCodePair;
+import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.gui.swt.Engine;
 import org.pathvisio.util.SwtUtils;
 import org.pathvisio.util.TableColumnResizer;
+import org.pathvisio.view.GeneProduct;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.view.swt.SWTGraphics2D;
 import org.pathvisio.visualization.Visualization;
 import org.pathvisio.visualization.colorset.ColorSet;
 import org.pathvisio.visualization.colorset.ColorSetManager;
-import org.pathvisio.data.CachedData;
-import org.pathvisio.data.Gex;
-import org.pathvisio.data.Gdb.IdCodePair;
-import org.pathvisio.data.Gex.Sample;
 
 /**
  * Extend this class if you want to create a visualization plug-in where the user
@@ -87,7 +86,7 @@
  */
 public abstract class PluginWithColoredSamples extends VisualizationPlugin {	
 	static final String[] useSampleColumns = { "sample", "color set" };
-	static final RGB LINE_COLOR_DEFAULT = new RGB(0, 0, 0);
+	static final Color LINE_COLOR_DEFAULT = Color.BLACK;
 	
 	private List<ConfiguredSample> useSamples = new ArrayList<ConfiguredSample>();
 	private Canvas sidePanel;
@@ -109,23 +108,21 @@
 	 * {@link #drawNoDataFound(visualization.plugins.PluginWithColoredSamples.ConfiguredSample, Rectangle, PaintEvent, GC)}.
 	 * @see VisualizationPlugin#visualizeOnDrawing(GmmlGraphics, PaintEvent, GC)
 	 */
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC gc) {
+	public void visualizeOnDrawing(Graphics g, Graphics2D g2d) {
 		if(!(g instanceof GeneProduct)) return;
 		if(useSamples.size() == 0) return; //Nothing to draw
 		
 		GeneProduct gp = (GeneProduct) g;
 		
-		Region region = getVisualization().provideDrawArea(this, g);
-		Rectangle area = region.getBounds();
+		Shape da = getVisualization().provideDrawArea(this, g);
+		Rectangle area = da.getBounds();
 		
-		drawArea(gp, area, e, gc);
+		drawArea(gp, area, g2d);
 		
-		Color c = SwtUtils.changeColor(null, ColorConverter.toRGB(gp.getGmmlData().getColor()), e.display);
-		gc.setForeground(c);
-		gc.drawRectangle(area);
+		Color c = gp.getGmmlData().getColor();
+		g2d.setColor(c);
+		g2d.draw(area);
 		
-		c.dispose();
-		region.dispose();
 	}
 	
 	/**
@@ -136,10 +133,9 @@
 	 * (when no data is available).
 	 * @param gp The gene-product to visualize the data for
 	 * @param area The area in which to draw
-	 * @param e
-	 * @param gc
+	 * @param g2d The graphics context on which to draw
 	 */
-	void drawArea(GeneProduct gp, Rectangle area, PaintEvent e, GC gc) {
+	void drawArea(GeneProduct gp, Rectangle area, Graphics2D g2d) {
 		int nr = useSamples.size();
 		int left = area.width % nr; //Space left after dividing, give to last rectangle
 		int w = area.width / nr;
@@ -155,9 +151,9 @@
 			
 			if(s.getColorSet() == null) continue; //No colorset for this sample
 			if(cache.hasData(idc)) 
-				drawSample(s, idc, r, e, gc);
+				drawSample(s, idc, r, g2d);
 			else 
-				drawNoDataFound(s, area, e, gc);
+				drawNoDataFound(s, area, g2d);
 		}
 	}
 	
@@ -170,7 +166,7 @@
 	 * @param e	{@link PaintEvent} containing information about the paint
 	 * @param gc Graphical context on which drawing operations can be performed
 	 */
-	abstract void drawNoDataFound(ConfiguredSample s, Rectangle area, PaintEvent e, GC gc);
+	abstract void drawNoDataFound(ConfiguredSample s, Rectangle area, Graphics2D g2d);
 	
 	/**
 	 * Implement this method to perform the drawing operation for a single sample when data is
@@ -183,7 +179,7 @@
 	 * @param e	{@link PaintEvent} containing information about the paint
 	 * @param gc Graphical context on which drawing operations can be performed
 	 */
-	abstract void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, PaintEvent e, GC gc);
+	abstract void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, Graphics2D g2d);
 	
 	static final int SIDEPANEL_SPACING = 3;
 	static final int SIDEPANEL_MARGIN = 5;
@@ -199,7 +195,7 @@
 	void drawSidePanel(PaintEvent e) {
 		if(spGraphics == null) return;
 		
-		Rectangle area = sidePanel.getClientArea();
+		org.eclipse.swt.graphics.Rectangle area = sidePanel.getClientArea();
 		area.x += SIDEPANEL_MARGIN;
 		area.y += SIDEPANEL_MARGIN;
 		area.width -= SIDEPANEL_MARGIN * 2;
@@ -255,7 +251,9 @@
 			e.gc.setBackground(e.display.getSystemColor(SWT.COLOR_WHITE));
 			e.gc.drawText(gps[i].getGmmlData().getTextLabel(), area.x, y + h / 2 - e.gc.getFontMetrics().getHeight() / 2);
 			Rectangle r = new Rectangle(area.x + tw, y, area.width - tw, h - SIDEPANEL_SPACING);
-			drawArea(gps[i], r, e, e.gc);
+			SWTGraphics2D g2d = new SWTGraphics2D(e.gc, e.display);
+			drawArea(gps[i], r, g2d);
+			g2d.dispose();
 		}
 	}
 	
@@ -391,7 +389,7 @@
 		//Draw labels for samplenames
 		//Draw vertical line to labels
 		
-		Rectangle r = c.getClientArea();
+		org.eclipse.swt.graphics.Rectangle r = c.getClientArea();
 		r.x += LEGEND_MARGIN;
 		r.y += LEGEND_MARGIN;
 		r.width -= 2*LEGEND_MARGIN;
@@ -403,7 +401,8 @@
 		
 		for(int i = 0; i < ns; i++) {
 			ConfiguredSample s = useSamples.get(i);
-			Rectangle area = new Rectangle(w * i, r.y, w, LEGEND_BOXHEIGHT);
+			org.eclipse.swt.graphics.Rectangle area = 
+				new org.eclipse.swt.graphics.Rectangle(w * i, r.y, w, LEGEND_BOXHEIGHT);
 			drawLegendSample(s, area, e, e.gc);
 			
 			Point ts = e.gc.textExtent(s.getName());
@@ -429,7 +428,7 @@
 	 * @param e
 	 * @param gc
 	 */
-	protected void drawLegendSample(ConfiguredSample s, Rectangle area, PaintEvent e, GC gc) {
+	protected void drawLegendSample(ConfiguredSample s, org.eclipse.swt.graphics.Rectangle area, PaintEvent e, GC gc) {
 		e.gc.drawRectangle(area);
 	}
 	
Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java	(revision 930)
@@ -16,6 +16,9 @@
 //
 package org.pathvisio.visualization.plugins;
 
+import java.awt.Color;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -23,14 +26,10 @@
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.CLabel;
-import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.RGB;
-import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -43,25 +42,24 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.jdom.Element;
-
-import org.pathvisio.gui.Engine;
-import org.pathvisio.view.Graphics;
-import org.pathvisio.util.ColorConverter;
-import org.pathvisio.util.SwtUtils;
-import org.pathvisio.visualization.Visualization;
-import org.pathvisio.visualization.colorset.ColorSet;
 import org.pathvisio.data.CachedData;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.CachedData.Data;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.util.ColorConverter;
+import org.pathvisio.util.SwtUtils;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.visualization.Visualization;
+import org.pathvisio.visualization.colorset.ColorSet;
 
 public class ExpressionColorPlugin extends PluginWithColoredSamples {
 	final String NAME = "Color by expression";
 	static final String DESCRIPTION = 
 		"This plugin colors gene product objects in the pathway by their expression data.";
 			
-	RGB lineColor;
+	Color lineColor;
 	boolean drawLine = false;
 	
 	public ExpressionColorPlugin(Visualization v) {
@@ -72,80 +70,71 @@
 	public String getName() { return NAME; }
 	public String getDescription() { return DESCRIPTION; }
 		
-	void drawNoDataFound(ConfiguredSample s, Rectangle area, PaintEvent e, GC buffer) {
+	void drawNoDataFound(ConfiguredSample s, Rectangle area, Graphics2D g2d) {
 		ColorSet cs = s.getColorSet();
-		drawColoredRectangle(area, cs.getColor(ColorSet.ID_COLOR_NO_DATA_FOUND), e, buffer);
+		drawColoredRectangle(area, cs.getColor(ColorSet.ID_COLOR_NO_DATA_FOUND), g2d);
 	}
 
-	protected void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, PaintEvent e, GC buffer) {
+	protected void drawSample(ConfiguredSample s, IdCodePair idc, Rectangle area, Graphics2D g2d) {
 		ColorSample smp = (ColorSample)s;
 		CachedData cache = Gex.getCachedData();
 		
 		if(cache.hasMultipleData(idc)) {
 			switch(smp.getAmbigiousType()) {
 			case ColorSample.AMBIGIOUS_AVG:
-				drawSampleAvg(smp, idc, cache, area, e, buffer);
+				drawSampleAvg(smp, idc, cache, area, g2d);
 				break;
 			case ColorSample.AMBIGIOUS_BARS:
-				drawSampleBar(smp, idc, cache, area, e, buffer);
+				drawSampleBar(smp, idc, cache, area, g2d);
 				break;
 			}
 		} else {
 			ColorSet cs = smp.getColorSet();
 			HashMap<Integer, Object> data = cache.getSingleData(idc).getSampleData();
-			RGB rgb = cs.getColor(data, smp.getId());
-			drawColoredRectangle(area, rgb, e, buffer);
+			Color rgb = cs.getColor(data, smp.getId());
+			drawColoredRectangle(area, rgb, g2d);
 		}
 	}
 
-	void drawSampleAvg(ConfiguredSample s, IdCodePair idc, CachedData cache, Rectangle area, PaintEvent e, GC buffer) {
+	void drawSampleAvg(ConfiguredSample s, IdCodePair idc, CachedData cache, Rectangle area, Graphics2D g2d) {
 		ColorSet cs = s.getColorSet();
-		RGB rgb = cs.getColor(cache.getAverageSampleData(idc), s.getId());
-		drawColoredRectangle(area, rgb, e, buffer);
+		Color rgb = cs.getColor(cache.getAverageSampleData(idc), s.getId());
+		drawColoredRectangle(area, rgb, g2d);
 	}
 	
-	void drawSampleBar(ConfiguredSample s, IdCodePair idc, CachedData cache, Rectangle area, PaintEvent e, GC buffer) {
+	void drawSampleBar(ConfiguredSample s, IdCodePair idc, CachedData cache, Rectangle area, Graphics2D g2d) {
 		ColorSet cs = s.getColorSet();
 		List<Data> refdata = cache.getData(idc);
 		int n = refdata.size();
 		int left = area.height % n;
 		int h = area.height / n;
 		for(int i = 0; i < n; i++) {
-			RGB rgb = cs.getColor(refdata.get(i).getSampleData(), s.getId());
+			Color rgb = cs.getColor(refdata.get(i).getSampleData(), s.getId());
 			Rectangle r = new Rectangle(
 					area.x, area.y + i*h,
 					area.width, h + (i == n-1 ? left : 0));
-			drawColoredRectangle(r, rgb, e, buffer);
+			drawColoredRectangle(r, rgb, g2d);
 		}
 	}
 	
-	void drawColoredRectangle(Rectangle r, RGB rgb, PaintEvent e, GC buffer) {
-		Color c = null;
-		Color lc = null;
+	void drawColoredRectangle(Rectangle r, Color c, Graphics2D g2d) {			
+		g2d.setColor(c);
+		g2d.fill(r);
 		
-		c = SwtUtils.changeColor(c, rgb, e.display);
-		
-		buffer.setBackground(c);
-		
-		buffer.fillRectangle(r);
 		if(drawLine) {
-			lc = SwtUtils.changeColor(lc, getLineColor(), e.display);
-			buffer.setForeground(lc);
-			buffer.drawRectangle(r);
+			g2d.setColor(getLineColor());
+			g2d.draw(r);
 		}
-		
-		c.dispose();
-		if(lc != null) lc.dispose();
 	}
 	
-	void setLineColor(RGB rgb) {
+	void setLineColor(Color rgb) {
 		if(rgb != null)	{
 			lineColor = rgb;
 			fireModifiedEvent();
 		}
 	}
 	
-	RGB getLineColor() { return lineColor == null ? LINE_COLOR_DEFAULT : lineColor; }
+	Color getLineColor() { return lineColor == null ? LINE_COLOR_DEFAULT : lineColor; }
 	
 	void setDrawLine(boolean draw) {
 		drawLine = draw;
@@ -171,7 +160,7 @@
 	
 	SampleConfigComposite sampleConfigComp;
 	Button checkLine;
-	Color labelColor;
+	org.eclipse.swt.graphics.Color labelColor;
 	Composite createOptionsComp(Composite parent) {
 		Group lineGroup = new Group(parent, SWT.NULL);
 		lineGroup.setLayout(new GridLayout());
@@ -202,7 +191,7 @@
 					if(rgb != null) {
 						labelColor = SwtUtils.changeColor(labelColor, rgb, e.display);
 						colorLabel.setBackground(labelColor);
-						setLineColor(rgb);
+						setLineColor(SwtUtils.rgb2color(rgb));
 					}
 				break;
 				case SWT.Dispose:
@@ -336,16 +325,4 @@
 	}
 	
 	public Composite visualizeOnToolTip(Composite parent, Graphics g) { return null; }
-
-	@Override
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC gc) {
-		// TODO Auto-generated method stub
-		
-	}
-
-	@Override
-	public void visualizeOnSidePanel(Collection<Graphics> objects) {
-		// TODO Auto-generated method stub
-		
-	}
 }
Index: branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java
===================================================================
--- branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java	(revision 929)
+++ branches/g2d-branch/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java	(revision 930)
@@ -16,24 +16,24 @@
 //
 package org.pathvisio.visualization.plugins;
 
-import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.swt.Engine;
 import org.pathvisio.view.GeneProduct;
 import org.pathvisio.view.Graphics;
 
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.Font;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.Shape;
+import java.awt.geom.Rectangle2D;
 import java.util.Collection;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.graphics.RGB;
-import org.eclipse.swt.graphics.Rectangle;
-import org.eclipse.swt.graphics.Region;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -62,7 +62,7 @@
 	static final String DESCRIPTION = 
 		"This plugin shows a label with customizable font on Gene Products.\n" +
 		"The label text can be set to the Gene Product's ID or Symbol.";
-	static final FontData DEFAULT_FONTDATA = new FontData("Arial narrow", 10, SWT.NORMAL);
+	static final Font DEFAULT_FONT = new Font("Arial narrow", Font.PLAIN, 10);
 			
 	final static int STYLE_ID = 0;
 	final static int STYLE_SYMBOL = 1;
@@ -77,8 +77,8 @@
 	boolean adaptFontSize;
 	int align;
 	
-	FontData fontData;
-	RGB fontColor;
+	Font font;
+	Color fontColor;
 	
 	public LabelPlugin(Visualization v) {
 		super(v);		
@@ -121,12 +121,11 @@
 		labelSidePanel = new Label(comp, SWT.CENTER);
 	}
 
-	public void visualizeOnDrawing(Graphics g, PaintEvent e, GC buffer) {
+	public void visualizeOnDrawing(Graphics g, Graphics2D g2d) {
 		if(g instanceof GeneProduct) {
-			Font f = null;
-			Color fc = null;
+			Font f = getFont();
 			
-			Region region;
+			Shape region;
 			
 			if(isUseProvidedArea()) {
 				region = getVisualization().provideDrawArea(this, g);
@@ -137,46 +136,36 @@
 			Rectangle area = region.getBounds();
 			
 			if(!getOverlay()) {
-				buffer.setBackground(e.display.getSystemColor(SWT.COLOR_WHITE));
-				buffer.fillRectangle(area);
+				g2d.setColor(Color.WHITE);
+				g2d.fill(area);
 			}
-			buffer.setForeground(e.display.getSystemColor(SWT.COLOR_BLACK));
-			buffer.drawRectangle(area);
+			g2d.setColor(Color.BLACK);
+			g2d.draw(area);
 			
-			buffer.setClipping(region);
-			
-			f = SwtUtils.changeFont(f, getFontData(true), e.display);
-		
+			g2d.clip(region);
+					
 			String label = getLabelText((GeneProduct) g);
 			
 			if(adaptFontSize) {
-				f = SwtUtils.adjustFontSize(f, new Point(area.width, area.height), label, buffer, e.display);
-			} else {
-				buffer.setFont(f);
-			}
+				//TODO: adapt font size for awt
+				//f = SwtUtils.adjustFontSize(f, new Dimension(area.width, area.height), label, g2d);
+			}	
+			g2d.setFont(f);
 			
-			fc = SwtUtils.changeColor(fc, getFontColor(), e.display);
-			buffer.setForeground(fc);
+			g2d.setColor(getFontColor());
 			
-			Point textSize = buffer.textExtent (label);
+			Rectangle2D textSize = g2d.getFontMetrics().getStringBounds(label, g2d);
 			
 			switch(align) {
 			case ALIGN_RIGHT: 
-				area.x += area.width - textSize.x;
+				area.x += area.width - textSize.getWidth();
 				break;
 			case ALIGN_CENTER:
-				area.x += (int)(area.width / 2) - (int)(textSize.x / 2);
+				area.x += (int)(area.width / 2) - (int)(textSize.getWidth()/ 2);
 			}
-			buffer.drawString (label, 
+			g2d.drawString (label, 
 					area.x,
-					area.y + (int)(area.height / 2) - (int)(textSize.y / 2), true);
-			
-			Region none = null;
-			buffer.setClipping(none);
-						
-			if(f != null) f.dispose();
-			if(region != null) region.dispose();
-			if(fc != null) fc.dispose();
+					area.y + (int)(area.height / 2) - (int)(textSize.getHeight()/ 2));
 		}
 	}
 	
@@ -185,37 +174,37 @@
 		fireModifiedEvent();
 	}
 	
-	void setFontData(FontData fd) {
-		if(fd != null) {
-			fontData = fd;
+	void setFont(Font f) {
+		if(f != null) {
+			font = f;
 			fireModifiedEvent();
 		}
 	}
 	
-	void setFontColor(RGB fc) {
+	void setFontColor(Color fc) {
 		fontColor = fc;
 		fireModifiedEvent();
 	}
 	
-	RGB getFontColor() { 
-		return fontColor == null ? new RGB(0,0,0) : fontColor;
+	Color getFontColor() { 
+		return fontColor == null ? Color.BLACK : fontColor;
 	}
 	
 	int getFontSize() {
-		return getFontData().getHeight();
+		return getFont().getSize();
 	}
 	
-	FontData getFontData() {
-		return getFontData(false);
+	Font getFont() {
+		return getFont(false);
 	}
 	
-	FontData getFontData(boolean adjustZoom) {
-		FontData fd = fontData == null ? DEFAULT_FONTDATA : fontData;
+	Font getFont(boolean adjustZoom) {
+		Font f = font == null ? DEFAULT_FONT : font;
 		if(adjustZoom) {
-			fd = new FontData(fd.getName(), fd.getHeight(), fd.getStyle());
-			fd.setHeight((int)Math.ceil(Engine.getVPathway().vFromM(fd.getHeight()) * 15)); //TODO: get rid of 15
+			int fs = (int)Math.ceil(Engine.getVPathway().vFromM(f.getSize()) * 15);
+			f = new Font(f.getName(), f.getStyle(), f.getSize());
 		}
-		return fd;
+		return f;
 	}
 	
 	public Composite visualizeOnToolTip(Composite parent, Graphics g) {
@@ -275,10 +264,10 @@
 		font.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
 				FontDialog fd = new FontDialog(font.getShell());
-				fd.setRGB(getFontColor());
-				fd.setFontList(new FontData[] { getFontData() });
-				setFontData(fd.open());
-				setFontColor(fd.getRGB());
+				fd.setRGB(SwtUtils.color2rgb(getFontColor()));
+				fd.setFontList(new FontData[] { SwtUtils.awtFont2FontData(getFont()) });
+				setFont(SwtUtils.fontData2awtFont(fd.open()));
+				setFontColor(SwtUtils.rgb2color(fd.getRGB()));
 			}
 		});
 		final Button adapt = new Button(fontSizeComp, SWT.CHECK);
@@ -339,7 +328,15 @@
 		Element elm = super.toXML();
 		elm.setAttribute(XML_ATTR_STYLE, Integer.toString(style));
 		elm.setAttribute(XML_ATTR_ADAPT_FONT, Boolean.toString(adaptFontSize));
-		elm.setAttribute(XML_ATTR_FONTDATA, getFontData().toString());
+		
+		Font f = getFont();
+		String style = "PLAIN";
+		if(f.isBold() && f.isItalic()) style = "BOLDITALIC";
+		else if (f.isBold()) style = "BOLD";
+		else if (f.isItalic()) style = "ITALIC";
+		String fs = f.getName() + "-" + style + "-" + f.getSize(); 
+		elm.setAttribute(XML_ATTR_FONTDATA, fs);
+		
 		elm.addContent(ColorConverter.createColorElement(XML_ELM_FONTCOLOR, getFontColor()));
 		elm.setAttribute(XML_ATTR_OVERLAY, Boolean.toString(getOverlay()));
 		elm.setAttribute(XML_ATTR_ALIGN, Integer.toString(getAlignment()));
@@ -358,7 +355,7 @@
 		try {
 			if(styleStr != null) setStyle(Integer.parseInt(styleStr));
 			if(adaptStr != null) adaptFontSize = Boolean.parseBoolean(adaptStr);
-			if(fontStr != null) fontData = new FontData(fontStr);
+			if(fontStr != null) font = Font.decode(fontStr);
 			if(ovrStr != null) setOverlay(Boolean.parseBoolean(ovrStr));
 			if(fcElm != null) fontColor = ColorConverter.parseColorElement(fcElm);
 			if(alnStr != null) align = Integer.parseInt(alnStr);
Index: branches/g2d-branch/src/v2/org/pathvisio/R/wizard/RWizard.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/wizard/RWizard.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/wizard/RWizard.java	(revision 930)
@@ -26,7 +26,7 @@
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.widgets.Shell;
 
-import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.swt.Engine;
 import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
 import org.pathvisio.R.RDataIn;
 import org.pathvisio.R.RCommands.RException;
Index: branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageData.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageData.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageData.java	(revision 930)
@@ -16,10 +16,9 @@
 //
 package org.pathvisio.R.wizard;
 
-import org.pathvisio.gui.Engine;
-
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
+import java.util.prefs.Preferences;
 
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.wizard.WizardPage;
@@ -39,13 +38,13 @@
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Text;
-
-import org.pathvisio.preferences.Preferences;
 import org.pathvisio.R.RCommands;
 import org.pathvisio.R.RDataIn;
 import org.pathvisio.R.RDataOut;
 import org.pathvisio.R.RCommands.RInterruptedException;
 import org.pathvisio.data.Gex;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 
 public class PageData extends WizardPage {
 	RDataOut rDataOut;
@@ -186,7 +185,7 @@
 				DirectoryDialog fd = new DirectoryDialog(getShell());
 				String pwTxt = pwDir.getText();
 				fd.setFilterPath(pwTxt.equals("") ? 
-						Engine.getPreferences().getString(Preferences.PREF_DIR_PWFILES) : pwTxt);
+						SwtPreference.SWT_DIR_PWFILES.getValue() : pwTxt);
 				String dir = fd.open();
 				if(dir != null) pwDir.setText(dir);
 				checkPageComplete();
@@ -204,7 +203,7 @@
 			FileDialog fd = new FileDialog(getShell(), 
 					e.widget == exportBrowse ? SWT.SAVE : SWT.OPEN);
 			String expTxt = exportFile.getText();
-			fd.setFilterPath(expTxt.equals("") ? Engine.getPreferences().getString(Preferences.PREF_DIR_RDATA) : expTxt);
+			fd.setFilterPath(expTxt.equals("") ? SwtPreference.SWT_DIR_RDATA.getValue() : expTxt);
 			String file = fd.open();
 			if(file != null) {
 				if		(e.widget == exportBrowse) 	exportFile.setText(file);
Index: branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageStats.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageStats.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/wizard/PageStats.java	(revision 930)
@@ -17,7 +17,7 @@
 
 package org.pathvisio.R.wizard;
 
-import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.swt.Engine;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
Index: branches/g2d-branch/src/v2/org/pathvisio/R/RDataIn.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/RDataIn.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/RDataIn.java	(revision 930)
@@ -16,8 +16,8 @@
 //
 package org.pathvisio.R;
 
-import org.pathvisio.gui.Engine;
-import org.pathvisio.gui.TabbedSidePanel;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.gui.swt.TabbedSidePanel;
 
 import java.io.File;
 import java.util.ArrayList;
Index: branches/g2d-branch/src/v2/org/pathvisio/R/RDataOut.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/RDataOut.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/RDataOut.java	(revision 930)
@@ -16,7 +16,7 @@
 //
 package org.pathvisio.R;
 
-import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.swt.Engine;
 
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
Index: branches/g2d-branch/src/v2/org/pathvisio/R/RController.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/RController.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/RController.java	(revision 930)
@@ -16,9 +16,9 @@
 //
 package org.pathvisio.R;
 
-import org.pathvisio.gui.Engine;
-import org.pathvisio.gui.Engine.ApplicationEvent;
-import org.pathvisio.gui.Engine.ApplicationEventListener;
+import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.gui.swt.Engine.ApplicationEvent;
+import org.pathvisio.gui.swt.Engine.ApplicationEventListener;
 
 import java.io.BufferedReader;
 import java.io.File;
Index: branches/g2d-branch/src/v2/org/pathvisio/R/StatsResultTable.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/StatsResultTable.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/StatsResultTable.java	(revision 930)
@@ -16,8 +16,6 @@
 //
 package org.pathvisio.R;
 
-import org.pathvisio.gui.Engine;
-
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -36,12 +34,11 @@
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
-
-import org.pathvisio.preferences.Preferences;
-import org.pathvisio.util.Utils;
-import org.pathvisio.util.tableviewer.PathwayTable;
 import org.pathvisio.R.RCommands.RException;
 import org.pathvisio.R.RDataIn.ResultSet;
+import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
+import org.pathvisio.util.Utils;
+import org.pathvisio.util.tableviewer.PathwayTable;
 
 public class StatsResultTable extends PathwayTable {
 	List<ResultSet> results;
@@ -127,7 +124,7 @@
 		saveAsR.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
 				FileDialog fd = new FileDialog(getShell(), SWT.SAVE);
-				fd.setFilterPath(Engine.getPreferences().getString(Preferences.PREF_DIR_RDATA));
+				fd.setFilterPath(SwtPreference.SWT_DIR_RDATA.getValue());
 				String fn = fd.open();
 				if(fn == null) return;
 				try {
Index: branches/g2d-branch/src/v2/org/pathvisio/R/RFunctionLoader.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/R/RFunctionLoader.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/R/RFunctionLoader.java	(revision 930)
@@ -53,7 +53,7 @@
 import org.eclipse.swt.widgets.Text;
 import org.pathvisio.R.RCommands.RException;
 import org.pathvisio.R.wizard.RWizard;
-import org.pathvisio.gui.Engine;
+import org.pathvisio.gui.swt.Engine;
 import org.pathvisio.util.JarUtils;
 import org.pathvisio.util.Utils;
 import org.pathvisio.util.SwtUtils.SimpleRunnableWithProgress;
Index: branches/g2d-branch/src/v2/org/pathvisio/gui/MainWindow.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/gui/MainWindow.java	(revision 929)
+++ branches/g2d-branch/src/v2/org/pathvisio/gui/MainWindow.java	(revision 930)
@@ -1,1091 +0,0 @@
-// PathVisio,
-// a tool for data visualization and analysis using Biological Pathways
-// Copyright 2006-2007 BiGCaT Bioinformatics
-//
-// Licensed under the Apache License, Version 2.0 (the "License"); 
-// you may not use this file except in compliance with the License. 
-// You may obtain a copy of the License at 
-// 
-// http://www.apache.org/licenses/LICENSE-2.0 
-//  
-// Unless required by applicable law or agreed to in writing, software 
-// distributed under the License is distributed on an "AS IS" BASIS, 
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
-// See the License for the specific language governing permissions and 
-// limitations under the License.
-//
-package org.pathvisio.gui;
-
-import java.io.File;
-import java.net.URL;
-import java.util.Vector;
-
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.ActionContributionItem;
-import org.eclipse.jface.action.ControlContribution;
-import org.eclipse.jface.action.CoolBarManager;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.action.IContributionItem;
-import org.eclipse.jface.action.IMenuCreator;
-import org.eclipse.jface.action.MenuManager;
-import org.eclipse.jface.action.Separator;
-import org.eclipse.jface.action.StatusLineManager;
-import org.eclipse.jface.action.ToolBarContributionItem;
-import org.eclipse.jface.action.ToolBarManager;
-import org.eclipse.jface.dialogs.MessageDialog;
-import org.eclipse.jface.dialogs.ProgressMonitorDialog;
-import org.eclipse.jface.resource.ImageDescriptor;
-import org.eclipse.jface.window.ApplicationWindow;
-import org.eclipse.jface.wizard.WizardDialog;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.ScrolledComposite;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Combo;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
-import org.eclipse.swt.widgets.FileDialog;
-import org.eclipse.swt.widgets.Menu;
-import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Globals;
-import org.pathvisio.R.RController;
-import org.pathvisio.R.RDataIn;
-import org.pathvisio.R.RCommands.RException;
-import org.pathvisio.R.wizard.RWizard;
-import org.pathvisio.data.DBConnector;
-import org.pathvisio.data.Gdb;
-import org.pathvisio.data.Gex;
-import org.pathvisio.data.GexImportWizard;
-import org.pathvisio.data.Gex.ExpressionDataEvent;
-import org.pathvisio.data.Gex.ExpressionDataListener;
-import org.pathvisio.gui.Engine.ApplicationEvent;
-import org.pathvisio.gui.Engine.ApplicationEventListener;
-import org.pathvisio.preferences.Preferences;
-import org.pathvisio.search.PathwaySearchComposite;
-import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.VPathway;
-import org.pathvisio.visualization.LegendPanel;
-import org.pathvisio.visualization.VisualizationDialog;
-import org.pathvisio.visualization.VisualizationManager;
-
-import edu.stanford.ejalbert.BrowserLauncher;
-
-/**
- * This class is the main class in the GPML project. 
- * It acts as a container for pathwaydrawings and facilitates
- * loading, creating and saving drawings to and from GPML.
- */
-public class MainWindow extends ApplicationWindow implements 
-						ApplicationEventListener, ExpressionDataListener
-{
-	private static final long serialVersionUID = 1L;
-	static int ZOOM_TO_FIT = -1;
-		
-	private CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
-	private CommonActions.NewAction newAction = new CommonActions.NewAction (this);
-	private CommonActions.OpenAction openAction = new CommonActions.OpenAction (this);	
-	private CommonActions.ImportAction importAction = new CommonActions.ImportAction (this);	
-	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
-	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
-	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
-	private CommonActions.CloseAction closeAction = new CommonActions.CloseAction(this);	
-	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
-	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
-	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
-	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
-	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
-	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
-	
-	private SwitchEditModeAction switchEditModeAction = new SwitchEditModeAction(this);
-	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
-	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
-
-	/**
-	 * {@link Action} to add a new element to the gpml pathway
-	 */
-	private class NewElementAction extends Action
-	{
-		MainWindow window;
-		int element;
-		
-		/**
-		 * Constructor for this class
-		 * @param e	type of element this action adds; a {@link VPathway} field constant
-		 */
-		public NewElementAction (int e)
-		{
-			element = e;
-		
-			String toolTipText;
-			URL imageURL = null;
-			toolTipText = null;
-			switch(element) {
-			case VPathway.NEWLINE: 
-				toolTipText = "Draw new line";
-				imageURL = Engine.getResourceURL("icons/newline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEARROW:
-				toolTipText = "Draw new arrow";
-				imageURL = Engine.getResourceURL("icons/newarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHED:
-				toolTipText = "Draw new dashed line";
-				imageURL = Engine.getResourceURL("icons/newdashedline.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEDASHEDARROW:
-				toolTipText = "Draw new dashed arrow";
-				imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLABEL:
-				toolTipText = "Draw new label";
-				imageURL = Engine.getResourceURL("icons/newlabel.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWARC:
-				toolTipText = "Draw new arc";
-				imageURL = Engine.getResourceURL("icons/newarc.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWBRACE:
-				toolTipText = "Draw new brace";
-				imageURL = Engine.getResourceURL("icons/newbrace.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWGENEPRODUCT:
-				toolTipText = "Draw new geneproduct";
-				imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECTANGLE:
-				imageURL = Engine.getResourceURL("icons/newrectangle.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWOVAL:
-				toolTipText = "Draw new oval";
-				imageURL = Engine.getResourceURL("icons/newoval.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWTBAR:
-				toolTipText = "Draw new TBar";
-				imageURL = Engine.getResourceURL("icons/newtbar.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORROUND:
-				toolTipText = "Draw new round receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWRECEPTORSQUARE:
-				toolTipText = "Draw new square receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDROUND:
-				toolTipText = "Draw new round ligand";
-				imageURL = Engine.getResourceURL("icons/newligandround.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLIGANDSQUARE:
-				toolTipText = "Draw new square ligand";
-				imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
-				setChecked(false);
-				break;
-			case VPathway.NEWLINEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
-				imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
-				toolTipText = "Draw new line or arrow";
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
-				imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
-				toolTipText = "Draw new ligand or receptor";
-				break;
-			}
-			setToolTipText(toolTipText);
-			setId("newItemAction");
-			if(imageURL != null) setImageDescriptor(ImageDescriptor.createFromURL(imageURL));
-		}
-				
-		public void run () {
-			if(isChecked())
-			{
-				deselectNewItemActions();
-				setChecked(true);
-				Engine.getVPathway().setNewGraphics(element);
-			}
-			else
-			{	
-				Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-			}
-		}
-		
-	}
-
-	/**
-	 * {@link Action} to select a Gene Database
-	 */
-	private class SelectGdbAction extends Action
-	{
-		MainWindow window;
-		public SelectGdbAction(MainWindow w)
-		{
-			window = w;
-			setText("Select &Gene Database");
-			setToolTipText("Select Gene Database");
-		}
-		
-		public void run () {			
-			try {
-				DBConnector dbcon = Gdb.getDBConnector();
-				String dbName = dbcon.openChooseDbDialog(getShell());
-				
-				if(dbName == null) return;
-				
-				Gdb.connect(dbName);
-				setStatus("Using Gene Database: '" + Engine.getPreferences().getString(Preferences.PREF_CURR_GDB) + "'");
-				cacheExpressionData();
-			} catch(Exception e) {
-				String msg = "Failed to open Gene Database; " + e.getMessage();
-				MessageDialog.openError (window.getShell(), "Error", 
-						"Error: " + msg + "\n\n" + 
-						"See the error log for details.");
-				Engine.log.error(msg, e);
-			}
-		}
-	}
-	
-	/**
-	 * {@link Action} to switch between edit and view mode
-	 */
-	private class SwitchEditModeAction extends Action implements ApplicationEventListener
-	{
-		final String ttChecked = "Exit edit mode";
-		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
-		MainWindow window;
-		public SwitchEditModeAction (MainWindow w)
-		{
-			super("&Edit mode", IAction.AS_CHECK_BOX);
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
-			setToolTipText(ttUnChecked);
-			window = w;
-			
-			Engine.addApplicationEventListener(this);
-		}
-		
-		public void run () {
-			if(Engine.isDrawingOpen())
-			{
-				VPathway drawing = Engine.getVPathway();
-				if(isChecked())
-				{
-					//Switch to edit mode: show edit toolbar, show property table in sidebar
-					drawing.setEditMode(true);
-					showEditActionsCI(true);
-					rightPanel.getTabFolder().setSelection(1);
-				}
-				else
-				{
-					//Switch to view mode: hide edit toolbar, show backpage browser in sidebar
-					drawing.setEditMode(false);
-					showEditActionsCI(false);
-					rightPanel.getTabFolder().setSelection(0);
-				}
-			}
-			else //No gpml pathway loaded, deselect action and do nothing
-			{
-				setChecked(false);
-			}
-			getCoolBarManager().update(true);
-		}
-		
-		public void setChecked(boolean check) {
-			super.setChecked(check);
-			setToolTipText(check ? ttChecked : ttUnChecked);
-		}
-		
-		public void switchEditMode(boolean edit) {
-			setChecked(edit);
-			run();
-			
-		}
-
-		public void applicationEvent(ApplicationEvent e) {
-			if(e.type == ApplicationEvent.OPEN_PATHWAY) {
-				Engine.getVPathway().setEditMode(isChecked());
-			}
-			else if(e.type == ApplicationEvent.NEW_PATHWAY) {
-				switchEditMode(true);
-			}
-		}
-	}
-
-	/**
-	 * {@link Action} to show or hide the right sidepanel
-	 */
-	public class ShowRightPanelAction extends Action
-	{
-		MainWindow window;
-		public ShowRightPanelAction (MainWindow w)
-		{
-			super("Show &information panel", IAction.AS_CHECK_BOX);
-			window = w;
-			setChecked(true);
-		}
-		
-		public void run() {
-			if(isChecked()) rightPanel.show();
-			else rightPanel.hide();
-		}
-	}
-
-	/**
-	 * {@link Action} to select an expression dataset
-	 */
-	private class SelectGexAction extends Action
-	{
-		MainWindow window;
-		public SelectGexAction(MainWindow w)
-		{
-			window = w;
-			setText("Select &Expression Data");
-			setToolTipText("Select Expression Data");
-		}
-		
-		public void run () {
-			try {
-				DBConnector dbcon = Gex.getDBConnector();
-				String dbName = dbcon.openChooseDbDialog(getShell());
-				
-				if(dbName == null) return;
-				
-				Gex.connect(dbName);
-			} catch(Exception e) {
-				String msg = "Failed to open Expression Dataset" + e.getMessage();
-				MessageDialog.openError (window.getShell(), "Error", 
-						"Error: " + msg + "\n\n" + 
-						"See the error log for details.");
-				Engine.log.error(msg, e);
-			}		
-		}
-	}
-	private SelectGexAction selectGexAction = new SelectGexAction(this);
-	
-	/**
-	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
-	 */
-	private void cacheExpressionData()
-	{
-		if(Engine.isDrawingOpen())
-		{
-			VPathway drawing = Engine.getVPathway();
-			//Check for neccesary connections
-			if(Gex.isConnected() && Gdb.isConnected())
-			{
-				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
-				try {
-					dialog.run(true, true, Gex.createCacheRunnable(drawing.getMappIds(), drawing.getSystemCodes()));
-					drawing.redraw();
-				} catch(Exception e) {
-					String msg = "while caching expression data: " + e.getMessage();					
-					MessageDialog.openError (getShell(), "Error", 
-							"Error: " + msg + "\n\n" + 
-							"See the error log for details.");
-					Engine.log.error(msg, e);
-				}
-			}
-		}
-	}
-	
-
-	/**
-	 * {@link Action} that opens an {@link GexImportWizard} that guides the user
-	 * through the steps required to create a new
-	 * expression dataset
-	 */
-	private class CreateGexAction extends Action
-	{
-		MainWindow window;
-		public CreateGexAction(MainWindow w)
-		{
-			window = w;
-			setText("&Create new Expression Dataset");
-			setToolTipText("Create a new Expression Dataset from a tab delimited text file");
-		}
-		
-		public void run() {
-			if(!Gdb.isConnected())
-			{
-				MessageDialog.openWarning(getShell(), "Warning", "No gene database selected, " +
-						"select gene database before creating a new expression dataset");
-				return;
-			}
-			WizardDialog dialog = new WizardDialog(getShell(), new GexImportWizard());
-			dialog.setBlockOnOpen(true);
-			dialog.open();
-		}
-	}
-	private CreateGexAction createGexAction = new CreateGexAction(this);
-	
-	/**
-	 *{@link Action} to start conversion of a GenMAPP gex to an expression database in
-	 * pgex format
-	 */
-	private class ConvertGexAction extends Action
-	{
-		MainWindow window;
-		public ConvertGexAction(MainWindow w)
-		{
-			window = w;
-			setText("&Gex to PathVisio");
-			setToolTipText("Convert from GenMAPP 2 Gex to PathVisio Expression Data");
-		}
-		
-		public void run () {
-			File gexFile = null;
-			File gmGexFile = null;
-			
-			// Initialize filedialog to open GenMAPP gex
-			FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
-			fileDialog.setText("Select Expression Dataset to convert");
-			fileDialog.setFilterPath("C:\\GenMAPP 2 Data\\Expression Datasets");
-			fileDialog.setFilterExtensions(new String[] {"*.gex","*.*"});
-			fileDialog.setFilterNames(new String[] {"Expression Dataset (*.gex)","All files (*.*)"});
-			String file = fileDialog.open();
-			// Only proceed if user selected a file
-			if(file == null) return;
-			gmGexFile = new File(file);
-			
-			String dbName = null;
-			try {
-				DBConnector dbcon = Gex.getDBConnector();
-				dbName = dbcon.openNewDbDialog(getShell(), 
-						gmGexFile.getName().replace(".gex", ".properties"));
-			} catch(Exception e) {
-				String msg = "Failed to get database connector" + e.getMessage();
-				MessageDialog.openError (window.getShell(), "Error", 
-						"Error: " + msg + "\n\n" + 
-						"See the error log for details.");
-				Engine.log.error(msg, e);
-			}
-			
-			// Only proceed if user selected a file
-			if(dbName != null) {
-				Gex.setDbName(dbName);
-				Gex.setGmGexFile(gmGexFile);
-				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
-				try {
-					dialog.run(true, true, Gex.convertRunnable);
-				} catch(Exception e) {
-					String msg = "While converting GenMAPP GEX: " + e.getMessage();
-					MessageDialog.openError (window.getShell(), "Error", 
-							"Error: " + msg + "\n\n" + 
-							"See the error log for details.");
-					Engine.log.error(msg, e);
-				}
-				
-			}
-		}
-	}
-	private ConvertGexAction convertGexAction = new ConvertGexAction(this);
-	
-	/**
-	 * {@link Action} to start conversion of a GenMAPP Gene database to a gene database 
-	 * in hsqldb format
-	 */
-	private class ConvertGdbAction extends Action
-	{
-		MainWindow window;
-		public ConvertGdbAction(MainWindow w)
-		{
-			window = w;
-			setText("&Gdb to PathVisio");
-			setToolTipText("Convert from GenMAPP 2 Gene database to PathVisio Gene database");
-		}
-		
-		public void run () {
-			String dbName = null;
-			File gmGdbFile = null;
-			// Initialize filedialog to open GenMAPP gdb
-			FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
-			fileDialog.setText("Select Gene database to convert");
-			fileDialog.setFilterPath("C:\\GenMAPP 2 Data\\Gene Databases");
-			fileDialog.setFilterExtensions(new String[] {"*.gdb","*.*"});
-			fileDialog.setFilterNames(new String[] {"Gene database (*.gdb)","All files (*.*)"});
-			String file = fileDialog.open();
-			// Only proceed if user selected a file
-			if(file == null) return;
-			gmGdbFile = new File(file);
-
-			try {
-				DBConnector dbcon = Gex.getDBConnector();
-				dbName = dbcon.openNewDbDialog(getShell(), 
-						gmGdbFile.getName().replace(".gdb", ".properties"));
-			} catch(Exception e) {
-				MessageDialog.openError(getShell(), 
-						"Error", "Unable to create database connector, " +
-						"see error log for details");
-				Engine.log.error("Unable to create database connector", e);	
-			}
-			
-			// Only proceed if user selected a database name
-			if(dbName != null) {
-				Gdb.setConvertGdbName(dbName);
-				Gdb.setConvertGmGdbFile(gmGdbFile);
-				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
-				try {
-					dialog.run(true, true, Gdb.getConvertRunnable());
-				} catch(Exception e) {
-					String msg = "While converting GenMAPP gene database: "+ e.getMessage();
-					MessageDialog.openError (window.getShell(), "Error", 
-							"Error: " + msg + "\n\n" + 
-					"See the error log for details.");
-					Engine.log.error(msg, e);
-				}
-			}
-		}
-	}
-	private ConvertGdbAction convertGdbAction = new ConvertGdbAction(this);
-	
-	/**
-	 * {@link Action} to open the {@link ColorSetWindow}
-	 */
-	private class ColorSetManagerAction extends Action implements ExpressionDataListener
-	{
-		MainWindow window;
-		public ColorSetManagerAction (MainWindow w)
-		{
-			window = w;
-			setText("&Color Set manager");
-			setToolTipText("Create and edit color sets");
-			setImageDescriptor(ImageDescriptor.createFromURL(
-					Engine.getResourceURL("icons/colorset.gif")));
-			Gex.addListener(this);
-			setEnabled(false);
-		}
-		public void run () {
-			VisualizationDialog d = new VisualizationDialog(getShell());
-			d.setTabItemOnOpen(VisualizationDialog.TABITEM_COLORSETS);
-			d.open();
-		}
-		public void expressionDataEvent(ExpressionDataEvent e) {
-			switch(e.type) {
-			case ExpressionDataEvent.CONNECTION_OPENED:
-				setEnabled(true); break;
-			case ExpressionDataEvent.CONNECTION_CLOSED:
-				setEnabled(false); break;
-			}	
-		}
-	}
-	private ColorSetManagerAction colorSetManagerAction = new ColorSetManagerAction(this);
-	
-	private class VisualizationDialogAction extends Action
-	{
-		MainWindow window;
-		public VisualizationDialogAction (MainWindow w)
-		{
-			window = w;
-			setText("&Visualizations");
-			setToolTipText("Create and edit visualizations");
-			setImageDescriptor(ImageDescriptor.createFromURL(
-					Engine.getResourceURL("icons/visualizations.gif")));
-		}
-		public void run () {
-			VisualizationDialog d = new VisualizationDialog(getShell());
-			d.open();
-		}
-	}
-	private VisualizationDialogAction visualizationDialogAction = new VisualizationDialogAction(this);
-	
-	public static void openHelp() throws Exception {
-		BrowserLauncher bl = new BrowserLauncher(null);
-		bl.openURLinBrowser(Globals.HELP_URL);
-	}
-			
-
-	/**
-	 * {@link Action} to open the pathway statistics wizard
-	 */
-	private class RStatsAction extends Action
-	{
-		MainWindow window;
-		public RStatsAction (MainWindow w)
-		{
-			window = w;
-			setText("Perform statistical test@Ctrl+R");
-		}
-		
-		public void run() {
-			WizardDialog wd = new RWizard.RWizardDialog(getShell(), new RWizard());
-			wd.setBlockOnOpen(true);
-			if(RController.startR()) wd.open();
-		}
-	}
-	private RStatsAction rStatsAction = new RStatsAction(this);
-	
-	/**
-	 * {@link Action} to load results from pathway statistics
-	 */
-	private class RLoadStatsAction extends Action
-	{
-		MainWindow window;
-		public RLoadStatsAction (MainWindow w)
-		{
-			window = w;
-			setText("&Load results");
-		}
-		
-		public void run() {
-			FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
-			fd.setFilterPath(Engine.getPreferences().getString(Preferences.PREF_DIR_RDATA));
-			fd.setFilterNames(new String[] {"R data file"});
-			fd.setFilterExtensions(new String[] {"*.*"});
-			File file = new File(fd.open());
-			if(file.canRead()) {
-				try {
-					RDataIn.displayResults(RDataIn.loadResultSets(file), file.getName());
-				} catch(RException e) {
-					MessageDialog.openError(getShell(), "Unable to load results", e.getMessage());
-				}
-			}
-		}
-	}
-	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);
-					
-	
-	/**
-	 * {@link IMenuCreator} that creates the drop down menus for 
-	 * adding new line-type and -shape elements
-	 */
-	private class NewItemMenuCreator implements IMenuCreator {
-		private Menu menu;
-		int element;
-		
-		/**
-		 * Constructor for this class
-		 * @param e	type of menu to create; one of {@link VPathway}.NEWLINEMENU
-		 * , {@link VPathway}.NEWLINESHAPEMENU
-		 */
-		public NewItemMenuCreator(int e) 
-		{
-			element = e;
-		}
-		
-		public Menu getMenu(Menu parent) {
-			return null;
-		}
-
-		public Menu getMenu(Control parent) {
-			if (menu != null)
-				menu.dispose();
-			
-			menu = new Menu(parent);
-			Vector<Action> actions = new Vector<Action>();
-			switch(element) {
-			case VPathway.NEWLINEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLINE));
-				actions.add(new NewElementAction(VPathway.NEWLINEARROW));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHED));
-				actions.add(new NewElementAction(VPathway.NEWLINEDASHEDARROW));
-				break;
-			case VPathway.NEWLINESHAPEMENU:
-				actions.add(new NewElementAction(VPathway.NEWLIGANDROUND));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORROUND));
-				actions.add(new NewElementAction(VPathway.NEWLIGANDSQUARE));
-				actions.add(new NewElementAction(VPathway.NEWRECEPTORSQUARE));
-			}
-			
-			for (Action act : actions)
-			{			
-				addActionToMenu(menu, act);
-			}
-
-			return menu;
-		}
-		
-		protected void addActionToMenu(Menu parent, Action a)
-		{
-			 ActionContributionItem item= new ActionContributionItem(a);
-			 item.fill(parent, -1);
-		}
-		
-		public void dispose() 
-		{
-			if (menu != null)  {
-				menu.dispose();
-				menu = null;
-			}
-		}
-	}
-	
-	/**
-	 * Deselects all NewElementActions on the toolbar and sets 
-	 * VPathway.newGraphics to VPathway.NEWNONE
-	 */
-	public void deselectNewItemActions()
-	{
-		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
-		for(int i = 0; i < items.length; i++)
-		{
-			if(items[i] instanceof ActionContributionItem)
-			{
-				((ActionContributionItem)items[i]).getAction().setChecked(false);
-			}
-		}
-		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
-	}
-	
-	// Elements of the coolbar
-	ToolBarContributionItem commonActionsCI;
-	ToolBarContributionItem editActionsCI;
-	ToolBarContributionItem visualizationCI;
-	ToolBarContributionItem viewActionsCI;
-	protected CoolBarManager createCoolBarManager(int style)
-	{
-		createCommonActionsCI();
-		createEditActionsCI();
-		createViewActionsCI();
-		createVisualizationCI();
-		
-		CoolBarManager coolBarManager = new CoolBarManager(style);
-		coolBarManager.setLockLayout(true);
-		
-		coolBarManager.add(commonActionsCI);
-		coolBarManager.add(viewActionsCI);
-		coolBarManager.add(visualizationCI);
-		return coolBarManager;
-	}
-	
-	/**
-	 * Creates element of the coolbar containing common actions as new, save etc.
-	 */
-	protected void createCommonActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(newAction);
-		toolBarManager.add(openAction);
-		toolBarManager.add(saveAction);
-		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
-	}
-	
-	/**
-	 * Creates element of the coolbar only shown in edit mode (new element actions)
-	 */
-	protected void createEditActionsCI()
-	{
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);		
-		toolBarManager.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLABEL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINEMENU));
-		toolBarManager.add(new NewElementAction(VPathway.NEWRECTANGLE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWOVAL));
-		toolBarManager.add(new NewElementAction(VPathway.NEWARC));
-		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
-		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
-		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
-		
-		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
-	}
-	
-	/**
-	 * Creates element of the coolbar containing controls related to viewing a pathway
-	 */
-	protected void createViewActionsCI()
-	{
-		final MainWindow window = this;
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		//Add zoomCombo
-		toolBarManager.add(new ControlContribution("ZoomCombo") {
-			protected Control createControl(Composite parent) {
-				final Combo zoomCombo = new Combo(parent, SWT.DROP_DOWN);
-				zoomCombo.setItems(new String[] { "200%", "100%", "75%", "50%", "Zoom to fit" });
-				zoomCombo.setText("100%");
-				zoomCombo.addSelectionListener(new SelectionAdapter() {
-					public void widgetSelected(SelectionEvent e) {
-						int pctZoom = 100;
-						String zoomText = zoomCombo.getText().replace("%", "");
-						try {
-							pctZoom = Integer.parseInt(zoomText);
-						} catch (Exception ex) { 
-							if(zoomText.equals("Zoom to fit"))
-									{ pctZoom = ZOOM_TO_FIT; } else { return; }
-						}
-						new CommonActions.ZoomAction(window, pctZoom).run();
-					}
-					public void widgetDefaultSelected(SelectionEvent e) { widgetSelected(e); }
-				});
-				return zoomCombo;
-			}
-		});
-		//Add swich to editmode
-		toolBarManager.add(switchEditModeAction);
-		
-		viewActionsCI =  new ToolBarContributionItem(toolBarManager, "SwitchActions");
-	}
-		
-	/**
-	 * Creates element of the coolbar containing controls related to visualizations
-	 */
-	protected void createVisualizationCI() {
-		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
-		toolBarManager.add(VisualizationManager.getComboItem());
-		toolBarManager.add(visualizationDialogAction);
-		toolBarManager.add(colorSetManagerAction);
-		visualizationCI = new ToolBarContributionItem(toolBarManager, "ColorSetActions");
-	}
-	
-	/**
-	 * Shows or hides the editActionsCI
-	 * @param show	true/false for either show or hide
-	 */
-	private void showEditActionsCI(boolean show)
-	{
-		if(show) {
-			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
-		}
-		else {
-			getCoolBarManager().remove(editActionsCI);
-		}
-//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
-		getCoolBarManager().update(true);
-	}
-	
-	/**
-	 * Shows or hides the visualizationCI
-	 * @param show	true/false for either show or hide
-	 */
-	private void showVisualizationCI(boolean show) {
-		if(show) {
-			getCoolBarManager().insertAfter(viewActionsCI.getId(), visualizationCI);
-		} else {
-			getCoolBarManager().remove(visualizationCI);
-		}
-		getCoolBarManager().update(true);
-	}
-	
-	protected StatusLineManager createStatusLineManager() {
-		return super.createStatusLineManager();
-	}
-
-	/**
-	 *Builds and ads a menu to the Engine frame
-	 */
-	protected MenuManager createMenuManager()
-	{
-		menuManager = new MenuManager();
-		MenuManager fileMenu = new MenuManager ("&File");
-		fileMenu.add(newAction);
-		fileMenu.add(openAction);
-		fileMenu.add(saveAction);
-		fileMenu.add(saveAsAction);
-		//fileMenu.add(closeAction);
-		fileMenu.add(new Separator());
-		fileMenu.add(importAction);
-		fileMenu.add(exportAction);
-		fileMenu.add(new Separator());
-		fileMenu.add(exitAction);
-		MenuManager editMenu = new MenuManager ("&Edit");
-		editMenu.add(undoAction); // only in v2 while testing!
-		editMenu.add(new Separator());
-		editMenu.add(copyAction);
-		editMenu.add(pasteAction);
-		editMenu.add(new Separator());
-		editMenu.add(switchEditModeAction);
-		editMenu.add(preferencesAction);
-		MenuManager viewMenu = new MenuManager ("&View");
-		viewMenu.add(showRightPanelAction);
-		MenuManager zoomMenu = new MenuManager("&Zoom");
-		zoomMenu.add(new CommonActions.ZoomAction(this, 50));
-		zoomMenu.add(new CommonActions.ZoomAction(this, 75));
-		zoomMenu.add(new CommonActions.ZoomAction(this, 100));
-		zoomMenu.add(new CommonActions.ZoomAction(this, 125));
-		zoomMenu.add(new CommonActions.ZoomAction(this, 150));
-		zoomMenu.add(new CommonActions.ZoomAction(this, 200));
-		zoomMenu.add(new CommonActions.ZoomAction(this, ZOOM_TO_FIT));
-		viewMenu.add(zoomMenu);
-		MenuManager dataMenu = new MenuManager ("&Data");
-		dataMenu.add(selectGdbAction);
-		dataMenu.add(selectGexAction);
-		dataMenu.add(createGexAction);
-		dataMenu.add(colorSetManagerAction);
-		dataMenu.add(visualizationDialogAction);
-		if(Engine.USE_R) {
-			MenuManager statsMenu = new MenuManager("&Pathway statistics");
-			dataMenu.add(statsMenu);
-			statsMenu.add(rStatsAction);
-			statsMenu.add(rLoadStatsAction);
-		}
-		dataMenu.add(new CommonActions.BiopaxAction(this));
-		MenuManager convertMenu = new MenuManager("&Convert from GenMAPP 2");
-		convertMenu.add(convertGexAction);
-		convertMenu.add(convertGdbAction);
-		dataMenu.add(convertMenu);
-		
-		MenuManager helpMenu = new MenuManager ("&Help");
-		helpMenu.add(aboutAction);
-		helpMenu.add(helpAction);
-		menuManager.add(fileMenu);
-		menuManager.add(editMenu);
-		menuManager.add(viewMenu);
-		menuManager.add(dataMenu);
-		menuManager.add(helpMenu);
-		return menuManager;
-	}
-	
-	public MainWindow()
-	{
-		this(null);
-	}
-	
-	private MenuManager menuManager = null;
-	/**
-	 * can be accessed by plugins etc. 
-	 * to add menu items and even complete menus.
-	 * 
-	 * (plugin API)
-	 */
-	public MenuManager getMenuManager()
-	{
-		return menuManager;
-	}
-	/**
-	 *Constructor for the Engine class
-	 *Initializes new Engine and sets properties for frame
-	 */
-	public MainWindow(Shell shell)
-	{
-		super(shell);
-		
-		addMenuBar();
-		addStatusLine();
-		addCoolBar(SWT.FLAT | SWT.LEFT);
-		
-		Engine.addApplicationEventListener(this);
-		Gex.addListener(this);
-	}
-	
-	public boolean close() {
-		Engine.fireApplicationEvent(
-				new ApplicationEvent(this, ApplicationEvent.CLOSE_APPLICATION));
-		return super.close();
-	}
-	
-	public ScrolledComposite sc;
-	public BackpagePanel bpBrowser; //Browser for showing backpage information
-	public PropertyPanel propertyTable;	//Table showing properties of Graphics objects
-	SashForm sashForm; //SashForm containing the drawing area and sidebar
-	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
-	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
-	LegendPanel legend; //Legend to display colorset information
-	protected Control createContents(Composite parent)
-	{		
-		Shell shell = parent.getShell();
-		shell.setSize(800, 600);
-		shell.setLocation(100, 100);
-		
-		shell.setText(Globals.APPLICATION_VERSION_NAME);
-		
-		GuiMain.loadImages(shell.getDisplay());
-		
-		shell.setImage(Engine.getImageRegistry().get("shell.icon"));
-		
-		Composite viewComposite = new Composite(parent, SWT.NULL);
-		viewComposite.setLayout(new FillLayout());
-		
-		sashForm = new SashForm(viewComposite, SWT.HORIZONTAL);
-		
-		sc = new ScrolledComposite (sashForm, SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		sc.setFocus();
-		
-		rightPanel = new TabbedSidePanel(sashForm, SWT.NULL);
-		
-		//rightPanel controls
-		bpBrowser = new BackpagePanel(rightPanel.getTabFolder(), SWT.NONE);
-		propertyTable = new PropertyPanel(
-				rightPanel.getTabFolder(), SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
-		pwSearchComposite = new PathwaySearchComposite(rightPanel.getTabFolder(), SWT.NONE, this);
-		legend = new LegendPanel(rightPanel.getTabFolder(), SWT.V_SCROLL | SWT.H_SCROLL);
-		Composite visPanel = VisualizationManager.createSidePanel(rightPanel.getTabFolder());
-		
-		rightPanel.addTab(bpBrowser, "Backpage");
-		rightPanel.addTab(propertyTable, "Properties");
-		rightPanel.addTab(pwSearchComposite, "Pathway Search");
-		rightPanel.addTab(legend, "Legend");
-		rightPanel.addTab(visPanel, "Visualization");
-		
-		int sidePanelSize = Engine.getPreferences().getInt(Preferences.PREF_SIDEPANEL_SIZE);
-		sashForm.setWeights(new int[] {100 - sidePanelSize, sidePanelSize});
-		showRightPanelAction.setChecked(sidePanelSize > 0);
-		
-		rightPanel.getTabFolder().setSelection(0); //select backpage browser tab
-		rightPanel.hideTab("Legend"); //hide legend on startup
-		
-		setStatus("Using Gene Database: '" + Engine.getPreferences().getString(Preferences.PREF_CURR_GDB) + "'");
-				
-		return parent;
-		
-	};
-	
-	public TabbedSidePanel getSidePanel() { return rightPanel; }
-	
-	public LegendPanel getLegend() { return legend; }
-	
-	public void showLegend(boolean show) {	
-		if(show && Gex.isConnected()) {
-			if(rightPanel.isVisible("Legend")) return; //Legend already visible
-			rightPanel.unhideTab("Legend", 0);
-			rightPanel.selectTab("Legend");
-		}
-		
-		else rightPanel.hideTab("Legend");
-	}
-			
-	/**
-	 * Creates a new empty drawing canvas
-	 * @return the empty {@link VPathway}
-	 */
-	public VPathway createNewDrawing()
-	{		
-		return new VPathway(sc, SWT.NO_BACKGROUND);
-	}
-	
-	public void applicationEvent(ApplicationEvent e) {
-		VPathway drawing = null;
-		switch(e.type) {
-		case ApplicationEvent.NEW_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			break;
-		case ApplicationEvent.OPEN_PATHWAY:
-			drawing = Engine.getVPathway();
-			sc.setContent(drawing);
-			if(Gex.isConnected()) cacheExpressionData();
-			break;	
-		}
-	}
-
-	public void expressionDataEvent(ExpressionDataEvent e) {
-		switch(e.type) {
-		case ExpressionDataEvent.CONNECTION_CLOSED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					showLegend(false);
-				}
-			});
-			break;
-		case ExpressionDataEvent.CONNECTION_OPENED:
-			getShell().getDisplay().syncExec(new Runnable() {
-				public void run() {
-					cacheExpressionData();
-					showLegend(true);
-				}
-			});
-			break;
-		}
-	}
-} // end of class
Index: branches/g2d-branch/src/v2/org/pathvisio/gui/swt/MainWindow.java
===================================================================
--- branches/g2d-branch/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 0)
+++ branches/g2d-branch/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 930)
@@ -0,0 +1,1098 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.gui.swt;
+
+import java.io.File;
+import java.net.URL;
+import java.util.Vector;
+import java.util.prefs.Preferences;
+
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.ActionContributionItem;
+import org.eclipse.jface.action.ControlContribution;
+import org.eclipse.jface.action.CoolBarManager;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.action.IContributionItem;
+import org.eclipse.jface.action.IMenuCreator;
+import org.eclipse.jface.action.MenuManager;
+import org.eclipse.jface.action.Separator;
+import org.eclipse.jface.action.StatusLineManager;
+import org.eclipse.jface.action.ToolBarContributionItem;
+import org.eclipse.jface.action.ToolBarManager;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.window.ApplicationWindow;
+import org.eclipse.jface.wizard.WizardDialog;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.custom.ScrolledComposite;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Combo;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.FileDialog;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.Shell;
+import org.pathvisio.Globals;
+import org.pathvisio.R.RController;
+import org.pathvisio.R.RDataIn;
+import org.pathvisio.R.RCommands.RException;
+import org.pathvisio.R.wizard.RWizard;
+import org.pathvisio.data.DBConnector;
+import org.pathvisio.data.Gdb;
+import org.pathvisio.data.Gex;
+import org.pathvisio.data.GexImportWizard;
+import org.pathvisio.data.Gex.ExpressionDataEvent;
+import org.pathvisio.data.Gex.ExpressionDataListener;
+import org.pathvisio.gui.swt.Engine.ApplicationEvent;
+import org.pathvisio.gui.swt.Engine.ApplicationEventListener;
+import org.pathvisio.preferences.GlobalPreference;
+import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
+import org.pathvisio.search.PathwaySearchComposite;
+import org.pathvisio.view.GeneProduct;
+import org.pathvisio.view.VPathway;
+import org.pathvisio.view.swt.VPathwaySWT;
+import org.pathvisio.visualization.LegendPanel;
+import org.pathvisio.visualization.VisualizationDialog;
+import org.pathvisio.visualization.VisualizationManager;
+
+import edu.stanford.ejalbert.BrowserLauncher;
+
+/**
+ * This class is the main class in the GPML project. 
+ * It acts as a container for pathwaydrawings and facilitates
+ * loading, creating and saving drawings to and from GPML.
+ */
+public class MainWindow extends ApplicationWindow implements 
+						ApplicationEventListener, ExpressionDataListener
+{
+	private static final long serialVersionUID = 1L;
+	static int ZOOM_TO_FIT = -1;
+		
+	private CommonActions.UndoAction undoAction = new CommonActions.UndoAction(this);	
+	private CommonActions.NewAction newAction = new CommonActions.NewAction (this);
+	private CommonActions.OpenAction openAction = new CommonActions.OpenAction (this);	
+	private CommonActions.ImportAction importAction = new CommonActions.ImportAction (this);	
+	private CommonActions.SaveAction saveAction = new CommonActions.SaveAction(this);	
+	private CommonActions.SaveAsAction saveAsAction = new CommonActions.SaveAsAction (this);
+	private CommonActions.ExportAction exportAction = new CommonActions.ExportAction (this);
+	private CommonActions.CloseAction closeAction = new CommonActions.CloseAction(this);	
+	private CommonActions.ExitAction exitAction = new CommonActions.ExitAction(this);
+	private CommonActions.PreferencesAction preferencesAction = new CommonActions.PreferencesAction(this);
+	private CommonActions.AboutAction aboutAction = new CommonActions.AboutAction(this);
+	private CommonActions.CopyAction copyAction = new CommonActions.CopyAction(this);
+	private CommonActions.HelpAction helpAction = new CommonActions.HelpAction(this);	
+	private CommonActions.PasteAction pasteAction = new CommonActions.PasteAction(this);
+	
+	private SwitchEditModeAction switchEditModeAction = new SwitchEditModeAction(this);
+	public ShowRightPanelAction showRightPanelAction = new ShowRightPanelAction(this);
+	private SelectGdbAction selectGdbAction = new SelectGdbAction(this);
+
+	/**
+	 * {@link Action} to add a new element to the gpml pathway
+	 */
+	private class NewElementAction extends Action
+	{
+		MainWindow window;
+		int element;
+		
+		/**
+		 * Constructor for this class
+		 * @param e	type of element this action adds; a {@link VPathway} field constant
+		 */
+		public NewElementAction (int e)
+		{
+			element = e;
+		
+			String toolTipText;
+			URL imageURL = null;
+			toolTipText = null;
+			switch(element) {
+			case VPathway.NEWLINE: 
+				toolTipText = "Draw new line";
+				imageURL = Engine.getResourceURL("icons/newline.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLINEARROW:
+				toolTipText = "Draw new arrow";
+				imageURL = Engine.getResourceURL("icons/newarrow.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLINEDASHED:
+				toolTipText = "Draw new dashed line";
+				imageURL = Engine.getResourceURL("icons/newdashedline.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLINEDASHEDARROW:
+				toolTipText = "Draw new dashed arrow";
+				imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLABEL:
+				toolTipText = "Draw new label";
+				imageURL = Engine.getResourceURL("icons/newlabel.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWARC:
+				toolTipText = "Draw new arc";
+				imageURL = Engine.getResourceURL("icons/newarc.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWBRACE:
+				toolTipText = "Draw new brace";
+				imageURL = Engine.getResourceURL("icons/newbrace.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWGENEPRODUCT:
+				toolTipText = "Draw new geneproduct";
+				imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWRECTANGLE:
+				imageURL = Engine.getResourceURL("icons/newrectangle.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWOVAL:
+				toolTipText = "Draw new oval";
+				imageURL = Engine.getResourceURL("icons/newoval.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWTBAR:
+				toolTipText = "Draw new TBar";
+				imageURL = Engine.getResourceURL("icons/newtbar.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWRECEPTORROUND:
+				toolTipText = "Draw new round receptor";
+				imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWRECEPTORSQUARE:
+				toolTipText = "Draw new square receptor";
+				imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLIGANDROUND:
+				toolTipText = "Draw new round ligand";
+				imageURL = Engine.getResourceURL("icons/newligandround.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLIGANDSQUARE:
+				toolTipText = "Draw new square ligand";
+				imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
+				setChecked(false);
+				break;
+			case VPathway.NEWLINEMENU:
+				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
+				imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
+				toolTipText = "Draw new line or arrow";
+				break;
+			case VPathway.NEWLINESHAPEMENU:
+				setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
+				imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
+				toolTipText = "Draw new ligand or receptor";
+				break;
+			}
+			setToolTipText(toolTipText);
+			setId("newItemAction");
+			if(imageURL != null) setImageDescriptor(ImageDescriptor.createFromURL(imageURL));
+		}
+				
+		public void run () {
+			if(isChecked())
+			{
+				deselectNewItemActions();
+				setChecked(true);
+				Engine.getVPathway().setNewGraphics(element);
+			}
+			else
+			{	
+				Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+			}
+		}
+		
+	}
+
+	/**
+	 * {@link Action} to select a Gene Database
+	 */
+	private class SelectGdbAction extends Action
+	{
+		MainWindow window;
+		public SelectGdbAction(MainWindow w)
+		{
+			window = w;
+			setText("Select &Gene Database");
+			setToolTipText("Select Gene Database");
+		}
+		
+		public void run () {			
+			try {
+				DBConnector dbcon = Gdb.getDBConnector();
+				String dbName = dbcon.openChooseDbDialog(getShell());
+				
+				if(dbName == null) return;
+				
+				Gdb.connect(dbName);
+				setStatus("Using Gene Database: '" + SwtPreference.SWT_DIR_GDB.getValue() + "'");
+				cacheExpressionData();
+			} catch(Exception e) {
+				String msg = "Failed to open Gene Database; " + e.getMessage();
+				MessageDialog.openError (window.getShell(), "Error", 
+						"Error: " + msg + "\n\n" + 
+						"See the error log for details.");
+				Engine.log.error(msg, e);
+			}
+		}
+	}
+	
+	/**
+	 * {@link Action} to switch between edit and view mode
+	 */
+	private class SwitchEditModeAction extends Action implements ApplicationEventListener
+	{
+		final String ttChecked = "Exit edit mode";
+		final String ttUnChecked = "Switch to edit mode to edit the pathway content";
+		MainWindow window;
+		public SwitchEditModeAction (MainWindow w)
+		{
+			super("&Edit mode", IAction.AS_CHECK_BOX);
+			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
+			setToolTipText(ttUnChecked);
+			window = w;
+			
+			Engine.addApplicationEventListener(this);
+		}
+		
+		public void run () {
+			if(Engine.isDrawingOpen())
+			{
+				VPathway drawing = Engine.getVPathway();
+				if(isChecked())
+				{
+					//Switch to edit mode: show edit toolbar, show property table in sidebar
+					drawing.setEditMode(true);
+					showEditActionsCI(true);
+					rightPanel.getTabFolder().setSelection(1);
+				}
+				else
+				{
+					//Switch to view mode: hide edit toolbar, show backpage browser in sidebar
+					drawing.setEditMode(false);
+					showEditActionsCI(false);
+					rightPanel.getTabFolder().setSelection(0);
+				}
+			}
+			else //No gpml pathway loaded, deselect action and do nothing
+			{
+				setChecked(false);
+			}
+			getCoolBarManager().update(true);
+		}
+		
+		public void setChecked(boolean check) {
+			super.setChecked(check);
+			setToolTipText(check ? ttChecked : ttUnChecked);
+		}
+		
+		public void switchEditMode(boolean edit) {
+			setChecked(edit);
+			run();
+			
+		}
+
+		public void applicationEvent(ApplicationEvent e) {
+			if(e.type == ApplicationEvent.OPEN_PATHWAY) {
+				Engine.getVPathway().setEditMode(isChecked());
+			}
+			else if(e.type == ApplicationEvent.NEW_PATHWAY) {
+				switchEditMode(true);
+			}
+		}
+	}
+
+	/**
+	 * {@link Action} to show or hide the right sidepanel
+	 */
+	public class ShowRightPanelAction extends Action
+	{
+		MainWindow window;
+		public ShowRightPanelAction (MainWindow w)
+		{
+			super("Show &information panel", IAction.AS_CHECK_BOX);
+			window = w;
+			setChecked(true);
+		}
+		
+		public void run() {
+			if(isChecked()) rightPanel.show();
+			else rightPanel.hide();
+		}
+	}
+
+	/**
+	 * {@link Action} to select an expression dataset
+	 */
+	private class SelectGexAction extends Action
+	{
+		MainWindow window;
+		public SelectGexAction(MainWindow w)
+		{
+			window = w;
+			setText("Select &Expression Data");
+			setToolTipText("Select Expression Data");
+		}
+		
+		public void run () {
+			try {
+				DBConnector dbcon = Gex.getDBConnector();
+				String dbName = dbcon.openChooseDbDialog(getShell());
+				
+				if(dbName == null) return;
+				
+				Gex.connect(dbName);
+			} catch(Exception e) {
+				String msg = "Failed to open Expression Dataset" + e.getMessage();
+				MessageDialog.openError (window.getShell(), "Error", 
+						"Error: " + msg + "\n\n" + 
+						"See the error log for details.");
+				Engine.log.error(msg, e);
+			}		
+		}
+	}
+	private SelectGexAction selectGexAction = new SelectGexAction(this);
+	
+	/**
+	 * Loads expression data for all {@link GeneProduct}s in the loaded pathway
+	 */
+	private void cacheExpressionData()
+	{
+		if(Engine.isDrawingOpen())
+		{
+			VPathway drawing = Engine.getVPathway();
+			//Check for neccesary connections
+			if(Gex.isConnected() && Gdb.isConnected())
+			{
+				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
+				try {
+					dialog.run(true, true, Gex.createCacheRunnable(drawing.getMappIds(), drawing.getSystemCodes()));
+					drawing.redraw();
+				} catch(Exception e) {
+					String msg = "while caching expression data: " + e.getMessage();					
+					MessageDialog.openError (getShell(), "Error", 
+							"Error: " + msg + "\n\n" + 
+							"See the error log for details.");
+					Engine.log.error(msg, e);
+				}
+			}
+		}
+	}
+	
+
+	/**
+	 * {@link Action} that opens an {@link GexImportWizard} that guides the user
+	 * through the steps required to create a new
+	 * expression dataset
+	 */
+	private class CreateGexAction extends Action
+	{
+		MainWindow window;
+		public CreateGexAction(MainWindow w)
+		{
+			window = w;
+			setText("&Create new Expression Dataset");
+			setToolTipText("Create a new Expression Dataset from a tab delimited text file");
+		}
+		
+		public void run() {
+			if(!Gdb.isConnected())
+			{
+				MessageDialog.openWarning(getShell(), "Warning", "No gene database selected, " +
+						"select gene database before creating a new expression dataset");
+				return;
+			}
+			WizardDialog dialog = new WizardDialog(getShell(), new GexImportWizard());
+			dialog.setBlockOnOpen(true);
+			dialog.open();
+		}
+	}
+	private CreateGexAction createGexAction = new CreateGexAction(this);
+	
+	/**
+	 *{@link Action} to start conversion of a GenMAPP gex to an expression database in
+	 * pgex format
+	 */
+	private class ConvertGexAction extends Action
+	{
+		MainWindow window;
+		public ConvertGexAction(MainWindow w)
+		{
+			window = w;
+			setText("&Gex to PathVisio");
+			setToolTipText("Convert from GenMAPP 2 Gex to PathVisio Expression Data");
+		}
+		
+		public void run () {
+			File gexFile = null;
+			File gmGexFile = null;
+			
+			// Initialize filedialog to open GenMAPP gex
+			FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+			fileDialog.setText("Select Expression Dataset to convert");
+			fileDialog.setFilterPath("C:\\GenMAPP 2 Data\\Expression Datasets");
+			fileDialog.setFilterExtensions(new String[] {"*.gex","*.*"});
+			fileDialog.setFilterNames(new String[] {"Expression Dataset (*.gex)","All files (*.*)"});
+			String file = fileDialog.open();
+			// Only proceed if user selected a file
+			if(file == null) return;
+			gmGexFile = new File(file);
+			
+			String dbName = null;
+			try {
+				DBConnector dbcon = Gex.getDBConnector();
+				dbName = dbcon.openNewDbDialog(getShell(), 
+						gmGexFile.getName().replace(".gex", ".properties"));
+			} catch(Exception e) {
+				String msg = "Failed to get database connector" + e.getMessage();
+				MessageDialog.openError (window.getShell(), "Error", 
+						"Error: " + msg + "\n\n" + 
+						"See the error log for details.");
+				Engine.log.error(msg, e);
+			}
+			
+			// Only proceed if user selected a file
+			if(dbName != null) {
+				Gex.setDbName(dbName);
+				Gex.setGmGexFile(gmGexFile);
+				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
+				try {
+					dialog.run(true, true, Gex.convertRunnable);
+				} catch(Exception e) {
+					String msg = "While converting GenMAPP GEX: " + e.getMessage();
+					MessageDialog.openError (window.getShell(), "Error", 
+							"Error: " + msg + "\n\n" + 
+							"See the error log for details.");
+					Engine.log.error(msg, e);
+				}
+				
+			}
+		}
+	}
+	private ConvertGexAction convertGexAction = new ConvertGexAction(this);
+	
+	/**
+	 * {@link Action} to start conversion of a GenMAPP Gene database to a gene database 
+	 * in hsqldb format
+	 */
+	private class ConvertGdbAction extends Action
+	{
+		MainWindow window;
+		public ConvertGdbAction(MainWindow w)
+		{
+			window = w;
+			setText("&Gdb to PathVisio");
+			setToolTipText("Convert from GenMAPP 2 Gene database to PathVisio Gene database");
+		}
+		
+		public void run () {
+			String dbName = null;
+			File gmGdbFile = null;
+			// Initialize filedialog to open GenMAPP gdb
+			FileDialog fileDialog = new FileDialog(getShell(), SWT.OPEN);
+			fileDialog.setText("Select Gene database to convert");
+			fileDialog.setFilterPath("C:\\GenMAPP 2 Data\\Gene Databases");
+			fileDialog.setFilterExtensions(new String[] {"*.gdb","*.*"});
+			fileDialog.setFilterNames(new String[] {"Gene database (*.gdb)","All files (*.*)"});
+			String file = fileDialog.open();
+			// Only proceed if user selected a file
+			if(file == null) return;
+			gmGdbFile = new File(file);
+
+			try {
+				DBConnector dbcon = Gex.getDBConnector();
+				dbName = dbcon.openNewDbDialog(getShell(), 
+						gmGdbFile.getName().replace(".gdb", ".properties"));
+			} catch(Exception e) {
+				MessageDialog.openError(getShell(), 
+						"Error", "Unable to create database connector, " +
+						"see error log for details");
+				Engine.log.error("Unable to create database connector", e);	
+			}
+			
+			// Only proceed if user selected a database name
+			if(dbName != null) {
+				Gdb.setConvertGdbName(dbName);
+				Gdb.setConvertGmGdbFile(gmGdbFile);
+				ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());
+				try {
+					dialog.run(true, true, Gdb.getConvertRunnable());
+				} catch(Exception e) {
+					String msg = "While converting GenMAPP gene database: "+ e.getMessage();
+					MessageDialog.openError (window.getShell(), "Error", 
+							"Error: " + msg + "\n\n" + 
+					"See the error log for details.");
+					Engine.log.error(msg, e);
+				}
+			}
+		}
+	}
+	private ConvertGdbAction convertGdbAction = new ConvertGdbAction(this);
+	
+	/**
+	 * {@link Action} to open the {@link ColorSetWindow}
+	 */
+	private class ColorSetManagerAction extends Action implements ExpressionDataListener
+	{
+		MainWindow window;
+		public ColorSetManagerAction (MainWindow w)
+		{
+			window = w;
+			setText("&Color Set manager");
+			setToolTipText("Create and edit color sets");
+			setImageDescriptor(ImageDescriptor.createFromURL(
+					Engine.getResourceURL("icons/colorset.gif")));
+			Gex.addListener(this);
+			setEnabled(false);
+		}
+		public void run () {
+			VisualizationDialog d = new VisualizationDialog(getShell());
+			d.setTabItemOnOpen(VisualizationDialog.TABITEM_COLORSETS);
+			d.open();
+		}
+		public void expressionDataEvent(ExpressionDataEvent e) {
+			switch(e.type) {
+			case ExpressionDataEvent.CONNECTION_OPENED:
+				setEnabled(true); break;
+			case ExpressionDataEvent.CONNECTION_CLOSED:
+				setEnabled(false); break;
+			}	
+		}
+	}
+	private ColorSetManagerAction colorSetManagerAction = new ColorSetManagerAction(this);
+	
+	private class VisualizationDialogAction extends Action
+	{
+		MainWindow window;
+		public VisualizationDialogAction (MainWindow w)
+		{
+			window = w;
+			setText("&Visualizations");
+			setToolTipText("Create and edit visualizations");
+			setImageDescriptor(ImageDescriptor.createFromURL(
+					Engine.getResourceURL("icons/visualizations.gif")));
+		}
+		public void run () {
+			VisualizationDialog d = new VisualizationDialog(getShell());
+			d.open();
+		}
+	}
+	private VisualizationDialogAction visualizationDialogAction = new VisualizationDialogAction(this);
+	
+	public static void openHelp() throws Exception {
+		BrowserLauncher bl = new BrowserLauncher(null);
+		bl.openURLinBrowser(Globals.HELP_URL);
+	}
+			
+
+	/**
+	 * {@link Action} to open the pathway statistics wizard
+	 */
+	private class RStatsAction extends Action
+	{
+		MainWindow window;
+		public RStatsAction (MainWindow w)
+		{
+			window = w;
+			setText("Perform statistical test@Ctrl+R");
+		}
+		
+		public void run() {
+			WizardDialog wd = new RWizard.RWizardDialog(getShell(), new RWizard());
+			wd.setBlockOnOpen(true);
+			if(RController.startR()) wd.open();
+		}
+	}
+	private RStatsAction rStatsAction = new RStatsAction(this);
+	
+	/**
+	 * {@link Action} to load results from pathway statistics
+	 */
+	private class RLoadStatsAction extends Action
+	{
+		MainWindow window;
+		public RLoadStatsAction (MainWindow w)
+		{
+			window = w;
+			setText("&Load results");
+		}
+		
+		public void run() {
+			FileDialog fd = new FileDialog(getShell(), SWT.OPEN);
+			fd.setFilterPath(SwtPreference.SWT_DIR_RDATA.getValue());
+			fd.setFilterNames(new String[] {"R data file"});
+			fd.setFilterExtensions(new String[] {"*.*"});
+			File file = new File(fd.open());
+			if(file.canRead()) {
+				try {
+					RDataIn.displayResults(RDataIn.loadResultSets(file), file.getName());
+				} catch(RException e) {
+					MessageDialog.openError(getShell(), "Unable to load results", e.getMessage());
+				}
+			}
+		}
+	}
+	private RLoadStatsAction rLoadStatsAction = new RLoadStatsAction(this);
+					
+	
+	/**
+	 * {@link IMenuCreator} that creates the drop down menus for 
+	 * adding new line-type and -shape elements
+	 */
+	private class NewItemMenuCreator implements IMenuCreator {
+		private Menu menu;
+		int element;
+		
+		/**
+		 * Constructor for this class
+		 * @param e	type of menu to create; one of {@link VPathway}.NEWLINEMENU
+		 * , {@link VPathway}.NEWLINESHAPEMENU
+		 */
+		public NewItemMenuCreator(int e) 
+		{
+			element = e;
+		}
+		
+		public Menu getMenu(Menu parent) {
+			return null;
+		}
+
+		public Menu getMenu(Control parent) {
+			if (menu != null)
+				menu.dispose();
+			
+			menu = new Menu(parent);
+			Vector<Action> actions = new Vector<Action>();
+			switch(element) {
+			case VPathway.NEWLINEMENU:
+				actions.add(new NewElementAction(VPathway.NEWLINE));
+				actions.add(new NewElementAction(VPathway.NEWLINEARROW));
+				actions.add(new NewElementAction(VPathway.NEWLINEDASHED));
+				actions.add(new NewElementAction(VPathway.NEWLINEDASHEDARROW));
+				break;
+			case VPathway.NEWLINESHAPEMENU:
+				actions.add(new NewElementAction(VPathway.NEWLIGANDROUND));
+				actions.add(new NewElementAction(VPathway.NEWRECEPTORROUND));
+				actions.add(new NewElementAction(VPathway.NEWLIGANDSQUARE));
+				actions.add(new NewElementAction(VPathway.NEWRECEPTORSQUARE));
+			}
+			
+			for (Action act : actions)
+			{			
+				addActionToMenu(menu, act);
+			}
+
+			return menu;
+		}
+		
+		protected void addActionToMenu(Menu parent, Action a)
+		{
+			 ActionContributionItem item= new ActionContributionItem(a);
+			 item.fill(parent, -1);
+		}
+		
+		public void dispose() 
+		{
+			if (menu != null)  {
+				menu.dispose();
+				menu = null;
+			}
+		}
+	}
+	
+	/**
+	 * Deselects all NewElementActions on the toolbar and sets 
+	 * VPathway.newGraphics to VPathway.NEWNONE
+	 */
+	public void deselectNewItemActions()
+	{
+		IContributionItem[] items = editActionsCI.getToolBarManager().getItems();
+		for(int i = 0; i < items.length; i++)
+		{
+			if(items[i] instanceof ActionContributionItem)
+			{
+				((ActionContributionItem)items[i]).getAction().setChecked(false);
+			}
+		}
+		Engine.getVPathway().setNewGraphics(VPathway.NEWNONE);
+	}
+	
+	// Elements of the coolbar
+	ToolBarContributionItem commonActionsCI;
+	ToolBarContributionItem editActionsCI;
+	ToolBarContributionItem visualizationCI;
+	ToolBarContributionItem viewActionsCI;
+	protected CoolBarManager createCoolBarManager(int style)
+	{
+		createCommonActionsCI();
+		createEditActionsCI();
+		createViewActionsCI();
+		createVisualizationCI();
+		
+		CoolBarManager coolBarManager = new CoolBarManager(style);
+		coolBarManager.setLockLayout(true);
+		
+		coolBarManager.add(commonActionsCI);
+		coolBarManager.add(viewActionsCI);
+		coolBarManager.add(visualizationCI);
+		return coolBarManager;
+	}
+	
+	/**
+	 * Creates element of the coolbar containing common actions as new, save etc.
+	 */
+	protected void createCommonActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(newAction);
+		toolBarManager.add(openAction);
+		toolBarManager.add(saveAction);
+		commonActionsCI = new ToolBarContributionItem(toolBarManager, "CommonActions");
+	}
+	
+	/**
+	 * Creates element of the coolbar only shown in edit mode (new element actions)
+	 */
+	protected void createEditActionsCI()
+	{
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);		
+		toolBarManager.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLABEL));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLINEMENU));
+		toolBarManager.add(new NewElementAction(VPathway.NEWRECTANGLE));
+		toolBarManager.add(new NewElementAction(VPathway.NEWOVAL));
+		toolBarManager.add(new NewElementAction(VPathway.NEWARC));
+		toolBarManager.add(new NewElementAction(VPathway.NEWBRACE));
+		toolBarManager.add(new NewElementAction(VPathway.NEWTBAR));
+		toolBarManager.add(new NewElementAction(VPathway.NEWLINESHAPEMENU));
+		
+		editActionsCI = new ToolBarContributionItem(toolBarManager, "EditModeActions");
+	}
+	
+	/**
+	 * Creates element of the coolbar containing controls related to viewing a pathway
+	 */
+	protected void createViewActionsCI()
+	{
+		final MainWindow window = this;
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		//Add zoomCombo
+		toolBarManager.add(new ControlContribution("ZoomCombo") {
+			protected Control createControl(Composite parent) {
+				final Combo zoomCombo = new Combo(parent, SWT.DROP_DOWN);
+				zoomCombo.setItems(new String[] { "200%", "100%", "75%", "50%", "Zoom to fit" });
+				zoomCombo.setText("100%");
+				zoomCombo.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent e) {
+						int pctZoom = 100;
+						String zoomText = zoomCombo.getText().replace("%", "");
+						try {
+							pctZoom = Integer.parseInt(zoomText);
+						} catch (Exception ex) { 
+							if(zoomText.equals("Zoom to fit"))
+									{ pctZoom = ZOOM_TO_FIT; } else { return; }
+						}
+						new CommonActions.ZoomAction(window, pctZoom).run();
+					}
+					public void widgetDefaultSelected(SelectionEvent e) { widgetSelected(e); }
+				});
+				return zoomCombo;
+			}
+		});
+		//Add swich to editmode
+		toolBarManager.add(switchEditModeAction);
+		
+		viewActionsCI =  new ToolBarContributionItem(toolBarManager, "SwitchActions");
+	}
+		
+	/**
+	 * Creates element of the coolbar containing controls related to visualizations
+	 */
+	protected void createVisualizationCI() {
+		ToolBarManager toolBarManager = new ToolBarManager(SWT.FLAT);
+		toolBarManager.add(VisualizationManager.getComboItem());
+		toolBarManager.add(visualizationDialogAction);
+		toolBarManager.add(colorSetManagerAction);
+		visualizationCI = new ToolBarContributionItem(toolBarManager, "ColorSetActions");
+	}
+	
+	/**
+	 * Shows or hides the editActionsCI
+	 * @param show	true/false for either show or hide
+	 */
+	private void showEditActionsCI(boolean show)
+	{
+		if(show) {
+			getCoolBarManager().insertAfter(viewActionsCI.getId(), editActionsCI);
+		}
+		else {
+			getCoolBarManager().remove(editActionsCI);
+		}
+//		showVisualizationCI(!show); //Visualizations can show up in edit mode...
+		getCoolBarManager().update(true);
+	}
+	
+	/**
+	 * Shows or hides the visualizationCI
+	 * @param show	true/false for either show or hide
+	 */
+	private void showVisualizationCI(boolean show) {
+		if(show) {
+			getCoolBarManager().insertAfter(viewActionsCI.getId(), visualizationCI);
+		} else {
+			getCoolBarManager().remove(visualizationCI);
+		}
+		getCoolBarManager().update(true);
+	}
+	
+	protected StatusLineManager createStatusLineManager() {
+		return super.createStatusLineManager();
+	}
+
+	/**
+	 *Builds and ads a menu to the Engine frame
+	 */
+	protected MenuManager createMenuManager()
+	{
+		menuManager = new MenuManager();
+		MenuManager fileMenu = new MenuManager ("&File");
+		fileMenu.add(newAction);
+		fileMenu.add(openAction);
+		fileMenu.add(saveAction);
+		fileMenu.add(saveAsAction);
+		//fileMenu.add(closeAction);
+		fileMenu.add(new Separator());
+		fileMenu.add(importAction);
+		fileMenu.add(exportAction);
+		fileMenu.add(new Separator());
+		fileMenu.add(exitAction);
+		MenuManager editMenu = new MenuManager ("&Edit");
+		editMenu.add(undoAction); // only in v2 while testing!
+		editMenu.add(new Separator());
+		editMenu.add(copyAction);
+		editMenu.add(pasteAction);
+		editMenu.add(new Separator());
+		editMenu.add(switchEditModeAction);
+		editMenu.add(preferencesAction);
+		MenuManager viewMenu = new MenuManager ("&View");
+		viewMenu.add(showRightPanelAction);
+		MenuManager zoomMenu = new MenuManager("&Zoom");
+		zoomMenu.add(new CommonActions.ZoomAction(this, 50));
+		zoomMenu.add(new CommonActions.ZoomAction(this, 75));
+		zoomMenu.add(new CommonActions.ZoomAction(this, 100));
+		zoomMenu.add(new CommonActions.ZoomAction(this, 125));
+		zoomMenu.add(new CommonActions.ZoomAction(this, 150));
+		zoomMenu.add(new CommonActions.ZoomAction(this, 200));
+		zoomMenu.add(new CommonActions.ZoomAction(this, ZOOM_TO_FIT));
+		viewMenu.add(zoomMenu);
+		MenuManager dataMenu = new MenuManager ("&Data");
+		dataMenu.add(selectGdbAction);
+		dataMenu.add(selectGexAction);
+		dataMenu.add(createGexAction);
+		dataMenu.add(colorSetManagerAction);
+		dataMenu.add(visualizationDialogAction);
+		if(Engine.USE_R) {
+			MenuManager statsMenu = new MenuManager("&Pathway statistics");
+			dataMenu.add(statsMenu);
+			statsMenu.add(rStatsAction);
+			statsMenu.add(rLoadStatsAction);
+		}
+		dataMenu.add(new CommonActions.BiopaxAction(this));
+		MenuManager convertMenu = new MenuManager("&Convert from GenMAPP 2");
+		convertMenu.add(convertGexAction);
+		convertMenu.add(convertGdbAction);
+		dataMenu.add(convertMenu);
+		
+		MenuManager helpMenu = new MenuManager ("&Help");
+		helpMenu.add(aboutAction);
+		helpMenu.add(helpAction);
+		menuManager.add(fileMenu);
+		menuManager.add(editMenu);
+		menuManager.add(viewMenu);
+		menuManager.add(dataMenu);
+		menuManager.add(helpMenu);
+		return menuManager;
+	}
+	
+	public MainWindow()
+	{
+		this(null);
+	}
+	
+	private MenuManager menuManager = null;
+	/**
+	 * can be accessed by plugins etc. 
+	 * to add menu items and even complete menus.
+	 * 
+	 * (plugin API)
+	 */
+	public MenuManager getMenuManager()
+	{
+		return menuManager;
+	}
+	/**
+	 *Constructor for the Engine class
+	 *Initializes new Engine and sets properties for frame
+	 */
+	public MainWindow(Shell shell)
+	{
+		super(shell);
+		
+		addMenuBar();
+		addStatusLine();
+		addCoolBar(SWT.FLAT | SWT.LEFT);
+		
+		Engine.addApplicationEventListener(this);
+		Gex.addListener(this);
+	}
+	
+	public boolean close() {
+		Engine.fireApplicationEvent(
+				new ApplicationEvent(this, ApplicationEvent.CLOSE_APPLICATION));
+		return super.close();
+	}
+	
+	public ScrolledComposite sc;
+	public BackpagePanel bpBrowser; //Browser for showing backpage information
+	public PropertyPanel propertyTable;	//Table showing properties of Graphics objects
+	SashForm sashForm; //SashForm containing the drawing area and sidebar
+	TabbedSidePanel rightPanel; //side panel containing backbage browser and property editor
+	PathwaySearchComposite pwSearchComposite; //Composite that handles pathway searches and displays results
+	LegendPanel legend; //Legend to display colorset information
+	protected Control createContents(Composite parent)
+	{		
+		Shell shell = parent.getShell();
+		shell.setSize(800, 600);
+		shell.setLocation(100, 100);
+		
+		shell.setText(Globals.APPLICATION_VERSION_NAME);
+		
+		GuiMain.loadImages(shell.getDisplay());
+		
+		shell.setImage(Engine.getImageRegistry().get("shell.icon"));
+		
+		Composite viewComposite = new Composite(parent, SWT.NULL);
+		viewComposite.setLayout(new FillLayout());
+		
+		sashForm = new SashForm(viewComposite, SWT.HORIZONTAL);
+		
+		sc = new ScrolledComposite (sashForm, SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		sc.setFocus();
+		
+		rightPanel = new TabbedSidePanel(sashForm, SWT.NULL);
+		
+		//rightPanel controls
+		bpBrowser = new BackpagePanel(rightPanel.getTabFolder(), SWT.NONE);
+		propertyTable = new PropertyPanel(
+				rightPanel.getTabFolder(), SWT.BORDER | SWT.SINGLE | SWT.FULL_SELECTION);
+		pwSearchComposite = new PathwaySearchComposite(rightPanel.getTabFolder(), SWT.NONE, this);
+		legend = new LegendPanel(rightPanel.getTabFolder(), SWT.V_SCROLL | SWT.H_SCROLL);
+		Composite visPanel = VisualizationManager.createSidePanel(rightPanel.getTabFolder());
+		
+		rightPanel.addTab(bpBrowser, "Backpage");
+		rightPanel.addTab(propertyTable, "Properties");
+		rightPanel.addTab(pwSearchComposite, "Pathway Search");
+		rightPanel.addTab(legend, "Legend");
+		rightPanel.addTab(visPanel, "Visualization");
+		
+		int sidePanelSize = GlobalPreference.getValueInt(SwtPreference.SWT_SIDEPANEL_SIZE);
+		sashForm.setWeights(new int[] {100 - sidePanelSize, sidePanelSize});
+		showRightPanelAction.setChecked(sidePanelSize > 0);
+		
+		rightPanel.getTabFolder().setSelection(0); //select backpage browser tab
+		rightPanel.hideTab("Legend"); //hide legend on startup
+		
+		setStatus("Using Gene Database: '" + SwtPreference.SWT_CURR_GDB + "'");
+				
+		return parent;
+		
+	};
+	
+	public TabbedSidePanel getSidePanel() { return rightPanel; }
+	
+	public LegendPanel getLegend() { return legend; }
+	
+	public void showLegend(boolean show) {	
+		if(show && Gex.isConnected()) {
+			if(rightPanel.isVisible("Legend")) return; //Legend already visible
+			rightPanel.unhideTab("Legend", 0);
+			rightPanel.selectTab("Legend");
+		}
+		
+		else rightPanel.hideTab("Legend");
+	}
+			
+	/**
+	 * Creates a new empty drawing canvas
+	 * @return the empty {@link VPathway}
+	 */
+	public VPathway createNewDrawing()
+	{		
+		VPathwaySWT pswt = new VPathwaySWT(sc, SWT.NO_BACKGROUND);
+		VPathway p = new VPathway(pswt);
+		pswt.setChild(p);
+		return p;
+	}
+	
+	public void applicationEvent(ApplicationEvent e) {
+		VPathway drawing = null;
+		switch(e.type) {
+		case ApplicationEvent.NEW_PATHWAY:
+			drawing = Engine.getVPathway();
+			sc.setContent((Canvas)drawing.getWrapper());
+			break;
+		case ApplicationEvent.OPEN_PATHWAY:
+			drawing = Engine.getVPathway();
+			sc.setContent((Canvas)drawing.getWrapper());
+			if(Gex.isConnected()) cacheExpressionData();
+			break;	
+		}
+	}
+
+	public void expressionDataEvent(ExpressionDataEvent e) {
+		switch(e.type) {
+		case ExpressionDataEvent.CONNECTION_CLOSED:
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					showLegend(false);
+				}
+			});
+			break;
+		case ExpressionDataEvent.CONNECTION_OPENED:
+			getShell().getDisplay().syncExec(new Runnable() {
+				public void run() {
+					cacheExpressionData();
+					showLegend(true);
+				}
+			});
+			break;
+		}
+	}
+} // end of class

Property changes on: branches/g2d-branch/src/v2/org/pathvisio/gui/swt/MainWindow.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: branches/g2d-branch/src/core/org/pathvisio/visualization/Visualization.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/visualization/Visualization.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/visualization/Visualization.java	(revision 930)
@@ -16,6 +16,9 @@
 //
 package org.pathvisio.visualization;
 
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.Shape;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -23,12 +26,8 @@
 import java.util.List;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.Rectangle;
-import org.eclipse.swt.graphics.Region;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.RowLayout;
 import org.eclipse.swt.widgets.Composite;
@@ -38,17 +37,16 @@
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.jdom.Element;
-
-import org.pathvisio.util.Utils;
-import org.pathvisio.visualization.VisualizationManager.VisualizationEvent;
-import org.pathvisio.visualization.VisualizationManager.VisualizationListener;
-import org.pathvisio.visualization.plugins.PluginManager;
-import org.pathvisio.visualization.plugins.VisualizationPlugin;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
 import org.pathvisio.gui.swt.Engine;
+import org.pathvisio.util.Utils;
 import org.pathvisio.view.Graphics;
+import org.pathvisio.visualization.VisualizationManager.VisualizationEvent;
+import org.pathvisio.visualization.VisualizationManager.VisualizationListener;
+import org.pathvisio.visualization.plugins.PluginManager;
+import org.pathvisio.visualization.plugins.VisualizationPlugin;
 
 /**
  * Represents a set of configured visualization plugins
@@ -179,14 +177,13 @@
 	
 	/**
 	 * Draw this visualization to the pathway drawing for the given {@link Graphics} object.
-	 * @see VisualizationPlugin#visualizeOnDrawing(Graphics, PaintEvent, GC)
+	 * @see VisualizationPlugin#visualizeOnDrawing(Graphics, Graphics2D)
 	 * @param g	The {@link Graphics} object the visualization applies to
-	 * @param e	{@link PaintEvent} containing information about the paint
-	 * @param gc Graphical context on which drawing operations can be performed
+	 * @param g2d Graphical context on which drawing operations can be performed
 	 */
-	public void visualizeDrawing(Graphics g, PaintEvent e, GC gc) {
+	public void visualizeDrawing(Graphics g, Graphics2D g2d) {
 		for(PluginSet pr : getPluginSetsDrawingOrder()) {
-			if(pr.isDrawing()) pr.getDrawingPlugin().visualizeOnDrawing(g, e, gc);
+			if(pr.isDrawing()) pr.getDrawingPlugin().visualizeOnDrawing(g, g2d);
 		}
 	}
 	
@@ -195,10 +192,10 @@
 	 * when {@link VisualizationPlugin#isUseProvidedArea()})
 	 * @param p the VisualizationPlugin to provide the area for
 	 * @param g the Graphics on which the area is created
-	 * @return An {@link Region} object that contains the area in which the
+	 * @return A {@link Shape} object that contains the area in which the
 	 * VisualizationPlugin can draw its visualization
 	 */
-	public Region provideDrawArea(VisualizationPlugin p, Graphics g) {
+	public Shape provideDrawArea(VisualizationPlugin p, Graphics g) {
 		if(!p.isUseProvidedArea()) 
 			throw new IllegalArgumentException("useProvidedArea set to false for this plug-in");
 		
@@ -210,9 +207,9 @@
 			nrRes += (pr.getDrawingPlugin().isActive() && pr.getDrawingPlugin().isUseProvidedArea()) ? 1 : 0;
 		}
 		
-		Region region = g.createVisualizationRegion();
+		Shape shape = g.createVisualizationRegion();
 		//Distribute space over plugins
-		Rectangle bounds = region.getBounds();
+		Rectangle bounds = shape.getBounds();
 		
 		//Adjust width so we can divide into equal rectangles
 		bounds.width += bounds.width % nrRes;
@@ -221,8 +218,8 @@
 		bounds.width = w;
 		
 		
-		region.intersect(bounds);
-		return region;
+		shape.intersects(bounds);
+		return shape;
 	}
 	
 	/**
Index: branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/VisualizationPlugin.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/VisualizationPlugin.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/VisualizationPlugin.java	(revision 930)
@@ -16,6 +16,7 @@
 //
 package org.pathvisio.visualization.plugins;
 
+import java.awt.Graphics2D;
 import java.util.Collection;
 
 import org.eclipse.jface.window.ApplicationWindow;
@@ -23,7 +24,6 @@
 import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
@@ -31,7 +31,6 @@
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Shell;
 import org.jdom.Element;
-
 import org.pathvisio.view.Graphics;
 import org.pathvisio.visualization.Visualization;
 import org.pathvisio.visualization.VisualizationManager;
@@ -85,6 +84,7 @@
 	 */
 	public abstract String getDescription();
 	
+	//TODO: Update javadoc
 	/**
 	 * Create a visualization on the pathway drawing for the given {@link Graphics} object.
 	 * This method will only be called when the plugin display options contains {@link VisualizationPlugin#DRAWING}.
@@ -94,7 +94,7 @@
 	 * @see <a href=http://www.eclipse.org/articles/Article-SWT-graphics/SWT_graphics.html>
 	 * Introduction in SWT graphics</a>
 	 */
-	public abstract void visualizeOnDrawing(Graphics g, PaintEvent e, GC gc);
+	public abstract void visualizeOnDrawing(Graphics g, Graphics2D g2d);
 	
 	/**
 	 * Create a visualization on the side panel for the given {@link Graphics} objects
Index: branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/PluginManager.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/PluginManager.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/visualization/plugins/PluginManager.java	(revision 930)
@@ -45,8 +45,8 @@
 import org.pathvisio.data.Gex;
 
 public abstract class PluginManager {
-	static final String PLUGIN_PKG = "visualization.plugins";
-	static final String PKG_DIR = PLUGIN_PKG.replace('.', '/');
+	//static final String PLUGIN_PKG = "org.pathvisio.visualization.plugins";
+	//static final String PKG_DIR = PLUGIN_PKG.replace('.', '/');
 	static final String FILE_ADD_PLUGINS = "visplugins.xml";
 	static final String XML_ELEMENT = "additional-plugins";
 	static final String XML_ELM_PLUGIN = "plugin";
@@ -118,7 +118,7 @@
 	public static void loadPlugins() throws Throwable {	
 		Engine.log.trace("> Loading visualization plugins");
 		Enumeration<URL> resources = 
-			Engine.class.getClassLoader().getResources(PLUGIN_PKG.replace('.', '/'));
+			Engine.class.getClassLoader().getResources(".");
         while (resources.hasMoreElements()) {
         	URL url = resources.nextElement();
         	Engine.log.trace("visualization.plugins package found in: " + url);
@@ -246,12 +246,24 @@
 		Engine.log.trace("\tLoading from directory " + url);
 		File directory = new File(URLDecoder.decode(url.getPath(), "UTF-8"));
 		if (directory.exists()) {
-            String[] files = directory.list(classFilter);
-            for (String file : files)
-            	addPlugin(Class.forName(PLUGIN_PKG + '.' + removeClassExt(file)));
+           processFile(directory, directory.toString());
         }
 	}
 	
+	static private void processFile(File f, String base) throws Throwable {
+		if(f.isDirectory()) {
+			File[] files = f.listFiles();
+            for (File file : files)
+            	processFile(file, base);
+		} else {
+			if(f.toString().endsWith(".class")) {
+				String cn = f.toString().substring(base.length() + 1);
+				cn = cn.replace('/', '.').replace('$', '.');
+				System.out.println(cn);
+				addPlugin(Class.forName(removeClassExt(cn)));
+			}
+		}
+	}
 	static void loadFromJar(URL url) throws Throwable {
 		Engine.log.trace("\tLoading from jar connection " + url);
 		JarFile f = null;
@@ -272,7 +284,7 @@
 			ZipEntry entry = (ZipEntry)e.nextElement();
 			Engine.log.trace("Checking " + entry);
 			String entryname = entry.getName();
-			if(entryname.startsWith(PKG_DIR) && entryname.endsWith(".class")) {
+			if(entryname.endsWith(".class")) {
 				try {
 					String cn = removeClassExt(entryname.replace('/', '.').replace('$', '.'));
 					Class pluginClass = Class.forName(cn);
Index: branches/g2d-branch/src/core/org/pathvisio/gui/swt/Engine.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/gui/swt/Engine.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/gui/swt/Engine.java	(revision 930)
@@ -16,6 +16,7 @@
 //
 package org.pathvisio.gui.swt;
 
+import java.awt.Color;
 import java.io.File;
 import java.net.URL;
 import java.util.ArrayList;
@@ -27,7 +28,6 @@
 import org.eclipse.jface.resource.ImageRegistry;
 import org.eclipse.jface.window.ApplicationWindow;
 import org.eclipse.swt.graphics.DeviceData;
-import org.eclipse.swt.graphics.RGB;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
 import org.pathvisio.Globals;
@@ -58,7 +58,7 @@
 	/**
 	 * the transparent color used in the icons for visualization of protein/mrna data
 	 */
-	public static final RGB TRANSPARENT_COLOR = new RGB(255, 0, 255);
+	public static final Color TRANSPARENT_COLOR = new Color(255, 0, 255);
 	
 	/**
 	 * {@link Pathway} object containing JDOM representation of the gpml pathway 
Index: branches/g2d-branch/src/core/org/pathvisio/gui/swt/GuiMain.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/gui/swt/GuiMain.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/gui/swt/GuiMain.java	(revision 930)
@@ -32,8 +32,8 @@
 import org.pathvisio.model.SvgFormat;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.preferences.Preference;
-import org.pathvisio.preferences.swt.SwtPreferences;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
+import org.pathvisio.util.SwtUtils;
 import org.pathvisio.visualization.VisualizationManager;
 import org.pathvisio.visualization.plugins.PluginManager;
 
@@ -166,11 +166,11 @@
 		
 		// Labels for color by expressiondata (mRNA and Protein)
 		ImageData img = new ImageData(cl.getResourceAsStream("images/mRNA.bmp"));
-		img.transparentPixel = img.palette.getPixel(Engine.TRANSPARENT_COLOR);
+		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.TRANSPARENT_COLOR));
 		imageRegistry.put("data.mRNA",
 				new Image(display, img));
 		img = new ImageData(cl.getResourceAsStream("images/protein.bmp"));
-		img.transparentPixel = img.palette.getPixel(Engine.TRANSPARENT_COLOR);
+		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.TRANSPARENT_COLOR));
 		imageRegistry.put("data.protein",
 				new Image(display, img));
 		imageRegistry.put("sidepanel.minimize",
Index: branches/g2d-branch/src/core/org/pathvisio/view/Graphics.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/view/Graphics.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/view/Graphics.java	(revision 930)
@@ -18,8 +18,8 @@
 
 import java.awt.Color;
 import java.awt.Font;
+import java.awt.Shape;
 
-import org.eclipse.swt.graphics.Region;
 import org.pathvisio.model.Pathway;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PathwayEvent;
@@ -72,11 +72,8 @@
 		if(listen) markDirty(); // mark everything dirty
 	}
 	
-	public Region createVisualizationRegion() {
-		Region region = new Region();
-		java.awt.Rectangle r = getVBounds();
-		region.add(r.x, r.y, r.width, r.height);
-		return region;
+	public Shape createVisualizationRegion() {
+		return getVBounds();
 	}
 	
 	
Index: branches/g2d-branch/src/core/org/pathvisio/view/VPathwayElement.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/view/VPathwayElement.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/view/VPathwayElement.java	(revision 930)
@@ -36,7 +36,7 @@
 	
 	private boolean isSelected;
 		
-	protected final void draw(Graphics2D g2d) {
+	public final void draw(Graphics2D g2d) {
 		//Create a copy to ensure that the state of this Graphics2D will be intact
 		//see: http://java.sun.com/docs/books/tutorial/uiswing/painting/concepts2.html
 		
Index: branches/g2d-branch/src/core/org/pathvisio/view/Label.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/view/Label.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/view/Label.java	(revision 930)
@@ -22,8 +22,10 @@
 import java.awt.Polygon;
 import java.awt.Rectangle;
 import java.awt.Shape;
+import java.awt.font.TextAttribute;
 import java.awt.font.TextLayout;
 import java.awt.geom.Rectangle2D;
+import java.text.AttributedString;
 
 import org.pathvisio.model.PathwayElement;
 
@@ -160,7 +162,15 @@
 		Rectangle area = getVOutline().getBounds();
 		
 		String label = gdata.getTextLabel();
-		TextLayout tl = new TextLayout(label, g.getFont(), g.getFontRenderContext());
+		AttributedString ats = new AttributedString(label);
+		if(gdata.isStrikethru()) {
+			ats.addAttribute(TextAttribute.STRIKETHROUGH, TextAttribute.STRIKETHROUGH_ON);
+		}
+		if(gdata.isUnderline()) {
+			ats.addAttribute(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
+		}
+		
+		TextLayout tl = new TextLayout(ats.getIterator(), g.getFontRenderContext());
 		Rectangle2D tb = tl.getBounds();
 		tl.draw(g, 	area.x + (int)(area.width / 2) - (int)(tb.getWidth() / 2), 
 					area.y + (int)(area.height / 2) + (int)(tb.getHeight() / 2));		
Index: branches/g2d-branch/src/core/org/pathvisio/util/SwtUtils.java
===================================================================
--- branches/g2d-branch/src/core/org/pathvisio/util/SwtUtils.java	(revision 929)
+++ branches/g2d-branch/src/core/org/pathvisio/util/SwtUtils.java	(revision 930)
@@ -80,6 +80,7 @@
 	public static java.awt.Color rgb2color(RGB rgb) {
 		return new java.awt.Color(rgb.red, rgb.green, rgb.blue);
 	}
+	
 	/**
 	 * Change the given {@link Color}; this method disposes the old color for you
 	 * @param cOld	the old {@link Color}
@@ -202,6 +203,20 @@
 		return pix / pixratio; 
 	}
 	
+	public static FontData awtFont2FontData(java.awt.Font f) {
+		int style = SWT.NORMAL;
+		if(f.isBold()) style |= SWT.BOLD;
+		if(f.isItalic()) style |= SWT.ITALIC;
+		return new FontData(f.getName(), f.getSize(), style);
+	}
+	
+	public static java.awt.Font fontData2awtFont(FontData fd) {
+		int style = java.awt.Font.PLAIN;
+		if((fd.style & SWT.BOLD) != 0) style |= java.awt.Font.BOLD;
+		if((fd.style & SWT.ITALIC) != 0) style |= java.awt.Font.ITALIC;
+		return new java.awt.Font(fd.getName(), fd.getHeight(), style);		
+	}
+	
 	static Font setFontSize(int size, Font f, GC gc, Display display) {
 		FontData fd = f.getFontData()[0];
 		fd.setHeight(size);
