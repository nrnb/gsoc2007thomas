Index: trunk/src/core/org/pathvisio/gui/swt/AboutDlg.java
===================================================================
--- trunk/src/core/org/pathvisio/gui/swt/AboutDlg.java	(revision 967)
+++ trunk/src/core/org/pathvisio/gui/swt/AboutDlg.java	(revision 968)
@@ -27,6 +27,7 @@
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.pathvisio.Globals;
+import org.pathvisio.Revision;
 
 /**
  * 
Index: trunk/src/core/org/pathvisio/view/swing/SwingKeyEvent.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/SwingKeyEvent.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/swing/SwingKeyEvent.java	(revision 968)
@@ -0,0 +1,45 @@
+package org.pathvisio.view.swing;
+
+import java.awt.event.KeyEvent;
+
+public class SwingKeyEvent extends org.pathvisio.view.KeyEvent {
+	KeyEvent awtEvent;
+	
+	public SwingKeyEvent(KeyEvent e) {
+		super(e.getSource(), convertKeyCode(e), convertType(e), e.getModifiers());
+		awtEvent = e;
+		System.out.println(getKeyCode());
+	}
+	
+	protected static int convertKeyCode(KeyEvent e) {
+		if(e.getID() == KeyEvent.KEY_TYPED) {
+			return e.getKeyChar();
+		} else {
+			switch(e.getKeyCode()) {
+				case KeyEvent.VK_CONTROL:
+					return org.pathvisio.view.KeyEvent.CTRL;
+				case KeyEvent.VK_ALT:
+					return org.pathvisio.view.KeyEvent.ALT;
+				case KeyEvent.VK_DELETE:
+					return org.pathvisio.view.KeyEvent.DEL;
+				case KeyEvent.VK_SHIFT:
+					return org.pathvisio.view.KeyEvent.SHIFT;
+				case KeyEvent.VK_INSERT:
+					return org.pathvisio.view.KeyEvent.INSERT;
+				default:
+					return e.getKeyCode();
+			}
+		}
+	}
+	
+	protected static int convertType(KeyEvent e) {
+		switch(e.getID()) {
+		case KeyEvent.KEY_PRESSED:
+			return org.pathvisio.view.KeyEvent.KEY_PRESSED;
+		case KeyEvent.KEY_RELEASED:
+			return org.pathvisio.view.KeyEvent.KEY_RELEASED;
+		default:
+			throw new IllegalArgumentException("KeyEvent type not supported");
+		}
+	}
+}
Index: trunk/src/core/org/pathvisio/view/swing/SwingMouseEvent.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/SwingMouseEvent.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/swing/SwingMouseEvent.java	(revision 968)
@@ -0,0 +1,36 @@
+package org.pathvisio.view.swing;
+
+import java.awt.Point;
+import java.awt.event.MouseEvent;
+
+public class SwingMouseEvent extends org.pathvisio.view.MouseEvent {
+	MouseEvent awtEvent;
+	
+	public SwingMouseEvent(MouseEvent e) {
+		super(e.getSource(), convertType(e), e.getButton(), 
+				e.getX(), e.getY(), e.getClickCount(), e.getModifiers());
+		awtEvent = e;
+	}
+
+	protected static int convertType(MouseEvent e) {
+		if(e.isPopupTrigger()) return MOUSE_HOVER;
+
+		switch(e.getID()) {
+		case MouseEvent.MOUSE_ENTERED:
+			return org.pathvisio.view.MouseEvent.MOUSE_ENTER;
+		case MouseEvent.MOUSE_EXITED:
+			return org.pathvisio.view.MouseEvent.MOUSE_EXIT;
+		case MouseEvent.MOUSE_MOVED:
+		case MouseEvent.MOUSE_DRAGGED:
+			return org.pathvisio.view.MouseEvent.MOUSE_MOVE;
+		case MouseEvent.MOUSE_PRESSED:
+			return org.pathvisio.view.MouseEvent.MOUSE_DOWN;
+		case MouseEvent.MOUSE_RELEASED:
+			return org.pathvisio.view.MouseEvent.MOUSE_UP;
+		case MouseEvent.MOUSE_CLICKED:
+			return org.pathvisio.view.MouseEvent.MOUSE_CLICK;
+		default:
+			throw new IllegalArgumentException("Mouse event type not supported");
+		}
+	}
+}
Index: trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 968)
@@ -0,0 +1,124 @@
+package org.pathvisio.view.swing;
+
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Rectangle;
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+import java.awt.event.MouseMotionListener;
+
+import javax.swing.JComponent;
+import javax.swing.JScrollPane;
+
+import org.pathvisio.view.VPathway;
+import org.pathvisio.view.VPathwayWrapper;
+
+public class VPathwaySwing extends JComponent implements VPathwayWrapper, MouseMotionListener, MouseListener, KeyListener {
+	VPathway child;
+	JScrollPane container;
+	
+	public VPathwaySwing(JScrollPane parent) {
+		super();
+		if(parent == null) throw new IllegalArgumentException("parent is null");
+		this.container = parent;
+		addMouseListener(this);
+		addMouseMotionListener(this);
+		addKeyListener(this);
+	}
+	
+	public void setChild(VPathway c) {
+		child = c;
+	}
+	
+	public Rectangle getVBounds() {
+		return getBounds();
+	}
+
+	public Dimension getVSize() {
+		System.out.println(getPreferredSize());
+		return getPreferredSize();
+	}
+
+	public Dimension getViewportSize() {
+		if(container instanceof JScrollPane) {
+			return ((JScrollPane)container).getViewport().getExtentSize();
+		}
+		return getSize();
+	}
+	
+	public void redraw() {
+		repaint();
+	}
+
+	protected void paintComponent(Graphics g) {
+		child.draw((Graphics2D)g);
+	}
+	
+	public void redraw(Rectangle r) {
+		repaint(r);
+	}
+
+	public void setVSize(Dimension size) {
+		setSize(size);
+		setMaximumSize(size);
+		setMinimumSize(size);
+		setPreferredSize(size);
+	}
+
+	public void setVSize(int w, int h) {
+		setVSize(new Dimension(w, h));
+	}
+
+	public void mouseClicked(MouseEvent arg0) {
+		//TODO: find out how to handle this one
+	}
+
+	public void mouseEntered(MouseEvent e) {
+		child.mouseEnter(new SwingMouseEvent(e));		
+	}
+
+	public void mouseExited(MouseEvent e) {
+		child.mouseExit(new SwingMouseEvent(e));
+		
+	}
+
+	public void mousePressed(MouseEvent e) {
+		child.mouseDown(new SwingMouseEvent(e));
+	}
+
+	public void mouseReleased(MouseEvent e) {
+		child.mouseUp(new SwingMouseEvent(e));
+	}
+
+	public void keyPressed(KeyEvent e) {
+		child.keyPressed(new SwingKeyEvent(e));
+		System.out.println("Key pressed........!");
+	}
+
+	public void keyReleased(KeyEvent e) {
+		child.keyReleased(new SwingKeyEvent(e));
+		System.out.println("Key released......!");
+	}
+
+	public void keyTyped(KeyEvent e) {
+		// TODO: find out how to handle this one
+		System.out.println("Key types.....!");
+	}
+
+	public void mouseDragged(MouseEvent e) {
+		child.mouseMove(new SwingMouseEvent(e));
+	}
+
+	public void mouseMoved(MouseEvent e) {
+		child.mouseMove(new SwingMouseEvent(e));
+	}
+
+	public VPathway createVPathway() {
+		setChild(new VPathway(this));
+		container.setViewportView(this);
+		return child;
+	}
+}
Index: trunk/src/core/org/pathvisio/Revision.java
===================================================================
--- trunk/src/core/org/pathvisio/Revision.java	(revision 967)
+++ trunk/src/core/org/pathvisio/Revision.java	(revision 968)
@@ -3,5 +3,5 @@
 
 public class Revision 
 {
-	public static final String REVISION = "955:958M";
+	public static final String REVISION = "964:966M";
 };
Index: trunk/build.xml
===================================================================
--- trunk/build.xml	(revision 967)
+++ trunk/build.xml	(revision 968)
@@ -64,7 +64,7 @@
 	
 	<target name="compile-v1" depends="prepare,resources-jar" description="Compile all sources">
 		<javac srcdir="." debug="true"
-			includes="src/v1/**,src/core/**,swing/**"
+			includes="src/v1/**,src/core/**,src/swt/**"
 			destdir="${build.v1.dir}">
 			<classpath refid="project.v1.class.path"/>
 		</javac>
@@ -72,7 +72,7 @@
 
 	<target name="compile-v2" depends="prepare,resources-jar" description="Compile all sources">
 		<javac srcdir="." 
-               includes="src/v2/**,src/core/**,swing/**"
+               includes="src/v2/**,src/core/**,src/swt/**"
 			   excludes="core/org/pathvisio/view/VPathwayOld.java"
 			   
                destdir="${build.v2.dir}">
