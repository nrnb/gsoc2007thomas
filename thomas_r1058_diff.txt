Index: trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java
===================================================================
--- trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java	(revision 1057)
+++ trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionImagePlugin.java	(revision 1058)
@@ -72,6 +72,7 @@
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.ColorConverter;
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.view.Graphics;
@@ -84,7 +85,7 @@
 		"This plugin displays one or more images on Gene Product objects and \n" +
 		"colors the image(s) accoring to the expression value for the Gene Product.";
 		
-	static final Color DEFAULT_TRANSPARENT = Engine.TRANSPARENT_COLOR;
+	static final Color DEFAULT_TRANSPARENT = Engine.getCurrent().TRANSPARENT_COLOR;
 		
 	List<URL> imageURLs;
 	
@@ -101,8 +102,8 @@
 
 	private List<URL> defaultURLs() {
 		return new ArrayList<URL>(Arrays.asList(new URL[] {
-				Engine.getResourceURL("images/protein_hi.bmp"),
-				Engine.getResourceURL("images/mRNA_hi.bmp") }));
+				Engine.getCurrent().getResourceURL("images/protein_hi.bmp"),
+				Engine.getCurrent().getResourceURL("images/mRNA_hi.bmp") }));
 	}
 	
 	List<URL> getImageURLs() { 
@@ -163,7 +164,7 @@
 				URL url = new URL(((Element)o).getText());
 				addImageURL(url);
 			} catch(Exception e) {
-				Engine.log.error("couldn't load image URL for plugin", e);
+				Logger.log.error("couldn't load image URL for plugin", e);
 			}
 		}
 	}
@@ -383,7 +384,7 @@
 				imageList.refresh();
 			} catch(Exception e) {
 				MessageDialog.openError(getShell(), "Unable to open image file", e.toString());
-				Engine.log.error("Unable to load image", e);
+				Logger.log.error("Unable to load image", e);
 			}
 		}
 		
@@ -466,7 +467,7 @@
 				try {
 					cacheImage = ImageIO.read(imageURL);
 				} catch(IOException e) {
-					Engine.log.error("Unable to load image", e);
+					Logger.log.error("Unable to load image", e);
 					return null;
 				}
 			}
@@ -541,7 +542,7 @@
 				URLConnection con = url.openConnection();
 				return con.getInputStream();
 			} catch(IOException e) {
-				Engine.log.error("Unable to open connection to image", e);
+				Logger.log.error("Unable to open connection to image", e);
 			}
 			return null;
 		}
@@ -563,7 +564,7 @@
 				setURL(new URL(xml.getAttributeValue(XML_ATTR_IMAGE)));
 				setReplaceColor(ColorConverter.parseColorElement(xml.getChild(XML_ATTR_REPLACE)));
 			} catch(Exception e) {
-				Engine.log.error("Unable to load plugin", e);
+				Logger.log.error("Unable to load plugin", e);
 			}
 		}
 		
Index: trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java
===================================================================
--- trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java	(revision 1057)
+++ trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionAsTextPlugin.java	(revision 1058)
@@ -57,6 +57,7 @@
 import org.pathvisio.data.CachedData.Data;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.view.GeneProduct;
 import org.pathvisio.view.Graphics;
@@ -233,7 +234,7 @@
 	Font getFont(boolean adjustZoom) {
 		Font f = font == null ? DEFAULT_FONT : font;
 		if(adjustZoom) {
-			int size = (int)Math.ceil(Engine.getActiveVPathway().vFromM(f.getSize()) * 15);
+			int size = (int)Math.ceil(Engine.getCurrent().getActiveVPathway().vFromM(f.getSize()) * 15);
 			f = new Font(f.getName(), size, f.getStyle());
 		}
 		return f;
@@ -419,7 +420,7 @@
 			try {
 				int id = Integer.parseInt(((Element)o).getText());
 				useSamples.add(Gex.getSample(id));
-			} catch(Exception e) { Engine.log.error("Unable to add sample", e); }
+			} catch(Exception e) { Logger.log.error("Unable to add sample", e); }
 		}
 		roundTo = Integer.parseInt(xml.getAttributeValue(XML_ATTR_ROUND));
 		setFontData(new FontData(xml.getAttributeValue(XML_ATTR_FONTDATA)));
Index: trunk/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java
===================================================================
--- trunk/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java	(revision 1057)
+++ trunk/src/plugins/org/pathvisio/visualization/plugins/PluginWithColoredSamples.java	(revision 1058)
@@ -62,11 +62,11 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.jdom.Element;
-import org.pathvisio.Engine;
 import org.pathvisio.data.CachedData;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.util.swt.TableColumnResizer;
 import org.pathvisio.view.GeneProduct;
@@ -341,7 +341,7 @@
 			try {
 				useSamples.add(createConfiguredSample((Element)o));
 			} catch(Exception e) {
-				Engine.log.error("Unable to save plugin settings", e);
+				Logger.log.error("Unable to save plugin settings", e);
 			}
 		}	
 	}
Index: trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java
===================================================================
--- trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java	(revision 1057)
+++ trunk/src/plugins/org/pathvisio/visualization/plugins/ExpressionColorPlugin.java	(revision 1058)
@@ -41,12 +41,12 @@
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.jdom.Element;
-import org.pathvisio.Engine;
 import org.pathvisio.data.CachedData;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.CachedData.Data;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.ColorConverter;
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.view.Graphics;
@@ -153,7 +153,7 @@
 			lineColor = ColorConverter.parseColorElement(xml.getChild(XML_ELM_LINECOLOR));
 			drawLine = Boolean.parseBoolean(xml.getAttributeValue(XML_ATTR_DRAWLINE));
 		} catch(Exception e) {
-			Engine.log.error("Unable to parse settings for plugin " + NAME, e);
+			Logger.log.error("Unable to parse settings for plugin " + NAME, e);
 		}
 	}
 	
Index: trunk/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java
===================================================================
--- trunk/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java	(revision 1057)
+++ trunk/src/plugins/org/pathvisio/visualization/plugins/LabelPlugin.java	(revision 1058)
@@ -40,6 +40,7 @@
 import org.eclipse.swt.widgets.Label;
 import org.jdom.Element;
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.ColorConverter;
 import org.pathvisio.util.Utils;
 import org.pathvisio.util.swt.SwtUtils;
@@ -197,7 +198,7 @@
 	Font getFont(boolean adjustZoom) {
 		Font f = font == null ? DEFAULT_FONT : font;
 		if(adjustZoom) {
-			int fs = (int)Math.ceil(Engine.getActiveVPathway().vFromM(f.getSize()) * 15);
+			int fs = (int)Math.ceil(Engine.getCurrent().getActiveVPathway().vFromM(f.getSize()) * 15);
 			f = new Font(f.getName(), f.getStyle(), f.getSize());
 		}
 		return f;
@@ -356,7 +357,7 @@
 			if(fcElm != null) fontColor = ColorConverter.parseColorElement(fcElm);
 			if(alnStr != null) align = Integer.parseInt(alnStr);
 		} catch(NumberFormatException e) {
-			Engine.log.error("Unable to load configuration for " + NAME, e);
+			Logger.log.error("Unable to load configuration for " + NAME, e);
 		}
 	}
 }
Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 1057)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/SwingUserInterfaceHandler.java	(revision 1058)
@@ -1,13 +1,12 @@
 package org.pathvisio.gui.wikipathways;
 
 import java.awt.Component;
-import java.util.concurrent.Callable;
 
 import javax.swing.JOptionPane;
 import javax.swing.SwingUtilities;
 
 import org.jdesktop.swingworker.SwingWorker;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swing.progress.ProgressDialog;
 import org.pathvisio.gui.swing.progress.SwingProgressKeeper;
 import org.pathvisio.util.RunnableWithProgress;
@@ -34,7 +33,7 @@
 				SwingUtilities.invokeAndWait(r);
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to invoke runnable", e);
+			Logger.log.error("Unable to invoke runnable", e);
 		}
 	}
 	public int askCancellableQuestion(final String title, final String message) {
Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1057)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1058)
@@ -16,7 +16,6 @@
 //
 package org.pathvisio.gui.wikipathways;
 
-import java.awt.Color;
 import java.awt.event.ActionEvent;
 import java.net.CookieHandler;
 import java.net.URL;
@@ -34,13 +33,13 @@
 
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swing.GuiInit;
 import org.pathvisio.gui.swing.MainPanel;
 import org.pathvisio.gui.swing.SwingEngine;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.util.ProgressKeeper;
 import org.pathvisio.util.RunnableWithProgress;
-import org.pathvisio.view.swing.VPathwaySwing;
 import org.pathvisio.wikipathways.Parameter;
 import org.pathvisio.wikipathways.UserInterfaceHandler;
 import org.pathvisio.wikipathways.WikiPathways;
@@ -55,24 +54,14 @@
 	public static final String PAR_PATHWAY_URL = "pathway.url";
 	public void init() {
 		System.out.println("INIT CALLED....");
-		Engine.log.trace("INIT CALLED....");
-		
-//		//Restore defaults for some static fields which may have a value
-//		//from previous applet sessions
-//		//Is there an automatic way to set all static fields to their default value?
-//		Parameter.restoreDefaults();
-		
+		Logger.log.trace("INIT CALLED....");
+				
 		uiHandler = new SwingUserInterfaceHandler(JOptionPane.getFrameForComponent(this));
 		
 		try {
 			SwingUtilities.invokeAndWait(new Runnable() {
 				public void run() {
-					//Since SwingEngine is static, the mainpanel may
-					//already have been initialized by previous applet instances
-					//Therefore, force it to create a new one.
-					//Storing the mainpanel in a static field may lead to problems 
-					//when we want multiple editors within a single JVM instance
-					mainPanel = SwingEngine.getApplicationPanel(true);
+					mainPanel = SwingEngine.getCurrent().getApplicationPanel();
 					
 					Action saveAction = new ExitAction(true);
 					Action discardAction = new ExitAction(false);
@@ -90,12 +79,12 @@
 			e.printStackTrace();
 		}
 		System.out.println("INIT ENDED....");
-		Engine.log.trace("INIT ENDED....");
+		Logger.log.trace("INIT ENDED....");
 	}
 		
 	public void start() {
 		System.out.println("START CALLED....");
-		Engine.log.trace("START CALLED....");
+		Logger.log.trace("START CALLED....");
 		
 		final RunnableWithProgress r = new RunnableWithProgress() {
 			public Object excecuteCode() {				
@@ -106,9 +95,9 @@
 				loadCookies();
 									
 				try { 
-					wiki.init(SwingEngine.createWrapper());
+					wiki.init(SwingEngine.getCurrent().createWrapper());
 				} catch(Exception e) {
-					Engine.log.error("Unable to load pathway", e);
+					Logger.log.error("Unable to load pathway", e);
 					JOptionPane.showMessageDialog(
 							AppletMain.this, e.getClass() + ": " + e.getMessage(), "Error while initializing editor", JOptionPane.ERROR_MESSAGE);
 				};
@@ -128,35 +117,35 @@
 				}
 			});
 		} catch (Exception e) {
-			Engine.log.error("Unable to start applet", e);
+			Logger.log.error("Unable to start applet", e);
 		}
 				
 		System.out.println("START ENDED....");
-		Engine.log.trace("START ENDED....");
+		Logger.log.trace("START ENDED....");
 	}
 	
 	public void stop() {
 		System.out.println("STOP CALLED....");
-		Engine.log.trace("STOP CALLED....");
+		Logger.log.trace("STOP CALLED....");
 						
 		System.out.println("STOP ENDED....");
-		Engine.log.trace("STOP ENDED....");
+		Logger.log.trace("STOP ENDED....");
 	}
 
 	public void destroy() {
 		System.out.println("DESTROY CALLED....");
-		Engine.log.trace("DESTROY CALLED....");
+		Logger.log.trace("DESTROY CALLED....");
 		ApplicationEvent e = new ApplicationEvent(this, ApplicationEvent.APPLICATION_CLOSE);
-		Engine.fireApplicationEvent(e);
+		Engine.getCurrent().fireApplicationEvent(e);
 		if(e.doit) {
 			super.destroy();
 		}
 		System.out.println("DESTROY ENDED....");
-		Engine.log.trace("DESTROY ENDED....");
+		Logger.log.trace("DESTROY ENDED....");
 	}
 	
 	void loadCookies() {
-		Engine.log.trace("Loading cookies");
+		Logger.log.trace("Loading cookies");
 
 		//wikipathwaysUserName=Thomas; wikipathwaysUserID=2; wikipathwaysToken=d8fa40c604ac290a5e2f65830279f518; wikipathways_session=6e153458660cf2cc888d37ec0e6f164b
 		
@@ -166,7 +155,7 @@
 				URL url = getDocumentBase();
 				Map<String, List<String>> headers = handler.get(url.toURI(), new HashMap<String, List<String>>());
 				if(headers == null) {
-					Engine.log.error("Unable to load cookies: headers null");
+					Logger.log.error("Unable to load cookies: headers null");
 					return;
 				}
 				List<String> values = headers.get("Cookie");
@@ -175,14 +164,14 @@
 					for(String cv : cvalues) {
 						String[] keyvalue = cv.split("=");
 						if(keyvalue.length == 2) {
-							Engine.log.trace("COOKIE: " + keyvalue[0] + " | " + keyvalue[1]);
+							Logger.log.trace("COOKIE: " + keyvalue[0] + " | " + keyvalue[1]);
 							wiki.addCookie(keyvalue[0].trim(), keyvalue[1].trim());
 						}
 					}
 				}
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to load cookies", e);
+			Logger.log.error("Unable to load cookies", e);
 		}
 //			JSObject myBrowser = (JSObject) JSObject.getWindow(this);
 //	        JSObject myDocument =  (JSObject) myBrowser.getMember("document");
@@ -205,7 +194,7 @@
 	class ExitAction extends AbstractAction {
 		boolean doSave;
 		public ExitAction(boolean save) {
-			super("Finish", new ImageIcon(save ? Engine.getResourceURL("icons/apply.gif") : Engine.getResourceURL("icons/cancel.gif")));
+			super("Finish", new ImageIcon(save ? Engine.getCurrent().getResourceURL("icons/apply.gif") : Engine.getCurrent().getResourceURL("icons/cancel.gif")));
 			doSave = save;
 			String descr = doSave ? "Save pathway and close editor" : "Discard pathway and close editor";
 			putValue(Action.SHORT_DESCRIPTION, descr);
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1057)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1058)
@@ -16,7 +16,6 @@
 //
 package org.pathvisio.wikipathways;
 
-import java.beans.DesignMode;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
@@ -40,11 +39,11 @@
 import org.apache.xmlrpc.util.HttpUtil;
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
-import org.pathvisio.Globals;
 import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.data.DBConnector;
 import org.pathvisio.data.DBConnectorDerbyServer;
 import org.pathvisio.data.Gdb;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.util.ProgressKeeper;
 import org.pathvisio.util.RunnableWithProgress;
@@ -65,7 +64,7 @@
 	public WikiPathways(UserInterfaceHandler uiHandler) {
 		this.uiHandler = uiHandler;
 		cookie = new HashMap<String, String>();
-		Engine.addApplicationEventListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
 	}
 
 	public void init(VPathwayWrapper wrapper) throws Exception {
@@ -78,17 +77,19 @@
 		}
 
 		if(isNew()) { //Create new pathway
-			Engine.newPathway(wrapper);
+			Logger.log.trace("WIKIPATHWAYS INIT: new pathway");
+			Engine.getCurrent().newPathway(wrapper);
 		} else { //Download and open the pathway
-			Engine.openPathway(new URL(getPwURL()), wrapper);
+			Logger.log.trace("WIKIPATHWAYS INIT: open pathway");
+			Engine.getCurrent().openPathway(new URL(getPwURL()), wrapper);
 		}
 
 		//TODO: notify user about this and hide edit actions
-		Engine.getActiveVPathway().setEditMode(!isReadOnly());
+		Engine.getCurrent().getActiveVPathway().setEditMode(!isReadOnly());
 		
 		//Connect to the gene database
 		DBConnector connector = new DBConnectorDerbyServer("wikipathways.org", 1527);
-		Engine.setDBConnector(connector, DBConnector.TYPE_GDB);
+		Engine.getCurrent().setDBConnector(connector, DBConnector.TYPE_GDB);
 		
 		Gdb.connect(getPwSpecies());
 	}
@@ -137,14 +138,14 @@
 	}
 		
 	public boolean saveUI() {
-		VPathway vPathway = Engine.getActiveVPathway();
+		VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 		if(isReadOnly()) {
 			uiHandler.showError("Unable to save the pathway", "Unable to save the pathway, you are not logged in");
 			return false;
 		}
 		if(vPathway != null && vPathway.getGmmlData().hasChanged()) {
 			final String description = uiHandler.askInput("Specify description", "Give a description of your changes");
-			Engine.log.trace("Save description: " + description);
+			Logger.log.trace("Save description: " + description);
 			if(description != null) {
 				RunnableWithProgress<Boolean> r = new RunnableWithProgress<Boolean>() {
 					public Boolean excecuteCode() {
@@ -152,7 +153,7 @@
 							saveToWiki(description);
 							return true;
 						} catch (Exception e) {
-							Engine.log.error("Unable to save pathway", e);
+							Logger.log.error("Unable to save pathway", e);
 							uiHandler.showError("Unable to save pathway", e.getClass() + ": " + e.getMessage());
 						}
 						return false;
@@ -167,15 +168,15 @@
 	
 	protected void saveToWiki(String description) throws XmlRpcException, IOException, ConverterException {		
 		//TODO: check if changed
-		if(ovrChanged || Engine.getActivePathway().hasChanged()) {
+		if(ovrChanged || Engine.getCurrent().getActivePathway().hasChanged()) {
 			ovrChanged = true; //In case we get an error, save changes next time
 			File gpmlFile = getLocalFile();
 			//Save current pathway to local file
-			Engine.savePathway(gpmlFile);
+			Engine.getCurrent().savePathway(gpmlFile);
 			saveToWiki(description, gpmlFile);
 			ovrChanged = false; //Save successful, don't save next time
 		} else {
-			Engine.log.trace("No changes made, ignoring save");
+			Logger.log.trace("No changes made, ignoring save");
 			//Do nothing, no changes made
 		}
 	}
@@ -189,7 +190,7 @@
 	
 		XmlRpcCookieHttpTransport ct = (XmlRpcCookieHttpTransport)ctf.getTransport();
 		for(String key : cookie.keySet()) {
-			Engine.log.trace("Setting cookie: " + key + "=" + cookie.get(key));
+			Logger.log.trace("Setting cookie: " + key + "=" + cookie.get(key));
 			ct.addCookie(key, cookie.get(key));
 		}
 		
@@ -210,7 +211,7 @@
 		/*
 		switch(e.type) {
 		case ApplicationEvent.APPLICATION_CLOSE:
-			VPathway vPathway = Engine.getActiveVPathway();
+			VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 			if(vPathway == null || vPathway.getGmmlData().hasChanged()) {
 				int status  = uiHandler.askCancellableQuestion("", 
 						"Do you want to save the changes to " + getPwName() + " on " + SITE_NAME + "?");
Index: trunk/src/v1/org/pathvisio/gui/swt/MainWindow.java
===================================================================
--- trunk/src/v1/org/pathvisio/gui/swt/MainWindow.java	(revision 1057)
+++ trunk/src/v1/org/pathvisio/gui/swt/MainWindow.java	(revision 1058)
@@ -16,24 +16,13 @@
 //
 package org.pathvisio.gui.swt;
 
-import java.util.prefs.Preferences;
-
 import org.eclipse.jface.action.CoolBarManager;
 import org.eclipse.jface.action.MenuManager;
 import org.eclipse.jface.action.Separator;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.custom.ScrolledComposite;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Shell;
 import org.pathvisio.Engine;
 import org.pathvisio.data.Gex;
-import org.pathvisio.preferences.GlobalPreference;
-import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
-import org.pathvisio.search.PathwaySearchComposite;
-import org.pathvisio.visualization.LegendPanel;
 
 /**
  * This class is the main class in the GPML project. 
@@ -59,7 +48,7 @@
 		addStatusLine();
 		addCoolBar(SWT.FLAT | SWT.LEFT);
 		
-		Engine.addApplicationEventListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
 		Gex.addListener(this);
 	}
 	
Index: trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java	(revision 1058)
@@ -2,16 +2,19 @@
 
 import javax.swing.JEditorPane;
 
+import org.pathvisio.ApplicationEvent;
+import org.pathvisio.Engine;
+import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.data.Gdb;
 import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayElement;
 import org.pathvisio.view.SelectionBox.SelectionEvent;
 import org.pathvisio.view.SelectionBox.SelectionListener;
 
-public class BackpagePane extends JEditorPane implements SelectionListener {
+public class BackpagePane extends JEditorPane implements SelectionListener, ApplicationEventListener {
 	PathwayElement input;
 	
 	public BackpagePane() {
@@ -19,7 +22,10 @@
 		setEditable(false);
 		setContentType("text/html");
 		
-		SelectionBox.addListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
+		VPathway vp = Engine.getCurrent().getActiveVPathway();
+		if(vp != null) vp.addSelectionListener(this);
+		
 	}
 
 	public void setInput(final PathwayElement e) {
@@ -40,7 +46,7 @@
 		}
 	}
 
-	public void drawingEvent(SelectionEvent e) {
+	public void selectionEvent(SelectionEvent e) {
 		switch(e.type) {
 		case SelectionEvent.OBJECT_ADDED:
 			//Just take the first DataNode in the selection
@@ -58,4 +64,10 @@
 			break;
 		}
 	}
+
+	public void applicationEvent(ApplicationEvent e) {
+		if(e.type == ApplicationEvent.VPATHWAY_CREATED) {
+			((VPathway)e.source).addSelectionListener(this);
+		}
+	}
 }
Index: trunk/src/swing/org/pathvisio/gui/swing/dialogs/PathwayElementDialog.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/dialogs/PathwayElementDialog.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/dialogs/PathwayElementDialog.java	(revision 1058)
@@ -106,7 +106,7 @@
 	protected abstract void createDialogContents(Container parent);
 	
 	protected void okPressed() {
-		VPathway p = Engine.getActiveVPathway();
+		VPathway p = Engine.getCurrent().getActiveVPathway();
 		if(p != null) p.redraw();
 		setVisible(false);
 	}
Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1058)
@@ -30,7 +30,6 @@
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
-import javax.swing.JEditorPane;
 import javax.swing.JLabel;
 import javax.swing.JMenu;
 import javax.swing.JMenuBar;
@@ -61,15 +60,11 @@
 import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.AlignType;
-import org.pathvisio.view.GeneProduct;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.StackType;
 import org.pathvisio.view.VPathway;
-import org.pathvisio.view.VPathwayElement;
 import org.pathvisio.view.VPathwayEvent;
 import org.pathvisio.view.VPathwayListener;
-import org.pathvisio.view.SelectionBox.SelectionEvent;
-import org.pathvisio.view.SelectionBox.SelectionListener;
 
 import com.mammothsoftware.frwk.ddb.DropDownButton;
 
@@ -93,7 +88,7 @@
 	public MainPanel() {
 		setLayout(new BorderLayout());
 
-		Engine.addApplicationEventListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
 		
 		menuBar = new JMenuBar();
 		addMenuActions(menuBar);
@@ -229,7 +224,7 @@
 		addToToolbar(new NewElementAction(VPathway.NEWGENEPRODUCT), TB_GROUP_HIDE_ON_EDIT);
 		addToToolbar(new NewElementAction(VPathway.NEWLABEL), TB_GROUP_HIDE_ON_EDIT);
 		// New line menu
-		DropDownButton lineButton = new DropDownButton(new ImageIcon(Engine
+		DropDownButton lineButton = new DropDownButton(new ImageIcon(Engine.getCurrent()
 				.getResourceURL("icons/newlinemenu.gif")));
 		lineButton.addComponent(new JMenuItem(new NewElementAction(
 				VPathway.NEWLINE)));
@@ -250,7 +245,7 @@
 
 		// New lineshape menu
 		DropDownButton lineShapeButton = new DropDownButton(new ImageIcon(
-				Engine.getResourceURL("icons/newlineshapemenu.gif")));
+				Engine.getCurrent().getResourceURL("icons/newlineshapemenu.gif")));
 		lineShapeButton.addComponent(new JMenuItem(new NewElementAction(
 				VPathway.NEWLIGANDROUND)));
 		lineShapeButton.addComponent(new JMenuItem(new NewElementAction(
Index: trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 1058)
@@ -28,18 +28,22 @@
 import javax.swing.table.TableCellEditor;
 import javax.swing.table.TableCellRenderer;
 
+import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
+import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PathwayEvent;
 import org.pathvisio.model.PathwayListener;
 import org.pathvisio.model.PropertyType;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.view.Graphics;
-import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.SelectionBox.SelectionEvent;
 import org.pathvisio.view.SelectionBox.SelectionListener;
 
-public class PathwayTableModel extends AbstractTableModel implements SelectionListener, PathwayListener {
+public class PathwayTableModel extends AbstractTableModel implements SelectionListener, 
+									PathwayListener, 
+									ApplicationEventListener {
 	TableCellEditor defaultEditor = new DefaultCellEditor(new JTextField());
 	
 	Collection<PathwayElement> input;
@@ -48,7 +52,10 @@
 	public PathwayTableModel() {
 		input = new HashSet<PathwayElement>();
 		properties = new ArrayList<TypedProperty>();
-		SelectionBox.addListener(this);
+		
+		Engine.getCurrent().addApplicationEventListener(this);
+		VPathway vp = Engine.getCurrent().getActiveVPathway();
+		if(vp != null) vp.addSelectionListener(this);
 	}
 	
 	private void clearInput() {
@@ -148,7 +155,7 @@
 			TypedProperty p = getPropertyAt(rowIndex);
 			p.setValue(aValue);
 		}
-		Engine.getActiveVPathway().redrawDirtyRect();
+		Engine.getCurrent().getActiveVPathway().redrawDirtyRect();
 	}
 	
 	public String getColumnName(int column) {
@@ -160,7 +167,7 @@
 		return columnIndex == 1;
 	}
 		
-	public void drawingEvent(SelectionEvent e) {
+	public void selectionEvent(SelectionEvent e) {
 		switch(e.type) {
 		case SelectionEvent.OBJECT_ADDED:
 			if(e.affectedObject instanceof Graphics)
@@ -195,4 +202,10 @@
 	public void gmmlObjectModified(PathwayEvent e) {
 		refresh();
 	}
+
+	public void applicationEvent(ApplicationEvent e) {
+		if(e.type == ApplicationEvent.VPATHWAY_CREATED) {
+			((VPathway)e.source).addSelectionListener(this);
+		}
+	}
 }
Index: trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java	(revision 1058)
@@ -19,6 +19,7 @@
 import java.io.PrintStream;
 
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.GpmlFormat;
 import org.pathvisio.preferences.GlobalPreference;
 
@@ -27,17 +28,17 @@
 		initImporters();
 		initExporters();
 		try {
-			Engine.log.setStream(new PrintStream(GlobalPreference.FILE_LOG.getValue())); 
+			Logger.log.setStream(new PrintStream(GlobalPreference.FILE_LOG.getValue())); 
 		} catch(Exception e) {}
-		Engine.log.setLogLevel(true, true, true, true, true, true);//Modify this to adjust log level
+		Logger.log.setLogLevel(true, true, true, true, true, true);//Modify this to adjust log level
 		
 	}
 	
 	private static void initImporters() {
-		Engine.addPathwayImporter(new GpmlFormat());
+		Engine.getCurrent().addPathwayImporter(new GpmlFormat());
 	}
 	
 	private static void initExporters() {
-		Engine.addPathwayExporter(new GpmlFormat());
+		Engine.getCurrent().addPathwayExporter(new GpmlFormat());
 	}
 }
Index: trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1058)
@@ -40,11 +40,11 @@
 import org.pathvisio.view.VPathwayListener;
 
 public abstract class CommonActions {
-	private static URL IMG_SAVE = Engine.getResourceURL("icons/save.gif");
-	private static URL IMG_IMPORT = Engine.getResourceURL("icons/import.gif");
-	private static URL IMG_EXPORT = Engine.getResourceURL("icons/export.gif");
-	private static URL IMG_COPY= Engine.getResourceURL("icons/copy.gif");
-	private static URL IMG_PASTE = Engine.getResourceURL("icons/paste.gif");
+	private static URL IMG_SAVE = Engine.getCurrent().getResourceURL("icons/save.gif");
+	private static URL IMG_IMPORT = Engine.getCurrent().getResourceURL("icons/import.gif");
+	private static URL IMG_EXPORT = Engine.getCurrent().getResourceURL("icons/export.gif");
+	private static URL IMG_COPY= Engine.getCurrent().getResourceURL("icons/copy.gif");
+	private static URL IMG_PASTE = Engine.getCurrent().getResourceURL("icons/paste.gif");
 	
 	public static class ZoomAction extends AbstractAction {
 		Component parent;
@@ -59,7 +59,7 @@
 		}
 		
 		public void actionPerformed(ActionEvent e) {
-			VPathway vPathway = Engine.getActiveVPathway();
+			VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 			if(vPathway != null) {
 				vPathway.setPctZoom(zoomFactor);
 			}
@@ -120,7 +120,7 @@
 				jfc.setDialogTitle("Import pathway");
 				jfc.setDialogType(JFileChooser.OPEN_DIALOG);
 				
-				for(final PathwayImporter imp : Engine.getPathwayImporters().values()) {
+				for(final PathwayImporter imp : Engine.getCurrent().getPathwayImporters().values()) {
 					FileFilter ff = new FileFilter() {
 						public boolean accept(File f) {
 							if(f.isDirectory()) return true;
@@ -159,12 +159,12 @@
 						int totalWork = 1000;
 						ProgressMonitor m = new ProgressMonitor(component, "Loading pathway", "Please wait while the pathway is being loaded", 0, 1000);
 						m.setProgress(10);
-						SwingEngine.importPathway(jfc.getSelectedFile());
+						SwingEngine.getCurrent().importPathway(jfc.getSelectedFile());
 						m.setProgress((int)(totalWork*2/3));
-						Engine.getActiveVPathway().setEditMode(true);
+						Engine.getCurrent().getActiveVPathway().setEditMode(true);
 						m.setProgress(totalWork);
 					} catch(ConverterException ex) {
-						SwingEngine.handleConverterException(SwingEngine.MSG_UNABLE_IMPORT, component, ex);
+						SwingEngine.getCurrent().handleConverterException(SwingEngine.MSG_UNABLE_IMPORT, component, ex);
 					}
 				}
 		}
@@ -193,7 +193,7 @@
 		}
 
 		public void actionPerformed(ActionEvent e) {
-			Engine.getActiveVPathway().copyToClipboard();
+			Engine.getCurrent().getActiveVPathway().copyToClipboard();
 		}		
 	}
 	
@@ -207,7 +207,7 @@
 		}
 
 		public void actionPerformed(ActionEvent e) {
-			Engine.getActiveVPathway().pasteFromClipboad();
+			Engine.getCurrent().getActiveVPathway().pasteFromClipboad();
 		}
 	}
 		
@@ -222,70 +222,70 @@
 			switch(element) {
 			case VPathway.NEWLINE: 
 				descr = "Draw new line";
-				imageURL = Engine.getResourceURL("icons/newline.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newline.gif");
 				break;
 			case VPathway.NEWLINEARROW:
 				descr = "Draw new arrow";
-				imageURL = Engine.getResourceURL("icons/newarrow.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newarrow.gif");
 				break;
 			case VPathway.NEWLINEDASHED:
 				descr = "Draw new dashed line";
-				imageURL = Engine.getResourceURL("icons/newdashedline.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newdashedline.gif");
 				break;
 			case VPathway.NEWLINEDASHEDARROW:
 				descr = "Draw new dashed arrow";
-				imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newdashedarrow.gif");
 				break;
 			case VPathway.NEWLABEL:
 				descr = "Draw new label";
-				imageURL = Engine.getResourceURL("icons/newlabel.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newlabel.gif");
 				break;
 			case VPathway.NEWARC:
 				descr = "Draw new arc";
-				imageURL = Engine.getResourceURL("icons/newarc.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newarc.gif");
 				break;
 			case VPathway.NEWBRACE:
 				descr = "Draw new brace";
-				imageURL = Engine.getResourceURL("icons/newbrace.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newbrace.gif");
 				break;
 			case VPathway.NEWGENEPRODUCT:
 				descr = "Draw new data node";
-				imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newgeneproduct.gif");
 				break;
 			case VPathway.NEWRECTANGLE:
 				descr = "Draw new rectangle";
-				imageURL = Engine.getResourceURL("icons/newrectangle.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newrectangle.gif");
 				break;
 			case VPathway.NEWOVAL:
 				descr = "Draw new oval";
-				imageURL = Engine.getResourceURL("icons/newoval.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newoval.gif");
 				break;
 			case VPathway.NEWTBAR:
 				descr = "Draw new TBar";
-				imageURL = Engine.getResourceURL("icons/newtbar.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newtbar.gif");
 				break;
 			case VPathway.NEWRECEPTORROUND:
 				descr = "Draw new round receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newreceptorround.gif");
 				break;
 			case VPathway.NEWRECEPTORSQUARE:
 				descr = "Draw new square receptor";
-				imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newreceptorsquare.gif");
 				break;
 			case VPathway.NEWLIGANDROUND:
 				descr = "Draw new round ligand";
-				imageURL = Engine.getResourceURL("icons/newligandround.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newligandround.gif");
 				break;
 			case VPathway.NEWLIGANDSQUARE:
 				descr = "Draw new square ligand";
-				imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newligandsquare.gif");
 				break;
 			case VPathway.NEWLINEMENU:
-				imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newlinemenu.gif");
 				descr = "Draw new line or arrow";
 				break;
 			case VPathway.NEWLINESHAPEMENU:
-				imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
+				imageURL = Engine.getCurrent().getResourceURL("icons/newlineshapemenu.gif");
 				descr = "Draw new ligand or receptor";
 				break;
 			}
@@ -297,7 +297,7 @@
 		}
 		
 		public void actionPerformed(ActionEvent e) {
-			VPathway vp = Engine.getActiveVPathway();
+			VPathway vp = Engine.getCurrent().getActiveVPathway();
 			if(vp != null) {
 				vp.addVPathwayListener(this);
 				vp.setNewGraphics(element);
@@ -315,13 +315,13 @@
 		StackType type;
 		
 		public StackAction(StackType t) {
-			super(t.getLabel(), new ImageIcon(Engine.getResourceURL(t.getIcon())));
+			super(t.getLabel(), new ImageIcon(Engine.getCurrent().getResourceURL(t.getIcon())));
 			putValue(Action.SHORT_DESCRIPTION, t.getDescription());
 			type = t;
 		}
 		
 		public void actionPerformed(ActionEvent e) {
-			VPathway vp = Engine.getActiveVPathway();
+			VPathway vp = Engine.getCurrent().getActiveVPathway();
 			if(vp != null) vp.stackSelected(type);
 		}
 	}
@@ -330,13 +330,13 @@
 		AlignType type;
 
 		public AlignAction(AlignType t) {
-			super(t.getLabel(), new ImageIcon(Engine.getResourceURL(t.getIcon())));
+			super(t.getLabel(), new ImageIcon(Engine.getCurrent().getResourceURL(t.getIcon())));
 			putValue(Action.SHORT_DESCRIPTION, t.getDescription());
 			type = t;
 		}
 
 		public void actionPerformed(ActionEvent e) {
-			VPathway vp = Engine.getActiveVPathway();
+			VPathway vp = Engine.getCurrent().getActiveVPathway();
 			if(vp != null) vp.alignSelected(type);
 		}
 	}	
Index: trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java	(revision 1058)
@@ -30,7 +30,7 @@
 		JFrame frame = new JFrame("PathVisio...swing it baby!");
 		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 		
-		MainPanel mainPanel = SwingEngine.getApplicationPanel();
+		MainPanel mainPanel = SwingEngine.getCurrent().getApplicationPanel();
 		frame.add(mainPanel);
 		frame.setJMenuBar(mainPanel.getMenuBar());
 		frame.setSize(800, 600);
@@ -38,7 +38,7 @@
 //		    UIManager.setLookAndFeel(
 //		        UIManager.getSystemLookAndFeelClassName());
 //		} catch (Exception ex) {
-//			Engine.log.error("Unable to load native look and feel", ex);
+//			Logger.log.error("Unable to load native look and feel", ex);
 //		}
 		
 		//Display the window.
@@ -48,8 +48,8 @@
 		double spSize = (100 - spPercent) / 100.0;
 		mainPanel.getSplitPane().setDividerLocation(spSize);
 		
-		SwingEngine.newPathway();
-		Engine.getActiveVPathway().setEditMode(true);
+		SwingEngine.getCurrent().newPathway();
+		Engine.getCurrent().getActiveVPathway().setEditMode(true);
 	}
 
 	public static void main(String[] args) {
Index: trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1057)
+++ trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1058)
@@ -18,33 +18,38 @@
 
 import java.awt.Component;
 import java.io.File;
-import java.io.PrintStream;
 import java.net.URL;
 
 import javax.swing.JOptionPane;
 
 import org.pathvisio.Engine;
 import org.pathvisio.Globals;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
-import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.view.VPathwayWrapper;
 import org.pathvisio.view.swing.VPathwaySwing;
 
 public class SwingEngine {	
 	private static MainPanel mainPanel;
 	
-	public static MainPanel getApplicationPanel() {
+	private static SwingEngine current;
+	public static SwingEngine getCurrent() {
+		if(current == null) current = new SwingEngine();
+		return current;
+	}
+	
+	public MainPanel getApplicationPanel() {
 		return getApplicationPanel(false);
 	}
 	
-	public static MainPanel getApplicationPanel(boolean forceNew) {
+	public MainPanel getApplicationPanel(boolean forceNew) {
 		if(forceNew || !hasApplicationPanel()) {
 			mainPanel = new MainPanel();
 		}
 		return mainPanel;
 	}
 	
-	public static boolean hasApplicationPanel() {
+	public boolean hasApplicationPanel() {
 		return mainPanel != null;
 	}
 	
@@ -53,7 +58,7 @@
 	public static String MSG_UNABLE_SAVE = "Unable to save GPML file.";
 	public static String MSG_UNABLE_OPEN = "Unable to open GPML file.";
 	
-	public static void handleConverterException(String message, Component c, ConverterException e) {
+	public void handleConverterException(String message, Component c, ConverterException e) {
 		if (e.getMessage().contains("Cannot find the declaration of element 'Pathway'"))
 		{
 			JOptionPane.showMessageDialog(c,
@@ -64,29 +69,29 @@
 					"Non-standard pathways need to be recreated or upgraded. " +
 					"Please contact the authors at " + Globals.DEVELOPER_EMAIL + " if you need help with this.\n" +
 					"\nSee error log for details");
-			Engine.log.error("Unable to open Gpml file", e);
+			Logger.log.error("Unable to open Gpml file", e);
 		}
 		else
 		{
 			JOptionPane.showMessageDialog(c,
 					message + "\n" + e.getClass() + e.getMessage());
-			Engine.log.error("Unable to open Gpml file", e);
+			Logger.log.error("Unable to open Gpml file", e);
 		}
 	}
 		
-	public static VPathwayWrapper createWrapper() {
+	public VPathwayWrapper createWrapper() {
 		 return new VPathwaySwing(getApplicationPanel().getScrollPane());
 	}
 	
-	public static File openPathway(URL url) throws ConverterException {
-		return Engine.openPathway(url, createWrapper());
+	public File openPathway(URL url) throws ConverterException {
+		return Engine.getCurrent().openPathway(url, createWrapper());
 	}
 	
-	public static void importPathway(File f) throws ConverterException {
-		Engine.importPathway(f, createWrapper());
+	public void importPathway(File f) throws ConverterException {
+		Engine.getCurrent().importPathway(f, createWrapper());
 	}
 	
-	public static void newPathway() {
-		Engine.newPathway(createWrapper());
+	public void newPathway() {
+		Engine.getCurrent().newPathway(createWrapper());
 	}
 }
Index: trunk/src/v2/org/pathvisio/R/wizard/RWizard.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/wizard/RWizard.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/wizard/RWizard.java	(revision 1058)
@@ -25,10 +25,10 @@
 import org.eclipse.jface.wizard.Wizard;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Engine;
 import org.pathvisio.R.RDataIn;
 import org.pathvisio.R.RCommands.RException;
 import org.pathvisio.R.RCommands.RObjectContainer;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.swt.SwtUtils.SimpleRunnableWithProgress;
 
 
@@ -65,10 +65,10 @@
 		} catch(InvocationTargetException e) {
 			if(e.getCause() instanceof InterruptedException) return true;
 			MessageDialog.openError(getShell(), "Error while applying function", e.getCause().getMessage());
-			Engine.log.error("Unable to perform pathway statistics", e);
+			Logger.log.error("Unable to perform pathway statistics", e);
 		} catch(RException re) {
 			MessageDialog.openError(getShell(), "Error while loading results", re.getMessage());
-			Engine.log.error("Unable to perform pathway statistics", re);
+			Logger.log.error("Unable to perform pathway statistics", re);
 		} catch(InterruptedException ie) {
 			return true; //Closes the wizard (needed because R process is killed (at least in linux)
 		} catch(Exception e) {
Index: trunk/src/v2/org/pathvisio/R/wizard/PageData.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/wizard/PageData.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/wizard/PageData.java	(revision 1058)
@@ -37,12 +37,12 @@
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.R.RCommands;
 import org.pathvisio.R.RDataIn;
 import org.pathvisio.R.RDataOut;
 import org.pathvisio.R.RCommands.RInterruptedException;
 import org.pathvisio.data.Gex;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 
 public class PageData extends WizardPage {
@@ -271,7 +271,7 @@
 			String msg = (e instanceof InvocationTargetException) ? e.getCause().getMessage() : e.getMessage();
 			
 			MessageDialog.openError(getShell(), "Error", "Unable to " + action + " data: " + msg);
-			Engine.log.error("Unable to export to R", e);
+			Logger.log.error("Unable to export to R", e);
 			return false;
 		}
 		return true;
Index: trunk/src/v2/org/pathvisio/R/wizard/PageStats.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/wizard/PageStats.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/wizard/PageStats.java	(revision 1058)
@@ -34,11 +34,11 @@
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.R.RController;
 import org.pathvisio.R.RFunctionLoader;
 import org.pathvisio.R.RCommands.RException;
 import org.pathvisio.R.RFunctionLoader.RFunction;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.util.swt.SwtUtils.SimpleRunnableWithProgress;
 
@@ -102,7 +102,7 @@
 		for(String fn : comboFunc.getItems()) {
 			try { 
 				RFunctionLoader.getFunction(fn).initValueComboItems(); 
-			} catch(RException e) { Engine.log.error("Unable to initialize values for function", e); }
+			} catch(RException e) { Logger.log.error("Unable to initialize values for function", e); }
 		}
 	}
 	
@@ -139,7 +139,7 @@
 	}
 	
 	protected void doSetTopToParent(final Control top) {
-		SwtEngine.getWindow().getShell().getDisplay().asyncExec(new Runnable() {
+		SwtEngine.getCurrent().getWindow().getShell().getDisplay().asyncExec(new Runnable() {
 			public void run() {
 				((StackLayout)((Composite)getControl()).getLayout()).topControl = top.getParent();
 				((Composite)getControl()).layout();
Index: trunk/src/v2/org/pathvisio/R/RDataIn.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/RDataIn.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/RDataIn.java	(revision 1058)
@@ -97,7 +97,7 @@
 	}
 	
 	public static void displayResults(List<ResultSet> results, String tabName) {		
-		TabbedSidePanel sp = SwtEngine.getWindow().getSidePanel();
+		TabbedSidePanel sp = SwtEngine.getCurrent().getWindow().getSidePanel();
 		
 		StatsResultTable srt = new StatsResultTable(sp.getTabFolder(), SWT.NULL);
 		srt.setResults(results);
Index: trunk/src/v2/org/pathvisio/R/RDataOut.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/RDataOut.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/RDataOut.java	(revision 1058)
@@ -36,6 +36,7 @@
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.util.FileUtils;
 import org.pathvisio.util.PathwayParser;
@@ -93,7 +94,7 @@
 	public RDataOut(File pathways, boolean recursive) {
 		this();
 		//Get the pathway files
-		pwFiles = FileUtils.getFiles(pathways, Engine.PATHWAY_FILE_EXTENSION, recursive);
+		pwFiles = FileUtils.getFiles(pathways, Engine.getCurrent().PATHWAY_FILE_EXTENSION, recursive);
 	}
 	
 	public List<File> getPathwayFiles() { return pwFiles; }
@@ -112,7 +113,7 @@
 	public void doExport() throws RException, InvocationTargetException, InterruptedException {
 		Rengine re = RController.getR();
 		
-		ProgressMonitorDialog dialog = new ProgressMonitorDialog(SwtEngine.getWindow().getShell());
+		ProgressMonitorDialog dialog = new ProgressMonitorDialog(SwtEngine.getCurrent().getWindow().getShell());
 		SimpleRunnableWithProgress rwp = null;
 		try {
 			if(exportData) {
@@ -154,7 +155,7 @@
 			
 		checkValid();
 		
-		pwFiles = FileUtils.getFiles(pwDir, Engine.PATHWAY_FILE_EXTENSION, true);
+		pwFiles = FileUtils.getFiles(pwDir, Engine.getCurrent().PATHWAY_FILE_EXTENSION, true);
 
 		if(pwFiles.size() == 0) throw new Exception("No pathway files (*.gpml) found in " + pwDir);
 		
@@ -170,7 +171,7 @@
 
 			PathwayParser p = new PathwayParser(xmlReader);
 			try { xmlReader.parse(f.getAbsolutePath()); } catch(Exception e) { 
-				Engine.log.error("Couldn't read " + f, e); 
+				Logger.log.error("Couldn't read " + f, e); 
 				continue; 
 			}
 			
@@ -531,7 +532,7 @@
 						try {
 							value[0] = Double.parseDouble(data[i][j]);
 						} catch(Exception e) {
-							Engine.log.error("Unable to parse double when converting data to R: " + data[i][j] + ", value set to NaN");
+							Logger.log.error("Unable to parse double when converting data to R: " + data[i][j] + ", value set to NaN");
 							value[0] = Double.NaN;
 						}
 						e_ref = re.rniPutDoubleArray(value);
Index: trunk/src/v2/org/pathvisio/R/RController.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/RController.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/RController.java	(revision 1058)
@@ -37,6 +37,7 @@
 import org.pathvisio.Engine;
 import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.R.RCommands.RException;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.util.JarUtils;
 import org.pathvisio.util.Utils;
@@ -64,7 +65,7 @@
 	public static boolean startR() {
 		//Start R-engine (with progress monitor)
 		try {
-			new ProgressMonitorDialog(SwtEngine.getWindow().getShell()).run(true, true,
+			new ProgressMonitorDialog(SwtEngine.getCurrent().getWindow().getShell()).run(true, true,
 					new IRunnableWithProgress() {
 				public void run(IProgressMonitor m) throws 	InvocationTargetException, 
 				InterruptedException 
@@ -86,7 +87,7 @@
 			return false;
 		} finally {
 			//Add a listener to close R on closing PathVisio
-			Engine.addApplicationEventListener(new RController());
+			Engine.getCurrent().addApplicationEventListener(new RController());
 		}
 
 		return true;
@@ -121,11 +122,11 @@
 	}
 	
 	private static void extractJRI() throws IOException, UnsatisfiedLinkError, InterruptedException {
-		Engine.log.trace("Loading R");
+		Logger.log.trace("Loading R");
 		
 		String ext = LIB_JRI_FILE.substring(LIB_JRI_FILE.lastIndexOf('.'));
 		String rversion = getRVersion();
-		Engine.log.trace("\tDetected R version " + rversion);
+		Logger.log.trace("\tDetected R version " + rversion);
 		File libFile = null;
 		try {
 			libFile = JarUtils.resourceToNamedTempFile(LIB_JRI_PATH + "/jri-" + 
@@ -135,7 +136,7 @@
 					"\nCurrently installed R version: " + rversion + "\n");
 		}
 				
-		Engine.log.trace("\tExtracted library " + libFile.toString());
+		Logger.log.trace("\tExtracted library " + libFile.toString());
 		
 		//Load the library
 		loadJRI(libFile);
@@ -205,10 +206,10 @@
 	
 	private static String locateRExec() {
 		final StringBuilder cmd = new StringBuilder();
-		SwtEngine.getWindow().getShell().getDisplay().syncExec(new Runnable() {
+		SwtEngine.getCurrent().getWindow().getShell().getDisplay().syncExec(new Runnable() {
 			public void run() {
 				String exec = Utils.getOS() == Utils.OS_WINDOWS ? "R.exe" : "R";
-				InputDialog libDialog = new InputDialog(SwtEngine.getWindow().getShell(),
+				InputDialog libDialog = new InputDialog(SwtEngine.getCurrent().getWindow().getShell(),
 						"Unable to find R executable",
 						"Unable to locate " + exec + "\nPlease install R (" + WWW_R + ") " +
 						" or specify location:", "", null);
@@ -242,10 +243,10 @@
 //	private static String locateRLib() {
 //		final String CANCEL = "C";
 //		final StringBuilder value = new StringBuilder(CANCEL);
-//		Engine.getWindow().getShell().getDisplay().syncExec(new Runnable() {
+//		Engine.getCurrent().getWindow().getShell().getDisplay().syncExec(new Runnable() {
 //			public void run() {
 //				String libName = System.mapLibraryName("jri");
-//				InputDialog libDialog = new InputDialog(Engine.getWindow().getShell(),
+//				InputDialog libDialog = new InputDialog(Engine.getCurrent().getWindow().getShell(),
 //					"System couldn't find " + libName, "Please specify location of file " + libName, "", null);
 //				if(libDialog.open() == InputDialog.OK) {
 //					value.delete(0, CANCEL.length());
@@ -265,7 +266,7 @@
 	private static void installPackage() throws FileNotFoundException, IOException, RException, InterruptedException {
 		File pkgFile = getPackageFile();
 		if(needsPackageUpdate(pkgFile.getName())) {
-			Engine.log.info("R package " + PKG_NAME + " is out of date or not installed yet: installing newest version");
+			Logger.log.info("R package " + PKG_NAME + " is out of date or not installed yet: installing newest version");
 			switch(Utils.getOS()) {
 			case Utils.OS_WINDOWS:
 				String pkgFileName = RCommands.fileToString(pkgFile);
@@ -294,7 +295,7 @@
 		}
 		Pattern regex = Pattern.compile(PKG_NAME + "_[0-9].[0-9].[0-9]." + ext);
 		for(String f : dircontent) {
-			Engine.log.trace(f);
+			Logger.log.trace(f);
 			if(regex.matcher(f).find()) {
 				pkgFile =  JarUtils.resourceToNamedTempFile(f, new File(f).getName());
 				if(pkgFile != null) break;
@@ -371,7 +372,7 @@
 			while((line = rOut.readLine()) != null) 
 				output = output == null ? line : output + "\n" + line;
 		} catch(IOException e) {
-			Engine.log.error("Unable to read R output", e);
+			Logger.log.error("Unable to read R output", e);
 		}
 		return output;
 	}
@@ -389,14 +390,14 @@
 			if(e.getMessage().contains(LIB_R_FILE)) msg = ERR_MSG_NOR;	
 			else msg = ERR_MSG_NOR;
 		}
-		Engine.log.error(ERR_MSG_PRE, e);
+		Logger.log.error(ERR_MSG_PRE, e);
 		openError(msg, e);
 	}
 		
 	public static void openError(final String msg, final Throwable e) {
-		SwtEngine.getWindow().getShell().getDisplay().asyncExec(new Runnable() {
+		SwtEngine.getCurrent().getWindow().getShell().getDisplay().asyncExec(new Runnable() {
 			public void run() {
-				MessageDialog.openError(SwtEngine.getWindow().getShell(), 
+				MessageDialog.openError(SwtEngine.getCurrent().getWindow().getShell(), 
 						ERR_MSG_PRE, (msg == null ? "" : msg + "\n \n Details:\n") + e.getMessage() + 
 						" (" + e.getClass().getName() + ")");
 			}
@@ -410,7 +411,7 @@
 				try { 
 					rOut.close();
 				} catch(Exception ie) { 
-					Engine.log.error("Unable to close R output file", ie);
+					Logger.log.error("Unable to close R output file", ie);
 				}
 			}
 		}
Index: trunk/src/v2/org/pathvisio/R/RFunctionLoader.java
===================================================================
--- trunk/src/v2/org/pathvisio/R/RFunctionLoader.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/R/RFunctionLoader.java	(revision 1058)
@@ -54,6 +54,7 @@
 import org.pathvisio.Engine;
 import org.pathvisio.R.RCommands.RException;
 import org.pathvisio.R.wizard.RWizard;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.JarUtils;
 import org.pathvisio.util.Utils;
 import org.pathvisio.util.swt.SwtUtils.SimpleRunnableWithProgress;
@@ -69,7 +70,7 @@
 	
 	
 	public static void loadFunctions() throws IOException, RException {
-		URL url = Engine.getResourceURL(FUN_DIR);
+		URL url = Engine.getCurrent().getResourceURL(FUN_DIR);
 		
 		String protocol = url.getProtocol();
 		if(protocol.equals("jar")) {
@@ -102,7 +103,7 @@
 	
 	private static void loadFunction(File funFile) {
     	try {
-    		Engine.log.trace("Loading R function: " + funFile);
+    		Logger.log.trace("Loading R function: " + funFile);
     		RCommands.eval("source('" + RCommands.fileToString(funFile) + "')");
     	} catch(RException re) {
     		RController.openError("Unable to load functions in " + funFile.toString(), re);
@@ -311,7 +312,7 @@
 						updateArgGroup(SETS_ARG);
 					} catch(Exception ex) {
 						MessageDialog.openError(e.display.getActiveShell(), "Error", ex.getMessage());
-						Engine.log.error("", ex);
+						Logger.log.error("", ex);
 					}
 				}
 			});
@@ -327,7 +328,7 @@
 						updateArgGroup(SETS_ARG);
 					} catch(Exception ex) {
 						MessageDialog.openError(e.display.getActiveShell(), "Error", ex.getMessage());
-						Engine.log.error("", ex);
+						Logger.log.error("", ex);
 					}
 				}
 			});
@@ -372,7 +373,7 @@
 					dialog.run(true, true, rwp); 
 				} catch(InvocationTargetException ex) {
 					MessageDialog.openError(getShell(), "Unable to export set", ex.getCause().getMessage());
-					Engine.log.error("Unable to export set to R", ex);
+					Logger.log.error("Unable to export set to R", ex);
 					return false;
 				} catch(InterruptedException ie) { return false; }
 				return true;
Index: trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java
===================================================================
--- trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 1057)
+++ trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 1058)
@@ -32,7 +32,6 @@
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
 import org.pathvisio.R.RController;
 import org.pathvisio.R.RDataIn;
@@ -46,6 +45,7 @@
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
 import org.pathvisio.data.GexSwt.ProgressWizardDialog;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.VPathwayElement;
@@ -87,7 +87,7 @@
 				MessageDialog.openError (window.getShell(), "Error", 
 						"Error: " + msg + "\n\n" + 
 						"See the error log for details.");
-				Engine.log.error(msg, e);
+				Logger.log.error(msg, e);
 			}		
 		}
 	}
@@ -135,7 +135,7 @@
 			setText("&Color Set manager");
 			setToolTipText("Create and edit color sets");
 			setImageDescriptor(ImageDescriptor.createFromURL(
-					Engine.getResourceURL("icons/colorset.gif")));
+					Engine.getCurrent().getResourceURL("icons/colorset.gif")));
 			Gex.addListener(this);
 			setEnabled(false);
 		}
@@ -164,7 +164,7 @@
 			setText("&Visualizations");
 			setToolTipText("Create and edit visualizations");
 			setImageDescriptor(ImageDescriptor.createFromURL(
-					Engine.getResourceURL("icons/visualizations.gif")));
+					Engine.getCurrent().getResourceURL("icons/visualizations.gif")));
 		}
 		public void run () {
 			VisualizationDialog d = new VisualizationDialog(getShell());
@@ -292,7 +292,7 @@
 		dataMenu.add(createGexAction);
 		dataMenu.add(colorSetManagerAction);
 		dataMenu.add(visualizationDialogAction);
-		if(SwtEngine.USE_R) {
+		if(SwtEngine.getCurrent().USE_R) {
 			MenuManager statsMenu = new MenuManager("&Pathway statistics");
 			dataMenu.add(statsMenu);
 			statsMenu.add(rStatsAction);
@@ -374,7 +374,7 @@
 		addStatusLine();
 		addCoolBar(SWT.FLAT | SWT.LEFT);
 		
-		Engine.addApplicationEventListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
 		Gex.addListener(this);
 	}
 
Index: trunk/src/core/org/pathvisio/model/MappFormat.java
===================================================================
--- trunk/src/core/org/pathvisio/model/MappFormat.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/model/MappFormat.java	(revision 1058)
@@ -33,8 +33,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.pathvisio.Engine;
 import org.pathvisio.data.DataSources;
+import org.pathvisio.debug.Logger;
 
 /**
  * The class MappFormat is responsible for all interaction with 
@@ -169,7 +169,7 @@
     		ce.setStackTrace(cnfe.getStackTrace());
     		throw ce;
     	}
-        Engine.log.debug ("Connection string: " + database);
+        Logger.log.debug ("Connection string: " + database);
 		
 		// Create the connection to the database
         
@@ -179,7 +179,7 @@
 	        
 	        Statement s = con.createStatement();
 	        
-	        Engine.log.trace ("READING INFO TABLE");
+	        Logger.log.trace ("READING INFO TABLE");
 	        // first do the INFO table, only one row.
 		    {
 		        ResultSet r = s.executeQuery(sqlInfoSelect);
@@ -191,7 +191,7 @@
 		        copyMappInfo(row, data, filename);
 	    	}    
 	
-		    Engine.log.trace ("READING OBJECTS TABLE");
+		    Logger.log.trace ("READING OBJECTS TABLE");
 	        // now do the OBJECTS table, multiple rows
 	        {
 		        ResultSet r = s.executeQuery(sqlObjectsSelect);
@@ -258,7 +258,7 @@
     			sObjects.setInt (1, k);
     			for (int j = 1; j < row.length; ++j)
     			{
-    				Engine.log.trace ("[" + (j + 1) + "] " + row[j]);
+    				Logger.log.trace ("[" + (j + 1) + "] " + row[j]);
 //    				System.err.println ("[" + (j + 1) + "] " + row[j]);
     				if (j >= 14 && j < 17)
     				{
@@ -282,7 +282,7 @@
 
 			for (int j = 0; j < mappInfo.length; ++j)
 			{
-				Engine.log.trace("[" + (j + 1) + "] " + mappInfo[j]);
+				Logger.log.trace("[" + (j + 1) + "] " + mappInfo[j]);
 				
 				sInfo.setString (j + 1, mappInfo[j]);
 			}    			
@@ -290,13 +290,13 @@
             con.close();
             
         } catch (ClassNotFoundException cl_ex) {
-        	Engine.log.error ("-> Could not find the Sun JbdcObdcDriver\n");
+        	Logger.log.error ("-> Could not find the Sun JbdcObdcDriver\n");
         } catch (SQLException ex) {
-        	Engine.log.error ("-> SQLException: "+ex.getMessage());        
+        	Logger.log.error ("-> SQLException: "+ex.getMessage());        
             ex.printStackTrace();
         } catch (IOException e)
         {
-        	Engine.log.error (e.getMessage());
+        	Logger.log.error (e.getMessage());
         }
     }
     
@@ -350,7 +350,7 @@
 		*
 		*/
 	
-		Engine.log.trace ("CONVERTING INFO TABLE TO GPML");
+		Logger.log.trace ("CONVERTING INFO TABLE TO GPML");
 		
 		PathwayElement o = data.getMappInfo();
 		
Index: trunk/src/core/org/pathvisio/model/GpmlFormat.java
===================================================================
--- trunk/src/core/org/pathvisio/model/GpmlFormat.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/model/GpmlFormat.java	(revision 1058)
@@ -18,12 +18,12 @@
 
 import java.awt.Color;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileReader;
-import java.io.FileNotFoundException;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Reader;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -31,11 +31,13 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+
 import javax.xml.XMLConstants;
 import javax.xml.transform.stream.StreamSource;
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
 import javax.xml.validation.ValidatorHandler;
+
 import org.jdom.Attribute;
 import org.jdom.Content;
 import org.jdom.Document;
@@ -47,7 +49,6 @@
 import org.jdom.output.Format;
 import org.jdom.output.SAXOutputter;
 import org.jdom.output.XMLOutputter;
-import org.pathvisio.Engine;
 import org.pathvisio.debug.Logger;
 import org.xml.sax.SAXException;
 
@@ -857,7 +858,7 @@
 							}
 						}
 					} else {
-						Engine.log.info("Skipped non-biopax element" + c);
+						Logger.log.info("Skipped non-biopax element" + c);
 					}
 				}
 			}
@@ -980,7 +981,7 @@
     		}
     		catch (Exception e)
     		{
-    			Engine.log.error("while converting color: " +
+    			Logger.log.error("while converting color: " +
     					"Color " + strColor + " is not valid, element color is set to black", e);
     		}
     	}
Index: trunk/src/core/org/pathvisio/model/Pathway.java
===================================================================
--- trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1058)
@@ -40,7 +40,7 @@
 * one object of the type INFOBOX.
 */
 public class Pathway implements PathwayListener
-{	
+{		
 	/**
 	   "changed" tracks if the Pathway has been changed since the file
 	   was opened or last saved. New pathways start changed.
@@ -392,6 +392,7 @@
 	{
 		GpmlFormat.readFromXml (this, in, validate);
 		setSourceFile (null);
+		clearChangedFlag();
 	}
 
 	public void readFromXml(File file, boolean validate) throws ConverterException
@@ -400,6 +401,7 @@
 		
 		GpmlFormat.readFromXml (this, file, validate);
 		setSourceFile (file);
+		clearChangedFlag();
 	}
 		
 	public void readFromMapp (File file) throws ConverterException
@@ -409,6 +411,7 @@
         MappFormat.readFromMapp (inputString, this);
         
         setSourceFile (file);
+        clearChangedFlag();
 	}
 	
 	public void writeToMapp (File file) throws ConverterException
@@ -485,6 +488,7 @@
 				undoManager.newRemoveAction(e.getAffectedData());
 				break;
 		}
+		markChanged();
 	}
 
 }
Index: trunk/src/core/org/pathvisio/model/PropertyType.java
===================================================================
--- trunk/src/core/org/pathvisio/model/PropertyType.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/model/PropertyType.java	(revision 1058)
@@ -24,8 +24,8 @@
 
 package org.pathvisio.model;
 
+import java.util.HashMap;
 import java.util.Map;
-import java.util.HashMap;
 
 /**
  *
Index: trunk/src/core/org/pathvisio/model/PathwayElement.java
===================================================================
--- trunk/src/core/org/pathvisio/model/PathwayElement.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/model/PathwayElement.java	(revision 1058)
@@ -349,7 +349,7 @@
 			result.add(PropertyType.BOARDWIDTH);
 			result.add(PropertyType.BOARDHEIGHT);
 			// if
-			// (Engine.getPreferences().getBoolean(Preferences.PREF_SHOW_ADVANCED_ATTR))
+			// (Engine.getCurrent().getPreferences().getBoolean(Preferences.PREF_SHOW_ADVANCED_ATTR))
 			if (fAdvanced)
 			{// these two properties are deprecated and not used in PathVisio
 				// itself.
Index: trunk/src/core/org/pathvisio/preferences/GlobalPreference.java
===================================================================
--- trunk/src/core/org/pathvisio/preferences/GlobalPreference.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/preferences/GlobalPreference.java	(revision 1058)
@@ -62,7 +62,7 @@
 	
 	public void setValue(String newValue) {
 		value = newValue;
-		Engine.savePreferences();
+		Engine.getCurrent().savePreferences();
 	}
 	
 	public String getValue() {
Index: trunk/src/core/org/pathvisio/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/Engine.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/Engine.java	(revision 1058)
@@ -38,8 +38,8 @@
 import org.pathvisio.view.VPathwayWrapper;
 
 public class Engine {
-	private static Pathway pathway;
-	private static VPathway vPathway;
+	private Pathway pathway;
+	private VPathway vPathway;
 		
 	public static final String SVG_FILE_EXTENSION = "svg";
 	public static final String SVG_FILTER_NAME = "Scalable Vector Graphics (*." + SVG_FILE_EXTENSION + ")";
@@ -47,85 +47,99 @@
 	public static final String PATHWAY_FILTER_NAME = "PathVisio Pathway (*." + PATHWAY_FILE_EXTENSION + ")";
 	public static final String GENMAPP_FILE_EXTENSION = "mapp";
 	public static final String GENMAPP_FILTER_NAME = "GenMAPP Pathway (*." + GENMAPP_FILE_EXTENSION + ")";
-	
+		
 	/**
 	 * the transparent color used in the icons for visualization of protein/mrna data
 	 */
 	public static final Color TRANSPARENT_COLOR = new Color(255, 0, 255);
-
+	
+	private static Engine currentEngine;
+	
 	/**
-	   The global application logger
-	   @deprecated. Preferably use Logger.log directly instead.
+	 * Get the current instance of Engine
+	 * @return
 	 */
-	public final static Logger log = Logger.log;
-			
+	public static Engine getCurrent() {
+		if(currentEngine == null) currentEngine = new Engine();
+		return currentEngine;
+	}
+	
 	/**
+	 * Set the current Engine
+	 * Any previous Engine will be lost
+	 * @param e
+	 */
+	public static void setCurrent(Engine e) {
+		currentEngine = e;
+	}
+	
+	/**
 	 * Get the {@link URL} for the resource stored in a jar file in the classpath
 	 * @param name	the filename of the resource
 	 * @return the URL pointing to the resource
 	 */
-	public static URL getResourceURL(String name) {
+	public URL getResourceURL(String name) {
 		URL url = Engine.class.getClassLoader().getResource(name);
-		if(url == null) log.error("Couldn't load resource '" + name + "'");
+		if(url == null) Logger.log.error("Couldn't load resource '" + name + "'");
 		return url;
 	}
 	
 	/**
 	 * Gets the currently open drawing
 	 */
-	public static VPathway getActiveVPathway() {
+	public VPathway getActiveVPathway() {
 		return vPathway;
 	}
 
 	/**
 	 * Returns the currently open Pathway
 	 */
-	public static Pathway getActivePathway() {
+	public Pathway getActivePathway() {
 		return pathway;
 	}
 	
-	static PreferenceCollection preferences;
+	PreferenceCollection preferences;
 	
-	public static void savePreferences() {
+	public void savePreferences() {
 		if(preferences != null) {
 			try {
 				preferences.save();
 			} catch(IOException e) {
-				log.error("Unable to save preferences", e);
+				Logger.log.error("Unable to save preferences", e);
 			}
 		}
 	}
 	
-	public static void setPreferenceCollection(PreferenceCollection pc) {
+	public void setPreferenceCollection(PreferenceCollection pc) {
 		preferences = pc;
 	}
 	
-	public static PreferenceCollection getPreferenceCollection() {
+	public PreferenceCollection getPreferenceCollection() {
 		return preferences;
 	}
 	
 	/**
 	 * application global clipboard.
 	 */
-	public static List<PathwayElement> clipboard = null;
+	public List<PathwayElement> clipboard = null;
 
-	public static void openPathway(String fileName) throws ConverterException {
+	public void openPathway(String fileName) throws ConverterException {
 		openPathway(new File(fileName));
 	}
 	
-	public static void openPathway(File pathwayFile) throws ConverterException {
+	public void openPathway(File pathwayFile) throws ConverterException {
 		openPathway(pathwayFile, null);
 	}
 	
-	public static void importPathway(File file) throws ConverterException {
+	public void importPathway(File file) throws ConverterException {
 		importPathway(file, null);
 	}
 	
-	public static void importPathway(File file, VPathwayWrapper wrapper) throws ConverterException {
+	public void importPathway(File file, VPathwayWrapper wrapper) throws ConverterException {
 		String fileName = file.toString();
 		
 		int dot = fileName.lastIndexOf('.');
-		String ext = Engine.PATHWAY_FILE_EXTENSION; //
+		String ext = Engine.getCurrent().PATHWAY_FILE_EXTENSION; //
 		if(dot >= 0) {
 			ext = fileName.substring(dot + 1, fileName.length());
 		}
@@ -142,14 +156,14 @@
 		}
 	}
 	
-	public static void openPathway(String fileName, VPathwayWrapper wrapper) throws ConverterException {
+	public void openPathway(String fileName, VPathwayWrapper wrapper) throws ConverterException {
 		openPathway(new File(fileName), wrapper);
 	}
 	
 	/**
 	 * Open a pathway from a gpml file
 	 */
-	public static void openPathway(File pathwayFile, VPathwayWrapper wrapper) throws ConverterException
+	public void openPathway(File pathwayFile, VPathwayWrapper wrapper) throws ConverterException
 	{
 		Pathway _pathway = null;		
 		String pwf = pathwayFile.toString();
@@ -176,11 +190,11 @@
 		
 	}
 	
-	public static File openPathway(URL url) throws ConverterException {
+	public File openPathway(URL url) throws ConverterException {
 		return openPathway(url, null);
 	}
 	
-	public static File openPathway(URL url, VPathwayWrapper w) throws ConverterException {
+	public File openPathway(URL url, VPathwayWrapper w) throws ConverterException {
 		String protocol = url.getProtocol();
 		File f = null;
 		if(protocol.equals("file")) {
@@ -197,16 +211,12 @@
 		}
 		return f;
 	}
-	
-	public static void savePathway() throws ConverterException {
-		savePathway(pathway.getSourceFile());
-	}
-	
-	public static void savePathway(File toFile) throws ConverterException {
+		
+	public void savePathway(File toFile) throws ConverterException {
 		pathway.writeToXml(toFile, true);
 	}
 	
-	private static void createVPathway(Pathway p, VPathwayWrapper wrapper) {
+	private void createVPathway(Pathway p, VPathwayWrapper wrapper) {
 		vPathway = wrapper.createVPathway();
 		vPathway.fromGmmlData(pathway);
 		fireApplicationEvent(new ApplicationEvent(vPathway, ApplicationEvent.VPATHWAY_CREATED));
@@ -215,14 +225,14 @@
 	/**
 	 * Create a new pathway
 	 */
-	public static void newPathway() {
+	public void newPathway() {
 		newPathway(null);
 	}
 	
 	/**
 	 * Create a new pathway and view (Pathay and VPathway)
 	 */
-	public static void newPathway(VPathwayWrapper wrapper) {
+	public void newPathway(VPathwayWrapper wrapper) {
 		pathway = new Pathway();
 		pathway.initMappInfo();
 		
@@ -238,16 +248,16 @@
 	 * Find out whether a drawing is currently open or not
 	 * @return true if a drawing is open, false if not
 	 */
-	public static boolean isDrawingOpen() { return vPathway != null; }
+	public boolean isDrawingOpen() { return vPathway != null; }
 
 
-	private static HashMap<String, PathwayExporter> exporters = new HashMap<String, PathwayExporter>();
-	private static HashMap<String, PathwayImporter> importers = new HashMap<String, PathwayImporter>();
+	private HashMap<String, PathwayExporter> exporters = new HashMap<String, PathwayExporter>();
+	private HashMap<String, PathwayImporter> importers = new HashMap<String, PathwayImporter>();
 	/**
 	 * Add a {@link PathwayExporter} that handles export of GPML to another file format
 	 * @param export
 	 */
-	public static void addPathwayExporter(PathwayExporter export) {
+	public void addPathwayExporter(PathwayExporter export) {
 		for(String ext : export.getExtensions()) {
 			exporters.put(ext, export);
 		}
@@ -257,31 +267,31 @@
 	 * Add a {@link PathwayImporter} that handles imoprt of GPML to another file format
 	 * @param export
 	 */
-	public static void addPathwayImporter(PathwayImporter importer) {
+	public void addPathwayImporter(PathwayImporter importer) {
 		for(String ext : importer.getExtensions()) {
 			importers.put(ext, importer);
 		}
 	}
 	
-	public static PathwayExporter getPathwayExporter(String ext) {
+	public PathwayExporter getPathwayExporter(String ext) {
 		return exporters.get(ext);
 	}
 
-	public static PathwayImporter getPathwayImporter(String ext) {
+	public PathwayImporter getPathwayImporter(String ext) {
 		return importers.get(ext);
 	}
 	
-	public static HashMap<String, PathwayExporter> getPathwayExporters() {
+	public HashMap<String, PathwayExporter> getPathwayExporters() {
 		return exporters;
 	}
 		
-	public static HashMap<String, PathwayImporter> getPathwayImporters() {
+	public HashMap<String, PathwayImporter> getPathwayImporters() {
 		return importers;
 	}
 	
-	private static HashMap<Integer, DBConnector> connectors = new HashMap<Integer, DBConnector>();
+	private HashMap<Integer, DBConnector> connectors = new HashMap<Integer, DBConnector>();
 	
-	public static DBConnector getDbConnector(int type) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
+	public DBConnector getDbConnector(int type) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
 		//Try to get the DBConnector from the hashmap first
 		DBConnector connector = connectors.get(type);
 		if(connector != null) return connector;
@@ -314,18 +324,18 @@
 	 * @param connector
 	 * @param type
 	 */
-	public static void setDBConnector(DBConnector connector, int type) {
+	public void setDBConnector(DBConnector connector, int type) {
 		connectors.put(type, connector);
 	}
 	
-	private static List<ApplicationEventListener> applicationEventListeners  = new ArrayList<ApplicationEventListener>();
+	private List<ApplicationEventListener> applicationEventListeners  = new ArrayList<ApplicationEventListener>();
 	
 	/**
 	 * Add an {@link ApplicationEventListener}, that will be notified if a
 	 * property changes that has an effect throughout the program (e.g. opening a pathway)
 	 * @param l The {@link ApplicationEventListener} to add
 	 */
-	public static void addApplicationEventListener(ApplicationEventListener l) {
+	public void addApplicationEventListener(ApplicationEventListener l) {
 		applicationEventListeners.add(l);
 	}
 	
@@ -334,7 +344,7 @@
 	 * to this class
 	 * @param e
 	 */
-	public static void fireApplicationEvent(ApplicationEvent e) {
+	public void fireApplicationEvent(ApplicationEvent e) {
 		for(ApplicationEventListener l : applicationEventListeners) l.applicationEvent(e);
 	}
 	
Index: trunk/src/core/org/pathvisio/debug/StopWatch.java
===================================================================
--- trunk/src/core/org/pathvisio/debug/StopWatch.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/debug/StopWatch.java	(revision 1058)
@@ -16,7 +16,6 @@
 //
 package org.pathvisio.debug;
 
-import org.pathvisio.Engine;
 
 /**
    A simple helper class for speed optimizations
@@ -44,6 +43,6 @@
 	}
 	
 	public void stopToLog(String msg) {
-		Engine.log.trace(msg + "\t" + stop());
+		Logger.log.trace(msg + "\t" + stop());
 	}
 }
Index: trunk/src/core/org/pathvisio/data/AbstractDBConnector.java
===================================================================
--- trunk/src/core/org/pathvisio/data/AbstractDBConnector.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/data/AbstractDBConnector.java	(revision 1058)
@@ -4,7 +4,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 
 public abstract class AbstractDBConnector implements DBConnector {
 	public static final int COMPAT_VERSION = 1;
@@ -41,9 +41,9 @@
 	public void createTables(Connection con) throws Exception {	
 			con.setReadOnly(false);
 			Statement sh = con.createStatement();
-			try { sh.execute("DROP TABLE info"); } catch(SQLException e) { Engine.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
-			try { sh.execute("DROP TABLE samples"); } catch(SQLException e) { Engine.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
-			try { sh.execute("DROP TABLE expression"); } catch(SQLException e) { Engine.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
+			try { sh.execute("DROP TABLE info"); } catch(SQLException e) { Logger.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
+			try { sh.execute("DROP TABLE samples"); } catch(SQLException e) { Logger.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
+			try { sh.execute("DROP TABLE expression"); } catch(SQLException e) { Logger.log.error("Error: unable to drop expression data tables: "+e.getMessage(), e); }
 			
 			sh.execute(
 					"CREATE TABLE					" +
Index: trunk/src/core/org/pathvisio/data/Gdb.java
===================================================================
--- trunk/src/core/org/pathvisio/data/Gdb.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/data/Gdb.java	(revision 1058)
@@ -35,6 +35,7 @@
 import java.util.regex.Pattern;
 
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.debug.StopWatch;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.util.Utils;
@@ -285,14 +286,14 @@
 	private static void initializeHeader() {
 		try {
 			BufferedReader input = new BufferedReader(new InputStreamReader(
-						Engine.getResourceURL(BPDIR + "/" + HEADERFILE).openStream()));
+						Engine.getCurrent().getResourceURL(BPDIR + "/" + HEADERFILE).openStream()));
 			String line;
 			backpagePanelHeader = "";
 			while((line = input.readLine()) != null) {
 				backpagePanelHeader += line.trim();
 			}
 		} catch (Exception e) {
-			Engine.log.error("Unable to read header file for backpage browser: " + e.getMessage(), e);
+			Logger.log.error("Unable to read header file for backpage browser: " + e.getMessage(), e);
 		}
 	}
 	
@@ -343,7 +344,7 @@
 				crossIds.add(new IdCodePair(r1.getString(1), r1.getString(2)));
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to get cross references for ensembl gene " +
+			Logger.log.error("Unable to get cross references for ensembl gene " +
 					"'" + ensId + "'", e);
 		}
 		
@@ -382,7 +383,7 @@
 				ensIds.add(r1.getString(1));
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to get ensembl genes for ensembl gene " +
+			Logger.log.error("Unable to get ensembl genes for ensembl gene " +
 					"'" + ref + "' with systemcode '" + code + "'", e);
 		}
 		
@@ -391,7 +392,7 @@
 	}
 	
 	public static List<IdCodePair> getCrossRefs(IdCodePair idc) {
-		Engine.log.trace("Fetching cross references");
+		Logger.log.trace("Fetching cross references");
 		StopWatch timer = new StopWatch();
 		timer.start();
 		
@@ -399,7 +400,7 @@
 		ArrayList<String> ensIds = ref2EnsIds(idc.getId(), idc.getCode());
 		for(String ensId : ensIds) refs.addAll(ensId2Refs(ensId));
 
-		Engine.log.trace("END Fetching cross references for " + idc + "; time:\t" + timer.stop());
+		Logger.log.trace("END Fetching cross references for " + idc + "; time:\t" + timer.stop());
 		return refs;
 	}
 	
@@ -460,11 +461,11 @@
 				crossIds.add(new IdCodePair(rid, rcode));
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to get cross references for gene " +
+			Logger.log.error("Unable to get cross references for gene " +
 					"'" + id + ", with systemcode '" + code + "'", e);
 		}
 		
-		Engine.log.trace("\t> getCrossRefs1Query:\t" + timer.stop());
+		Logger.log.trace("\t> getCrossRefs1Query:\t" + timer.stop());
 		return crossIds;
 	}
 	
@@ -516,7 +517,7 @@
 	}
 	
 	public static DBConnector getDBConnector() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
-		return Engine.getDbConnector(DBConnector.TYPE_GDB);
+		return Engine.getCurrent().getDbConnector(DBConnector.TYPE_GDB);
 	}
 	
 	/**
@@ -545,7 +546,7 @@
 				DBConnector connector = getDBConnector();
 				connector.closeConnection(con);
 			} catch(Exception e) {
-				Engine.log.error("Unable to close database connection", e);
+				Logger.log.error("Unable to close database connection", e);
 			}
 		}
 	}
@@ -563,7 +564,7 @@
 	    try {
 	        error = new PrintWriter(new FileWriter("convert_gdb_log.txt"));
 	    } catch(IOException ex) {
-	    	Engine.log.error("Unable to open error file: " + ex.getMessage(), ex);
+	    	Logger.log.error("Unable to open error file: " + ex.getMessage(), ex);
 	    }
 	    
 		error.println ("Info:  Fetching data from gdb");
@@ -795,7 +796,7 @@
 	 * @param convertCon	The connection to the database the tables are created in
 	 */
 	public static void createTables(Connection convertCon) {
-		Engine.log.trace("Info:  Creating tables");
+		Logger.log.trace("Info:  Creating tables");
 		
 		try {
 			Statement sh = convertCon.createStatement();
@@ -803,7 +804,7 @@
 			sh.execute("DROP TABLE link");
 			sh.execute("DROP TABLE gene");
 		} catch(Exception e) {
-			Engine.log.error("Unable to drop gdb tables: "+e.getMessage(), e);
+			Logger.log.error("Unable to drop gdb tables: "+e.getMessage(), e);
 		}
 		try
 		{
@@ -853,7 +854,7 @@
 			
 		} catch (Exception e)
 		{
-			Engine.log.error("while creating gdb tables: " + e.getMessage(), e);
+			Logger.log.error("while creating gdb tables: " + e.getMessage(), e);
 		}
 	}
 	
Index: trunk/src/core/org/pathvisio/view/VPathway.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1058)
@@ -49,6 +49,7 @@
 import org.pathvisio.model.PathwayListener;
 import org.pathvisio.model.ShapeType;
 import org.pathvisio.model.PathwayElement.MPoint;
+import org.pathvisio.view.SelectionBox.SelectionListener;
 
 /**
  * This class implements and handles a drawing. Graphics objects are stored in
@@ -99,7 +100,7 @@
 	}
 	
 	SelectionBox s; 
-		
+			
 	private boolean editMode;
 	/**
 	 * Checks if this drawing is in edit mode
@@ -189,8 +190,8 @@
 		{
 			parent.setVSize(width, height);
 		}
-		data.fireObjectModifiedEvent(new PathwayEvent(null,
-				PathwayEvent.MODIFIED_GENERAL));
+//		data.fireObjectModifiedEvent(new PathwayEvent(null,
+//				PathwayEvent.MODIFIED_GENERAL));
 		fireVPathwayEvent(new VPathwayEvent(this, VPathwayEvent.MODEL_LOADED));
 		data.addListener(this);
 	}
@@ -502,7 +503,7 @@
 			if (newGraphics != NEWNONE)
 			{
 				newObject(new Point(e.getX(), e.getY()));
-				//SwtEngine.getWindow().deselectNewItemActions();
+				//SwtEngine.getCurrent().getWindow().deselectNewItemActions();
 			} else
 			{
 				editObject(new Point(e.getX(), e.getY()), e);
@@ -1096,7 +1097,7 @@
 //	 */
 //	public void mouseHover(MouseEvent e)
 //	{
-//		Visualization v = VisualizationManager.getCurrent();
+//		Visualization v = VisualizationManager.getCurrent().;
 //		if (v != null && v.usesToolTip())
 //		{
 //			Point2D p = new Point2D.Double(e.getX(), e.getY());
@@ -1399,10 +1400,10 @@
 		}
 		if (result.size() > 0)
 		{
-			Engine.clipboard = result;
+			Engine.getCurrent().clipboard = result;
 		} else
 		{
-			Engine.clipboard = null;
+			Engine.getCurrent().clipboard = null;
 		}
 		
 		//clipboard.dispose();
@@ -1689,7 +1690,7 @@
 	 */
 	public void pasteFromClipboad()
 	{
-		if (Engine.clipboard != null)
+		if (Engine.getCurrent().clipboard != null)
 		{
 			clearSelection();
 			Map<String, String> idmap = new HashMap<String, String>();
@@ -1698,7 +1699,7 @@
 			/*
 			 * Step 1: generate new unique ids for copied items
 			 */
-			for (PathwayElement o : Engine.clipboard)
+			for (PathwayElement o : Engine.getCurrent().clipboard)
 			{
 				String id = o.getGraphId();
 				if (id != null) 
@@ -1722,7 +1723,7 @@
 			/*
 			 * Step 2: do the actual copying 
 			 */
-			for (PathwayElement o : Engine.clipboard)
+			for (PathwayElement o : Engine.getCurrent().clipboard)
 			{
 				if (o.getObjectType() == ObjectType.MAPPINFO
 						|| o.getObjectType() == ObjectType.INFOBOX)
@@ -1793,6 +1794,22 @@
 		removeListeners.add(l);
 	}
 	
+	/**
+	 * Adds a {@link SelectionListener} to the SelectionBox of this VPathway
+	 * @param l The SelectionListener to add
+	 */
+	public void addSelectionListener(SelectionListener l) {
+		s.addListener(l);
+	}
+	
+	/**
+	 * Removes a {@link SelectionListener} from the SelectionBox of this VPathway
+	 * @param l The SelectionListener to remove
+	 */
+	public void removeSelectionListener(SelectionListener l) {
+		s.removeListener(l);
+	}
+	
 	private void cleanupListeners()
 	{
 		//Do not remove immediately, to prevent ConcurrentModificationException
@@ -1809,7 +1826,7 @@
 			l.vPathwayEvent(e);
 		}
 	}
-	
+		
 	/** 
 	 * helper method to convert view coordinates to model coordinates 
 	 */
Index: trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1058)
@@ -31,7 +31,9 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.KeyStroke;
+import javax.swing.SwingUtilities;
 
+import org.pathvisio.debug.Logger;
 import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayEvent;
 import org.pathvisio.view.VPathwayListener;
@@ -155,9 +157,13 @@
 	public void vPathwayEvent(VPathwayEvent e) {
 		if(e.getType() == VPathwayEvent.MODEL_LOADED) {
 			if(e.getSource() == child) {
-				container.setViewportView(this);
-				container.getViewport().setBackground(Color.GRAY);
-				container.revalidate();
+				SwingUtilities.invokeLater(new Runnable() {
+					public void run() {
+						container.setViewportView(VPathwaySwing.this);
+						container.getViewport().setBackground(Color.GRAY);
+						container.revalidate();						
+					}
+				});
 			}
 		}
 	}
Index: trunk/src/core/org/pathvisio/view/SelectionBox.java
===================================================================
--- trunk/src/core/org/pathvisio/view/SelectionBox.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/view/SelectionBox.java	(revision 1058)
@@ -395,35 +395,31 @@
 		
 	public void adjustToZoom(double factor) { fitToSelection(); }
 	
-	static List<SelectionListener> listeners;
-
-	private static List<SelectionListener> getListeners() {
-		if(listeners == null)
-			listeners = new ArrayList<SelectionListener>();
-		return listeners;
+	private List<SelectionListener> listeners = new ArrayList<SelectionListener>();
+	
+	public void addListener(SelectionListener l) {
+		if(!listeners.contains(l)) {
+			listeners.add(l);
+		}
 	}
 	
-	/**
-	 * Add a {@link SelectionListener}, that will be notified if a selection event occurs
-	 * @param l The {@link SelectionListener} to add
-	 */
-	public static void addListener(SelectionListener l) {
-		getListeners().add(l);
+	public void removeListener(SelectionListener l) {
+		listeners.remove(l);
 	}
-
+	
 	/**
 	 * Fire a {@link SelectionEvent} to notify all {@link SelectionListener}s registered
 	 * to this class
 	 * @param e
 	 */
-	public static void fireSelectionEvent(SelectionEvent e) {
-		for(SelectionListener l : getListeners()) {
-			l.drawingEvent(e);
+	public void fireSelectionEvent(SelectionEvent e) {
+		for(SelectionListener l : listeners) {
+			l.selectionEvent(e);
 		}
 	}
 
 	public interface SelectionListener {
-		public void drawingEvent(SelectionEvent e);
+		public void selectionEvent(SelectionEvent e);
 	}
 
 	public static class SelectionEvent extends EventObject {
Index: trunk/src/core/org/pathvisio/util/FileUtils.java
===================================================================
--- trunk/src/core/org/pathvisio/util/FileUtils.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/util/FileUtils.java	(revision 1058)
@@ -30,7 +30,7 @@
 import java.net.URLConnection;
 import java.util.ArrayList;
 
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 
 public class FileUtils {	
 	/**
@@ -70,7 +70,7 @@
 			for(File f : file.listFiles()) deleteRecursive(f);
 		}
 		boolean deleted = file.delete();
-		Engine.log.trace((deleted ? "Deleted " : "Unable to delete ") + "file " + file);
+		Logger.log.trace((deleted ? "Deleted " : "Unable to delete ") + "file " + file);
 	}
 	
 	/**
@@ -94,7 +94,7 @@
 		}
 		catch(IOException e)
 		{
-			Engine.log.error("Unable to determine number of lines in file " + fileName, e);
+			Logger.log.error("Unable to determine number of lines in file " + fileName, e);
 		}
 		return nrLines;
 	}
Index: trunk/src/core/org/pathvisio/util/Utils.java
===================================================================
--- trunk/src/core/org/pathvisio/util/Utils.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/util/Utils.java	(revision 1058)
@@ -23,7 +23,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 
 public class Utils {
 	
@@ -146,7 +146,7 @@
 			ResultSet r = con.createStatement().executeQuery("SELECT version FROM info");
 			if(r.next()) check = r.getInt("version") == compat_version;
 		} catch (Exception e) {
-			Engine.log.error("Database compatibility version number could not be read", e);
+			Logger.log.error("Database compatibility version number could not be read", e);
 		}
 		if(check) return;
 		throw new Exception("Incompatible version of database schema");
@@ -175,7 +175,7 @@
 	public static boolean isSubClass(Class c, Class superClass) {
 		Class sc = c;
 		while((sc = sc.getSuperclass()) != null) {
-			Engine.log.trace("\t\t>" + c + " with superclass: " + superClass);
+			Logger.log.trace("\t\t>" + c + " with superclass: " + superClass);
 			if(sc.equals(superClass)) return true;
 		}
 		return false;
Index: trunk/src/core/org/pathvisio/util/PathwayParser.java
===================================================================
--- trunk/src/core/org/pathvisio/util/PathwayParser.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/util/PathwayParser.java	(revision 1058)
@@ -18,9 +18,9 @@
 
 import java.util.ArrayList;
 
-import org.pathvisio.Engine;
 import org.pathvisio.data.DataSources;
 import org.pathvisio.data.Gdb.IdCodePair;
+import org.pathvisio.debug.Logger;
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
@@ -92,18 +92,18 @@
 	
 	public void error(SAXParseException e) 
 	{ 
-		Engine.log.error("Error while parsing xml document", e);
+		Logger.log.error("Error while parsing xml document", e);
 	}
 	
 	public void fatalError(SAXParseException e) throws SAXParseException 
 	{ 
-		Engine.log.error("Fatal error while parsing xml document", e);
+		Logger.log.error("Fatal error while parsing xml document", e);
 		throw new SAXParseException("Fatal error, parsing of this document aborted", null);
 	}
 	
 	public void warning(SAXParseException e) 
 	{ 
-		Engine.log.error("Warning while parsing xml document", e);
+		Logger.log.error("Warning while parsing xml document", e);
 	}
 	
 	public class Gene extends IdCodePair 
Index: trunk/src/core/org/pathvisio/util/JarUtils.java
===================================================================
--- trunk/src/core/org/pathvisio/util/JarUtils.java	(revision 1057)
+++ trunk/src/core/org/pathvisio/util/JarUtils.java	(revision 1058)
@@ -32,6 +32,7 @@
 
 import org.pathvisio.Engine;
 import org.pathvisio.Globals;
+import org.pathvisio.debug.Logger;
 
 public class JarUtils {
 	static final String PREFIX_TMP = Globals.APPLICATION_NAME;
@@ -98,7 +99,7 @@
 	 */
 	public static URL getResourceURL(String name) {
 		URL url = Engine.class.getClassLoader().getResource(name);
-		if(url == null) Engine.log.error("Couldn't load resource '" + name + "'");
+		if(url == null) Logger.log.error("Couldn't load resource '" + name + "'");
 		return url;
 	}
 	
@@ -109,7 +110,7 @@
 	 */
 	public static InputStream getResourceInputStream(String name) {
 		InputStream in = Engine.class.getClassLoader().getResourceAsStream(name);
-		if(in == null) Engine.log.error("Couldn't load resource '" + name + "'");
+		if(in == null) Logger.log.error("Couldn't load resource '" + name + "'");
 		return in;
 	}
 }
Index: trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java
===================================================================
--- trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java	(revision 1058)
@@ -23,6 +23,7 @@
 import org.eclipse.jface.util.IPropertyChangeListener;
 import org.eclipse.jface.util.PropertyChangeEvent;
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.preferences.Preference;
@@ -34,7 +35,7 @@
  * This class contains all user preferences used in this application
  */
 public class SwtPreferences extends PreferenceStore implements PreferenceCollection, IPropertyChangeListener {
-	private static final File preferenceFile = new File(SwtEngine.getApplicationDir(), ".PathVisio");
+	private static final File preferenceFile = new File(SwtEngine.getCurrent().getApplicationDir(), ".PathVisio");
 	
 	public SwtPreferences() {
 		this(preferenceFile.toString());
@@ -100,7 +101,7 @@
 		try {
 			load();
 		} catch(Exception e) { 
-			Engine.log.error("Unable to load preferences", e);
+			Logger.log.error("Unable to load preferences", e);
 		}
 		
 		toEnums();
@@ -137,7 +138,7 @@
 			//if(e.getNewValue() instanceof RGB) Graphics.selectColor = (RGB)e.getNewValue();
 			//else 
 				Graphics.selectColor = ColorConverter.parseColorString((String)e.getNewValue());
-			Engine.getActiveVPathway().redraw();
+			Engine.getCurrent().getActiveVPathway().redraw();
 		}
 		if(e.getProperty().startsWith("directories")) {
 			createDataDirectories();
@@ -145,10 +146,10 @@
 	}
 	
 	public enum SwtPreference implements Preference {
-		SWT_DIR_PWFILES(new File(SwtEngine.getDataDir().toString(), "pathways").toString()),
-		SWT_DIR_GDB(new File(SwtEngine.getDataDir().toString(), "gene databases").toString()),
-		SWT_DIR_EXPR(new File(SwtEngine.getDataDir().toString(), "expression datasets").toString()),
-		SWT_DIR_RDATA(new File(SwtEngine.getDataDir().toString(), "R data").toString()),
+		SWT_DIR_PWFILES(new File(SwtEngine.getCurrent().getDataDir().toString(), "pathways").toString()),
+		SWT_DIR_GDB(new File(SwtEngine.getCurrent().getDataDir().toString(), "gene databases").toString()),
+		SWT_DIR_EXPR(new File(SwtEngine.getCurrent().getDataDir().toString(), "expression datasets").toString()),
+		SWT_DIR_RDATA(new File(SwtEngine.getCurrent().getDataDir().toString(), "R data").toString()),
 
 		;
 		
Index: trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java
===================================================================
--- trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java	(revision 1058)
@@ -77,7 +77,7 @@
 					"Expression datasets:", getFieldEditorParent());
 			addField(d3);
 
-			if(SwtEngine.isUseR()) {
+			if(SwtEngine.getCurrent().isUseR()) {
 				DirectoryFieldEditor d4 = new DirectoryFieldEditor(SwtPreference.SWT_DIR_RDATA.name(),
 						"Results from pathway statistics:", getFieldEditorParent());
 				addField(d4);
Index: trunk/src/swt/org/pathvisio/visualization/Visualization.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/Visualization.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/Visualization.java	(revision 1058)
@@ -42,6 +42,7 @@
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.Utils;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.VPathway;
@@ -110,7 +111,7 @@
 			plugins.put(c, pr);
 			pluginPlacement.add(pr);
 		} catch(Throwable e) {
-			Engine.log.error("Unable to create instance of plugin " + c, e);
+			Logger.log.error("Unable to create instance of plugin " + c, e);
 		}
 	}
 
@@ -380,7 +381,7 @@
 				PluginSet pr = PluginSet.fromXML((Element)o, v);
 				v.setPluginSet(pr.getClass(), pr);
 			} catch(Throwable e) {
-				Engine.log.error("Unable to load plugin", e);
+				Logger.log.error("Unable to load plugin", e);
 			}
 		}		
 		return v;
@@ -408,7 +409,7 @@
 		case(VisualizationEvent.VISUALIZATION_SELECTED):
 		case(VisualizationEvent.VISUALIZATION_MODIFIED):
 		case(VisualizationEvent.PLUGIN_MODIFIED):
-			VPathway p = Engine.getActiveVPathway();
+			VPathway p = Engine.getCurrent().getActiveVPathway();
 			if(p != null) {
 				p.redraw();
 			}
Index: trunk/src/swt/org/pathvisio/visualization/VisualizationDialog.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/VisualizationDialog.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/VisualizationDialog.java	(revision 1058)
@@ -63,8 +63,8 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.data.Gex;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.util.Utils;
 import org.pathvisio.util.swt.TableColumnResizer;
@@ -473,7 +473,7 @@
 					pluginTable.refresh();
 				} catch(Throwable e) {
 					MessageDialog.openError(getShell(), "Unable to load plugin", e.toString() + "\n" + e.getMessage());
-					Engine.log.error("Unable to load plugin", e);
+					Logger.log.error("Unable to load plugin", e);
 				}
 			}
 		}
@@ -577,9 +577,9 @@
 	}
 	
 	class PluginTableLabelProvider implements ITableLabelProvider {
-		final Image checkTrue = SwtEngine.getImageRegistry().get("checkbox.checked");
-		final Image checkFalse = SwtEngine.getImageRegistry().get("checkbox.unchecked");
-		final Image checkUnavailable = SwtEngine.getImageRegistry().get("checkbox.unavailable");
+		final Image checkTrue = SwtEngine.getCurrent().getImageRegistry().get("checkbox.checked");
+		final Image checkFalse = SwtEngine.getCurrent().getImageRegistry().get("checkbox.unchecked");
+		final Image checkUnavailable = SwtEngine.getCurrent().getImageRegistry().get("checkbox.unavailable");
 		
 		public String getColumnText(Object element, int columnIndex) {
 			PluginSet ps = (PluginSet)element;
Index: trunk/src/swt/org/pathvisio/visualization/plugins/PluginManager.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/plugins/PluginManager.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/plugins/PluginManager.java	(revision 1058)
@@ -36,8 +36,8 @@
 import org.jdom.input.SAXBuilder;
 import org.jdom.output.Format;
 import org.jdom.output.XMLOutputter;
-import org.pathvisio.Engine;
 import org.pathvisio.data.Gex;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.util.Utils;
 import org.pathvisio.visualization.Visualization;
@@ -91,7 +91,7 @@
 			return getInstance(pluginClass, null).isGeneric();
 		} catch(Throwable e) { 
 			e.printStackTrace();
-			Engine.log.error("Unable to determine if plugin is generic", e);
+			Logger.log.error("Unable to determine if plugin is generic", e);
 			return false; 
 		}
 	}
@@ -110,22 +110,22 @@
 			VisualizationPlugin p = getInstance(pluginClass, null);
 			return p.getName();
 		} catch(Throwable e) {
-			Engine.log.error("Unable to get plugin name for " + pluginClass, e);
+			Logger.log.error("Unable to get plugin name for " + pluginClass, e);
 			return pluginClass.getName();
 		}
 	}
 
 	public static void loadPlugins() throws Throwable {	
-		Engine.log.trace("> Loading visualization plugins");
+		Logger.log.trace("> Loading visualization plugins");
 		Enumeration<URL> resources = 
 			SwtEngine.class.getClassLoader().getResources(".");
         while (resources.hasMoreElements()) {
         	URL url = resources.nextElement();
-        	Engine.log.trace("visualization.plugins package found in: " + url);
+        	Logger.log.trace("visualization.plugins package found in: " + url);
         	try {
         		loadPlugin(url);
         	} catch(Throwable e) {
-        		Engine.log.error("Error when loading plugins from " + url, e);
+        		Logger.log.error("Error when loading plugins from " + url, e);
         	}
         }
         loadAdditional();
@@ -151,12 +151,12 @@
     			loadFromJar(url);
     		else loadFromDir(url);
     	}
-		else Engine.log.error("Unable to load additional plugin", new Exception("Unsupported URL protocol"));
+		else Logger.log.error("Unable to load additional plugin", new Exception("Unsupported URL protocol"));
 	}
 	
 	static Document getAdditionalXML() {
 		if(addDoc == null) {
-			File f = new File(SwtEngine.getApplicationDir(), FILE_ADD_PLUGINS);
+			File f = new File(SwtEngine.getCurrent().getApplicationDir(), FILE_ADD_PLUGINS);
 			if(!f.exists()) {
 				return createXML();
 			} else {
@@ -165,7 +165,7 @@
 					Document doc = parser.build(f);
 					return doc;
 				} catch(Exception e) {
-					Engine.log.error("Unable to load additional plugins file", e);
+					Logger.log.error("Unable to load additional plugins file", e);
 					return createXML();
 				}
 			}
@@ -188,7 +188,7 @@
 				url = new URL(((Element)o).getAttributeValue(XML_ATTR_URL));
 				loadPlugin(new File(url.getFile()));
 			} catch(Throwable ex) {
-				Engine.log.error("Unable to load additional plugin", ex);
+				Logger.log.error("Unable to load additional plugin", ex);
 				if(url != null) removeAdditional(url);
 			}
 		}
@@ -226,11 +226,11 @@
 	static void saveXML(Document doc) {
 		XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
 		try {
-			FileWriter fw = new FileWriter(new File(SwtEngine.getApplicationDir(), FILE_ADD_PLUGINS));
+			FileWriter fw = new FileWriter(new File(SwtEngine.getCurrent().getApplicationDir(), FILE_ADD_PLUGINS));
 			out.output(doc, fw);
 			fw.close();
 		} catch(IOException e) {
-			Engine.log.error("Unable to save additional plugins", e);
+			Logger.log.error("Unable to save additional plugins", e);
 		}
 	}
 	
@@ -243,7 +243,7 @@
 	}
 	
 	static void loadFromDir(URL url) throws Throwable {
-		Engine.log.trace("\tLoading from directory " + url);
+		Logger.log.trace("\tLoading from directory " + url);
 		File directory = new File(URLDecoder.decode(url.getPath(), "UTF-8"));
 		if (directory.exists()) {
            processFile(directory, directory.toString());
@@ -265,7 +265,7 @@
 		}
 	}
 	static void loadFromJar(URL url) throws Throwable {
-		Engine.log.trace("\tLoading from jar connection " + url);
+		Logger.log.trace("\tLoading from jar connection " + url);
 		JarFile f = null;
 		if(url.getProtocol().equals("jar")) {
 			JarURLConnection conn = (JarURLConnection)url.openConnection();
@@ -278,11 +278,11 @@
 		
 	static void loadFromJar(JarFile jfile) throws Throwable {
 		Throwable error = null;
-		Engine.log.trace("\tLoading from jar file " + jfile);
+		Logger.log.trace("\tLoading from jar file " + jfile);
 		Enumeration e = jfile.entries();
 		while (e.hasMoreElements()) {
 			ZipEntry entry = (ZipEntry)e.nextElement();
-			Engine.log.trace("Checking " + entry);
+			Logger.log.trace("Checking " + entry);
 			String entryname = entry.getName();
 			if(entryname.endsWith(".class")) {
 				try {
@@ -290,7 +290,7 @@
 					Class pluginClass = Class.forName(cn);
 					addPlugin(pluginClass);
 				} catch(Throwable ex) {
-					Engine.log.error("Unable to load plugin", ex);
+					Logger.log.error("Unable to load plugin", ex);
 					error = ex;
 				}
 			}
@@ -303,16 +303,16 @@
 	}
 	
 	static void addPlugin(Class c) {
-		Engine.log.trace("\t\tTrying to add " + c);
+		Logger.log.trace("\t\tTrying to add " + c);
 		if(isPlugin(c)) {
-			Engine.log.trace("\t\t\t!> Adding " + c);
+			Logger.log.trace("\t\t\t!> Adding " + c);
 			plugins.add(c);
 		}
 	}
 	
 	static boolean isPlugin(Class c) {
 		if(Modifier.isAbstract(c.getModifiers())) {
-			Engine.log.trace("\t\t> Class " + c + " is not a visualization plugin (is abstract)");
+			Logger.log.trace("\t\t> Class " + c + " is not a visualization plugin (is abstract)");
 			return false;
 		}
 		return Utils.isSubClass(c, VisualizationPlugin.class);
Index: trunk/src/swt/org/pathvisio/visualization/colorset/ColorSet.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/colorset/ColorSet.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/colorset/ColorSet.java	(revision 1058)
@@ -25,7 +25,7 @@
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.swt.graphics.RGB;
 import org.jdom.Element;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.util.ColorConverter;
@@ -162,7 +162,7 @@
 					return gcRgb;
 				}
 			} catch(Exception e) {
-				Engine.log.error("ColorSetObject " + gc + " could not evaluate data: " + e.getMessage());
+				Logger.log.error("ColorSetObject " + gc + " could not evaluate data: " + e.getMessage());
 			}
 		}
 		return rgb;
@@ -204,16 +204,16 @@
 				else if(name.equals(XML_ELM_COLOR_NDF))
 					cs.setColor(ID_COLOR_NO_DATA_FOUND, ColorConverter.parseColorElement(elm));
 			} catch(Exception ex) {
-				Engine.log.error("Unable to parse colorset xml", ex);
+				Logger.log.error("Unable to parse colorset xml", ex);
 			}
 		}
 		return cs;
 	}
 			
 	static void printParseError(String criterion, Exception e) {
-		Engine.log.error("Unable to parse colorset data stored in " +
+		Logger.log.error("Unable to parse colorset data stored in " +
 				"expression database: " + criterion, e);
-		MessageDialog.openWarning(SwtEngine.getWindow().getShell(), 
+		MessageDialog.openWarning(SwtEngine.getCurrent().getWindow().getShell(), 
 					"Warning", "Unable to parse the colorset data in this expression dataset");
 	}
 	
Index: trunk/src/swt/org/pathvisio/visualization/colorset/ColorGradient.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/colorset/ColorGradient.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/colorset/ColorGradient.java	(revision 1058)
@@ -46,7 +46,7 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.jdom.Element;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.ColorConverter;
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.util.swt.TableColumnResizer;
@@ -153,7 +153,7 @@
 		try {
 			rgb = new Color((int)red, (int)green, (int)blue);
 		} catch (Exception e) { 
-			Engine.log.error("GmmlColorGradient:getColor: " + 
+			Logger.log.error("GmmlColorGradient:getColor: " + 
 					red + "," + green + "," +blue + ", for value " + value, e);
 		}
 		return rgb;
Index: trunk/src/swt/org/pathvisio/visualization/colorset/ColorCriterion.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/colorset/ColorCriterion.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/colorset/ColorCriterion.java	(revision 1058)
@@ -32,7 +32,7 @@
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Text;
 import org.jdom.Element;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.ColorConverter;
 import org.pathvisio.util.swt.SwtUtils;
 
@@ -79,7 +79,7 @@
 			Element ce = xml.getChild(XML_ELM_COLOR);
 			if(ce != null) color = ColorConverter.parseColorElement(ce);
 		} catch(Exception e) {
-			Engine.log.error("Unable to load ColorCriterion", e);
+			Logger.log.error("Unable to load ColorCriterion", e);
 		}
 	}
 	
Index: trunk/src/swt/org/pathvisio/visualization/colorset/Criterion.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/colorset/Criterion.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/colorset/Criterion.java	(revision 1058)
@@ -19,9 +19,9 @@
 import java.util.HashMap;
 
 import org.eclipse.swt.widgets.Composite;
-import org.pathvisio.Engine;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gex.Sample;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.visualization.VisualizationManager;
 import org.pathvisio.visualization.VisualizationManager.VisualizationEvent;
 
@@ -455,50 +455,50 @@
 		{
 			for (int i = 0; i < level; ++i)
 			{
-				Engine.log.trace ("--- ");
+				Logger.log.trace ("--- ");
 			}
 			switch (type)
 			{
 			case Token.TOKEN_AND:
-				Engine.log.trace("AND");
+				Logger.log.trace("AND");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_OR:
-				Engine.log.trace("OR");
+				Logger.log.trace("OR");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_LE:
-				Engine.log.trace("<=");
+				Logger.log.trace("<=");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_LT:
-				Engine.log.trace("<");
+				Logger.log.trace("<");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_GT:
-				Engine.log.trace(">");
+				Logger.log.trace(">");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_GE:
-				Engine.log.trace(">=");
+				Logger.log.trace(">=");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_EQ:
-				Engine.log.trace("=");
+				Logger.log.trace("=");
 				left.printMe(level + 1);
 				right.printMe(level + 1);
 				break;
 			case Token.TOKEN_ID:
-				Engine.log.trace("ID: " + symbolValue);
+				Logger.log.trace("ID: " + symbolValue);
 				break;
 			case Token.TOKEN_NUMBER:
-				Engine.log.trace("NUMBER: " + numberValue);
+				Logger.log.trace("NUMBER: " + numberValue);
 				break;
 			}
 		}
Index: trunk/src/swt/org/pathvisio/visualization/VisualizationManager.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/VisualizationManager.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/VisualizationManager.java	(revision 1058)
@@ -49,9 +49,11 @@
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.SelectionBox.SelectionListener;
 
 /**
@@ -62,7 +64,7 @@
 public class VisualizationManager implements ApplicationEventListener, ExpressionDataListener {	
 	static {
 		VisualizationManager vm = new VisualizationManager();
-		Engine.addApplicationEventListener(vm);
+		Engine.getCurrent().addApplicationEventListener(vm);
 		Gex.addListener(vm);
 	}
 	
@@ -160,7 +162,7 @@
 			out.output(xmlDoc, fw);
 			fw.close();
 		} catch(IOException e) {
-			Engine.log.error("Unable to save visualization settings", e);
+			Logger.log.error("Unable to save visualization settings", e);
 		}
 	}
 	
@@ -174,7 +176,7 @@
 				visualizations.add(Visualization.fromXML((Element) o));				
 			}
 		} catch(Exception e) {
-			Engine.log.error("Unable to load visualization settinsg", e);
+			Logger.log.error("Unable to load visualization settinsg", e);
 		}
 	}
 	
@@ -204,7 +206,7 @@
 	}
 	
 	static File getGenericFile() {
-		return new File(SwtEngine.getApplicationDir(), FILENAME_GENERIC);
+		return new File(SwtEngine.getCurrent().getApplicationDir(), FILENAME_GENERIC);
 	}
 	
 	static VisComboItem visComboItem = new VisComboItem("VisualizationCombo");
@@ -282,7 +284,9 @@
 		}
 	}
 	
-	static class VisualizationPanel extends ScrolledComposite implements SelectionListener, VisualizationListener {
+	static class VisualizationPanel extends ScrolledComposite implements SelectionListener, 
+									VisualizationListener, 
+									ApplicationEventListener {
 		Visualization vis;
 		Composite contents;
 		Set<Graphics> input;
@@ -290,7 +294,13 @@
 		public VisualizationPanel(Composite parent, int style) {
 			super(parent, style);
 			createContents();
-			SelectionBox.addListener(this);
+			
+			Engine.getCurrent().addApplicationEventListener(this);
+			VPathway vp = Engine.getCurrent().getActiveVPathway();
+			if(vp != null) {
+				vp.addSelectionListener(this);
+			}
+			
 			VisualizationManager.addListener(this);
 			input = new LinkedHashSet<Graphics>();
 		}
@@ -338,7 +348,7 @@
 			layout(true, true);
 		}
 
-		public void drawingEvent(SelectionBox.SelectionEvent e) {
+		public void selectionEvent(SelectionBox.SelectionEvent e) {
 			switch(e.type) {
 			case SelectionBox.SelectionEvent.OBJECT_ADDED:
 				if(e.affectedObject instanceof Graphics) 
@@ -361,6 +371,12 @@
 				fillContents();
 			}
 			
+		}
+
+		public void applicationEvent(ApplicationEvent e) {
+			if(e.type == ApplicationEvent.VPATHWAY_CREATED) {
+				((VPathway)e.source).addSelectionListener(this);
+			}
 		}		
 	}
 	
Index: trunk/src/swt/org/pathvisio/visualization/LegendPanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/visualization/LegendPanel.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/visualization/LegendPanel.java	(revision 1058)
@@ -728,7 +728,7 @@
 				gd.heightHint = computeSize(SWT.DEFAULT, SWT.DEFAULT).y;
 			}
 			layout();
-			switchLabel.setImage(SwtEngine.getImageRegistry().get(
+			switchLabel.setImage(SwtEngine.getCurrent().getImageRegistry().get(
 					expanded ? "tree.expanded" : "tree.collapsed"));
 		}
 		
Index: trunk/src/swt/org/pathvisio/biopax/gui/BiopaxDialog.java
===================================================================
--- trunk/src/swt/org/pathvisio/biopax/gui/BiopaxDialog.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/biopax/gui/BiopaxDialog.java	(revision 1058)
@@ -25,8 +25,8 @@
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.biopax.BiopaxManager;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
 
@@ -57,7 +57,7 @@
 					text.setText(biopax.getXml());
 				} catch(ConverterException e) {
 					text.setText(e.toString());
-					Engine.log.error("Unable to set BioPAX text", e);
+					Logger.log.error("Unable to set BioPAX text", e);
 				}
 			} else {
 				text.setText("");
Index: trunk/src/swt/org/pathvisio/biopax/gui/BiopaxCellEditor.java
===================================================================
--- trunk/src/swt/org/pathvisio/biopax/gui/BiopaxCellEditor.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/biopax/gui/BiopaxCellEditor.java	(revision 1058)
@@ -35,7 +35,7 @@
 	}
 
 	protected Object openDialogBox(Control cellEditorWindow) {
-		BiopaxManager bpm = new BiopaxManager(Engine.getActivePathway().getBiopax().getBiopax());
+		BiopaxManager bpm = new BiopaxManager(Engine.getCurrent().getActivePathway().getBiopax().getBiopax());
 		BiopaxRefDialog d = new BiopaxRefDialog(cellEditorWindow.getShell(), bpm, (String)getValue());
 		d.open();
 		return d.getRef();
Index: trunk/src/swt/org/pathvisio/biopax/BiopaxManager.java
===================================================================
--- trunk/src/swt/org/pathvisio/biopax/BiopaxManager.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/biopax/BiopaxManager.java	(revision 1058)
@@ -29,7 +29,7 @@
 import org.jdom.input.SAXBuilder;
 import org.jdom.output.Format;
 import org.jdom.output.XMLOutputter;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.util.Utils;
 
@@ -46,7 +46,7 @@
 			model = bpf.createModel();
 		} else { //Parse jdom
 			String bpText = new XMLOutputter(Format.getPrettyFormat()).outputString(doc);
-			Engine.log.info(bpText);
+			Logger.log.info(bpText);
 			model = modelFromString(bpText);
 		}
 	}
Index: trunk/src/swt/org/pathvisio/gui/swt/AboutDlg.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/AboutDlg.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/AboutDlg.java	(revision 1058)
@@ -64,7 +64,7 @@
 		lbl.setLayoutData (gd);
 		
 		lbl = new Label (shell, SWT.NULL);
-		lbl.setImage (SwtEngine.getImageRegistry().get("about.logo"));
+		lbl.setImage (SwtEngine.getCurrent().getImageRegistry().get("about.logo"));
 
 		lbl = new Label (shell, SWT.NULL);
 		lbl.setText ("R.M.H. Besseling\nS.P.M.Crijns\nI.Kaashoek\nM.M.Palm\n" +
Index: trunk/src/swt/org/pathvisio/gui/swt/NewElementAction.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/NewElementAction.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/NewElementAction.java	(revision 1058)
@@ -52,86 +52,86 @@
 		switch(element) {
 		case VPathway.NEWLINE: 
 			toolTipText = "Draw new line";
-			imageURL = Engine.getResourceURL("icons/newline.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newline.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLINEARROW:
 			toolTipText = "Draw new arrow";
-			imageURL = Engine.getResourceURL("icons/newarrow.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newarrow.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLINEDASHED:
 			toolTipText = "Draw new dashed line";
-			imageURL = Engine.getResourceURL("icons/newdashedline.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newdashedline.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLINEDASHEDARROW:
 			toolTipText = "Draw new dashed arrow";
-			imageURL = Engine.getResourceURL("icons/newdashedarrow.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newdashedarrow.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLABEL:
 			toolTipText = "Draw new label";
-			imageURL = Engine.getResourceURL("icons/newlabel.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newlabel.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWARC:
 			toolTipText = "Draw new arc";
-			imageURL = Engine.getResourceURL("icons/newarc.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newarc.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWBRACE:
 			toolTipText = "Draw new brace";
-			imageURL = Engine.getResourceURL("icons/newbrace.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newbrace.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWGENEPRODUCT:
 			toolTipText = "Draw new geneproduct";
-			imageURL = Engine.getResourceURL("icons/newgeneproduct.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newgeneproduct.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWRECTANGLE:
-			imageURL = Engine.getResourceURL("icons/newrectangle.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newrectangle.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWOVAL:
 			toolTipText = "Draw new oval";
-			imageURL = Engine.getResourceURL("icons/newoval.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newoval.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWTBAR:
 			toolTipText = "Draw new TBar";
-			imageURL = Engine.getResourceURL("icons/newtbar.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newtbar.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWRECEPTORROUND:
 			toolTipText = "Draw new round receptor";
-			imageURL = Engine.getResourceURL("icons/newreceptorround.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newreceptorround.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWRECEPTORSQUARE:
 			toolTipText = "Draw new square receptor";
-			imageURL = Engine.getResourceURL("icons/newreceptorsquare.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newreceptorsquare.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLIGANDROUND:
 			toolTipText = "Draw new round ligand";
-			imageURL = Engine.getResourceURL("icons/newligandround.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newligandround.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLIGANDSQUARE:
 			toolTipText = "Draw new square ligand";
-			imageURL = Engine.getResourceURL("icons/newligandsquare.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newligandsquare.gif");
 			setChecked(false);
 			break;
 		case VPathway.NEWLINEMENU:
 			setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINEMENU));
-			imageURL = Engine.getResourceURL("icons/newlinemenu.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newlinemenu.gif");
 			toolTipText = "Draw new line or arrow";
 			break;
 		case VPathway.NEWLINESHAPEMENU:
 			setMenuCreator(new NewItemMenuCreator(VPathway.NEWLINESHAPEMENU));
-			imageURL = Engine.getResourceURL("icons/newlineshapemenu.gif");
+			imageURL = Engine.getCurrent().getResourceURL("icons/newlineshapemenu.gif");
 			toolTipText = "Draw new ligand or receptor";
 			break;
 		}
@@ -143,13 +143,13 @@
 	public void run () {
 		if(isChecked())
 		{
-			SwtEngine.getWindow().deselectNewItemActions();
+			SwtEngine.getCurrent().getWindow().deselectNewItemActions();
 			setChecked(true);
-			Engine.getActiveVPathway().setNewGraphics(element);
+			Engine.getCurrent().getActiveVPathway().setNewGraphics(element);
 		}
 		else
 		{	
-			Engine.getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
+			Engine.getCurrent().getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
 		}
 	}
 
Index: trunk/src/swt/org/pathvisio/gui/swt/GdbCellEditor.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/GdbCellEditor.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/GdbCellEditor.java	(revision 1058)
@@ -34,9 +34,9 @@
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Layout;
-import org.pathvisio.Engine;
 import org.pathvisio.data.DataSources;
 import org.pathvisio.data.Gdb;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.PropertyPanel.AutoFillData;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PropertyType;
@@ -217,7 +217,7 @@
 				sugg.add(label);
 			}
 		} catch (SQLException e) {
-			Engine.log.error("Unable to query suggestions", e);
+			Logger.log.error("Unable to query suggestions", e);
 		}
 		if(limit > NO_LIMIT && sugg.size() == limit) sugg.add("...results limited to " + limit);
 		return sugg.toArray(new String[sugg.size()]);
Index: trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1058)
@@ -34,6 +34,7 @@
 import org.pathvisio.Globals;
 import org.pathvisio.data.DBConnector;
 import org.pathvisio.data.DBConnectorSwt;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.debug.Sleak;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
@@ -57,18 +58,24 @@
 	 * and handle gpml related actions
 	 */
 	
-	private static MainWindow window;
+	private MainWindow window;
 	
-	private static ImageRegistry imageRegistry;
+	private ImageRegistry imageRegistry;
 	
-	private static File DIR_APPLICATION;
-	private static File DIR_DATA;
-	static boolean USE_R;
+	private File DIR_APPLICATION;
+	private File DIR_DATA;
+	boolean USE_R;
 		
+	private static SwtEngine current;
+	public static SwtEngine getCurrent() {
+		if(current == null) current = new SwtEngine();
+		return current;
+	}
+	
 	/**
 	 * Get the {@link ApplicationWindow}, the UI of the program
 	 */
-	public static MainWindow getWindow() {
+	public MainWindow getWindow() {
 		if(window == null) window = new MainWindow();
 		return window;
 	}
@@ -79,17 +86,17 @@
 	   whenever the filename of the current document has changed,
 	   or the change status has changed.
 	*/
-	public static void updateTitle()
+	public void updateTitle()
 	{
-		if (Engine.getActivePathway() == null)
+		if (Engine.getCurrent().getActivePathway() == null)
 		{
 			window.getShell().setText(Globals.APPLICATION_VERSION_NAME);
 		}
 		else
 		{
 			// get filename, or (New Pathway) if current pathway hasn't been opened yet
-			String fname = (Engine.getActivePathway().getSourceFile() == null) ? "(New Pathway)" :
-				Engine.getActivePathway().getSourceFile().getName();
+			String fname = (Engine.getCurrent().getActivePathway().getSourceFile() == null) ? "(New Pathway)" :
+				Engine.getCurrent().getActivePathway().getSourceFile().getName();
 			window.getShell().setText(
 				"*" + fname + " - " +
 				Globals.APPLICATION_VERSION_NAME
@@ -103,7 +110,7 @@
 	 * (to check for undisposed widgets)
 	 * @return The {@link MainWindow} monitored by Sleak.java
 	 */
-	public static MainWindow getSleakWindow() {
+	public MainWindow getSleakWindow() {
 		//<DEBUG to find undisposed system resources>
 		DeviceData data = new DeviceData();
 		data.tracking = true;
@@ -117,7 +124,7 @@
 		//</DEBUG>
 	}
 	
-	private static VPathwayWrapper createWrapper() {
+	private VPathwayWrapper createWrapper() {
 		if(window != null) {
 //			return new VPathwaySwtAwt(window.sc, SWT.NO_BACKGROUND);
 			return new VPathwaySwtAwt(window.swingPathwayComposite.getScrollPane(), window.getShell().getDisplay());
@@ -125,10 +132,10 @@
 		return null;
 	}
 		
-	public static void newPathway() {
+	public void newPathway() {
 		if(canDiscardPathway()) {
 			VPathwayWrapper w = createWrapper();
-			Engine.newPathway(w);
+			Engine.getCurrent().newPathway(w);
 			updateTitle();
 		}
 	}
@@ -138,10 +145,10 @@
 	   Then the pathways is saved to that file.
 	   returns false if the action was cancelled by the user
 	 */
-	public static boolean savePathwayAs()
+	public boolean savePathwayAs()
 	{
-		Pathway pathway = Engine.getActivePathway();
-		VPathway vPathway = Engine.getActiveVPathway();
+		Pathway pathway = Engine.getCurrent().getActivePathway();
+		VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 		
 		// Check if a gpml pathway is loaded
 		if (pathway != null)
@@ -183,7 +190,7 @@
 				// Overwrite the existing xml file
 				try
 				{
-					Engine.savePathway(checkFile);
+					Engine.getCurrent().savePathway(checkFile);
 					updateTitle();
 					// Set zoom back
 					vPathway.setPctZoom(usedZoom);
@@ -195,7 +202,7 @@
 					MessageDialog.openError (window.getShell(), "Error", 
 											 "Error: " + msg + "\n\n" + 
 											 "See the error log for details.");
-					Engine.log.error(msg, e);
+					Logger.log.error(msg, e);
 				}
 			}
 		}
@@ -216,11 +223,11 @@
 	   
 	   TODO: Currently always asks, even if there were no changes since last save.
 	 */
-	static public boolean canDiscardPathway()
+	public boolean canDiscardPathway()
 	{
-		Pathway pathway = Engine.getActivePathway();
-		// checking not necessary if there is no pathway.
-		if (pathway == null) return true;
+		Pathway pathway = Engine.getCurrent().getActivePathway();
+		// checking not necessary if there is no pathway or if pathway is not changed.
+		if (pathway == null || !pathway.hasChanged()) return true;
 		String[] opts =
 		{
 			IDialogConstants.YES_LABEL,
@@ -255,7 +262,7 @@
 	   if it takes a long time.  Shows an error message and returns
 	   false if it somehow failed to open the web page.
 	*/
-	public static boolean openWebPage(String url, String progressMsg, String errMsg) {
+	public boolean openWebPage(String url, String progressMsg, String errMsg) {
 		Shell shell = getWindow().getShell();
 		if(shell == null || shell.isDisposed()) return false;
 		
@@ -277,7 +284,7 @@
 		} catch (InterruptedException ignore) { return false; }
 	}
 	
-	public static void doOpenWebPage(String url) throws BrowserLaunchingInitializingException, BrowserLaunchingExecutionException, UnsupportedOperatingSystemException {
+	public void doOpenWebPage(String url) throws BrowserLaunchingInitializingException, BrowserLaunchingExecutionException, UnsupportedOperatingSystemException {
 		BrowserLauncher bl = new BrowserLauncher(null);
 		bl.openURLinBrowser(url);
 	}
@@ -286,13 +293,13 @@
 	 Open a pathway from a gpml file
 	 Asks the user if the old pathway should be discarded, if necessary
 	 */
-	public static void openPathway(String pwf)
+	public void openPathway(String pwf)
 	{
 		if (canDiscardPathway())
 		{
 			try { 
 				VPathwayWrapper w = createWrapper();
-				Engine.openPathway(pwf, w);
+				Engine.getCurrent().openPathway(pwf, w);
 				updateTitle();
 			} catch(ConverterException e) {		
 				if (e.getMessage().contains("Cannot find the declaration of element 'Pathway'"))
@@ -306,12 +313,12 @@
 						"Non-standard pathways need to be recreated or upgraded. " +
 						"Please contact the authors at " + Globals.DEVELOPER_EMAIL + " if you need help with this.\n" +
 						"\nSee error log for details");
-					Engine.log.error("Unable to open Gpml file", e);
+					Logger.log.error("Unable to open Gpml file", e);
 				}
 				else
 				{
 					//TODO: refactor these error messages,
-					// so it's not redundant with SwingEngine.
+					// so it's not redundant with SwingEngine
 					MessageDialog.openError(
 						getWindow().getShell(), 
 						"Unable to open Gpml file",
@@ -320,7 +327,7 @@
 						"Pathway in the Gpml format. If the problem persists, please contact " +
 						"the developers at " + Globals.DEVELOPER_EMAIL + ". Please include the " +
 						"file you're trying to open and the error log.");
-					Engine.log.error("Unable to open Gpml file", e);
+					Logger.log.error("Unable to open Gpml file", e);
 				}
 			}
 		}
@@ -329,7 +336,7 @@
 	/**
 	 * Get the {@link ImageRegistry} containing commonly used images
 	 */
-	public static ImageRegistry getImageRegistry() { 
+	public ImageRegistry getImageRegistry() { 
 		if(imageRegistry == null) imageRegistry = new ImageRegistry();
 		return imageRegistry; 
 	}
@@ -337,12 +344,12 @@
 	/**
 	 * Set the {@link ImageRegistry} containing commonly used images
 	 */
-	public static void setImageRegistry(ImageRegistry _imageRegistry) {
+	public void setImageRegistry(ImageRegistry _imageRegistry) {
 		imageRegistry = _imageRegistry;
 	}
 			
-	public static DBConnectorSwt getSwtDbConnector(int type) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
-		DBConnector dbc = Engine.getDbConnector(type);
+	public DBConnectorSwt getSwtDbConnector(int type) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
+		DBConnector dbc = Engine.getCurrent().getDbConnector(type);
 		if(dbc instanceof DBConnectorSwt) {
 			return (DBConnectorSwt)dbc;
 		} else {
@@ -352,7 +359,7 @@
 	/**
 	 * Get the working directory of this application
 	 */
-	public static File getApplicationDir() {
+	public File getApplicationDir() {
 		if(DIR_APPLICATION == null) {
 			DIR_APPLICATION = new File(System.getProperty("user.home"), "." + Globals.APPLICATION_NAME);
 			if(!DIR_APPLICATION.exists()) DIR_APPLICATION.mkdir();
@@ -360,7 +367,7 @@
 		return DIR_APPLICATION;
 	}
 		
-	public static File getDataDir() {
+	public File getDataDir() {
 		if(DIR_DATA == null) {
 			DIR_DATA = new File(System.getProperty("user.home"), Globals.APPLICATION_NAME + "-Data");
 			if(!DIR_DATA.exists()) DIR_DATA.mkdir();
@@ -368,7 +375,7 @@
 		return DIR_DATA;
 	}
 			
-	public static boolean isUseR() { return USE_R; }
+	public boolean isUseR() { return USE_R; }
 	
 	/**
 	   save the current pathway
@@ -377,10 +384,10 @@
 	   Calls savePathwayAs if the filename of the current pathway is unknown,
 	   so that the user can set a location for this pathway
 	*/
-		public static boolean savePathway()
+		public boolean savePathway()
 		{
-			Pathway pathway = Engine.getActivePathway();
-			VPathway vPathway = Engine.getActiveVPathway();
+			Pathway pathway = Engine.getCurrent().getActivePathway();
+			VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 			
 			boolean result = true;
 			
@@ -394,7 +401,7 @@
 			{
 				try
 				{
-					Engine.savePathway();
+					Engine.getCurrent().savePathway(pathway.getSourceFile());
 				}
 				catch (ConverterException e)
 				{
@@ -403,7 +410,7 @@
 					MessageDialog.openError (window.getShell(), "Error", 
 											 "Error: " + msg + "\n\n" + 
 											 "See the error log for details.");
-					Engine.log.error(msg, e);
+					Logger.log.error(msg, e);
 				}
 			}
 			else
Index: trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 1058)
@@ -42,7 +42,9 @@
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
+import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
+import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.biopax.gui.BiopaxCellEditor;
 import org.pathvisio.data.DataSources;
 import org.pathvisio.model.DataNodeType;
@@ -62,7 +64,7 @@
 import org.pathvisio.util.swt.SwtUtils;
 import org.pathvisio.util.swt.TableColumnResizer;
 import org.pathvisio.view.Graphics;
-import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.SelectionBox.SelectionEvent;
 import org.pathvisio.view.SelectionBox.SelectionListener;
 
@@ -70,7 +72,7 @@
  * This class implements the sidepanel where you can edit graphical properties
  * of each object on the pathway.
  */
-public class PropertyPanel extends Composite implements PathwayListener, SelectionListener {
+public class PropertyPanel extends Composite implements PathwayListener, SelectionListener, ApplicationEventListener {
 	public TableViewer tableViewer;
 	CellEditor[] cellEditors = new CellEditor[2];
 	TextCellEditor textEditor;
@@ -89,7 +91,7 @@
 		public boolean equals(Object o) { return false; }
 		public String toString() { return "different values"; }
 	};
-
+	
 	/**
 	 * Add a {@link PathwayElement} to the list of objects of which 
 	 * the properties are displayed
@@ -239,7 +241,9 @@
 		attributes = new ArrayList<PropertyType>();
 		tableViewer.setInput(attributes);
 		
-		SelectionBox.addListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
+		VPathway vp = Engine.getCurrent().getActiveVPathway();
+		if(vp != null) vp.addSelectionListener(this);
 	}
 	
 	/**
@@ -479,7 +483,7 @@
 				o.setProperty(key, value);
 			}
 			tableViewer.refresh();
-			Engine.getActiveVPathway().redrawDirtyRect();
+			Engine.getCurrent().getActiveVPathway().redrawDirtyRect();
 		}
 	};
 	
@@ -595,7 +599,7 @@
 //		abstract CellEditor getCellEditor()
 //	}
 	
-	public void drawingEvent(SelectionEvent e) {
+	public void selectionEvent(SelectionEvent e) {
 		switch(e.type) {
 		case SelectionEvent.OBJECT_ADDED:
 			if(e.affectedObject instanceof Graphics)
@@ -652,5 +656,11 @@
 		protected void guessData(PathwayElement o) {
 		}
 	}
+
+	public void applicationEvent(ApplicationEvent e) {
+		if(e.type == ApplicationEvent.VPATHWAY_CREATED) {
+			((VPathway)e.getSource()).addSelectionListener(this);
+		}
+	}
 }
 
Index: trunk/src/swt/org/pathvisio/gui/swt/SidePanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/SidePanel.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/SidePanel.java	(revision 1058)
@@ -29,7 +29,6 @@
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Sash;
 import org.pathvisio.preferences.GlobalPreference;
-import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 
 /**
  * This class can be extended to create a sidepanel with minimize button
@@ -88,16 +87,16 @@
 					}
 				}
 			});
-			minButton.setImage(SwtEngine.getImageRegistry().get("sidepanel.minimize"));
+			minButton.setImage(SwtEngine.getCurrent().getImageRegistry().get("sidepanel.minimize"));
 			final Button hideButton = new Button(buttonBar, SWT.PUSH);
 			hideButton.setToolTipText("Close this sidepanel (use view menu to open again)");
 			hideButton.addSelectionListener(new SelectionAdapter() {
 				public void widgetSelected(SelectionEvent e) {
 					hide();
-					SwtEngine.getWindow().showRightPanelAction.setChecked(false);
+					SwtEngine.getCurrent().getWindow().showRightPanelAction.setChecked(false);
 				}
 			});
-			hideButton.setImage(SwtEngine.getImageRegistry().get("sidepanel.hide"));
+			hideButton.setImage(SwtEngine.getCurrent().getImageRegistry().get("sidepanel.hide"));
 			
 			GridData buttonGrid = new GridData();
 			buttonGrid.widthHint = 12;
Index: trunk/src/swt/org/pathvisio/gui/swt/StackActions.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/StackActions.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/StackActions.java	(revision 1058)
@@ -29,10 +29,10 @@
 		window = w;
 		type = t;
 		setToolTipText (type.getDescription());
-		setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL(type.getIcon())));
+		setImageDescriptor(ImageDescriptor.createFromURL(Engine.getCurrent().getResourceURL(type.getIcon())));
 	}
 	
 	public void run () {
-		Engine.getActiveVPathway().stackSelected(type);
+		Engine.getCurrent().getActiveVPathway().stackSelected(type);
 	}
 }
\ No newline at end of file
Index: trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java	(revision 1058)
@@ -46,9 +46,9 @@
 import org.pathvisio.data.Gex.ExpressionDataEvent;
 import org.pathvisio.data.Gex.ExpressionDataListener;
 import org.pathvisio.data.GexSwt.ProgressKeeperDialog;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.awt.VPathwaySwingComposite;
 import org.pathvisio.preferences.GlobalPreference;
-import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 import org.pathvisio.search.PathwaySearchComposite;
 import org.pathvisio.view.AlignType;
 import org.pathvisio.view.GeneProduct;
@@ -116,7 +116,7 @@
 		
 		public void run () {			
 			try {
-				DBConnectorSwt dbcon = SwtEngine.getSwtDbConnector(DBConnector.TYPE_GDB);
+				DBConnectorSwt dbcon = SwtEngine.getCurrent().getSwtDbConnector(DBConnector.TYPE_GDB);
 				String dbName = dbcon.openChooseDbDialog(getShell());
 				
 				if(dbName == null) return;
@@ -129,7 +129,7 @@
 				MessageDialog.openError (window.getShell(), "Error", 
 						"Error: " + msg + "\n\n" + 
 						"See the error log for details.");
-				Engine.log.error(msg, e);
+				Logger.log.error(msg, e);
 			}
 		}
 	}
@@ -147,7 +147,7 @@
 				((ActionContributionItem)items[i]).getAction().setChecked(false);
 			}
 		}
-		Engine.getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
+		Engine.getCurrent().getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
 	}
 	
 	/**
@@ -174,9 +174,9 @@
 	 */
 	private void cacheExpressionData()
 	{
-		if(Engine.isDrawingOpen())
+		if(Engine.getCurrent().isDrawingOpen())
 		{
-			VPathway drawing = Engine.getActiveVPathway();
+			VPathway drawing = Engine.getCurrent().getActiveVPathway();
 			//Check for neccesary connections
 			if(Gex.isConnected() && Gdb.isConnected())
 			{
@@ -189,7 +189,7 @@
 					MessageDialog.openError (getShell(), "Error", 
 							"Error: " + msg + "\n\n" + 
 							"See the error log for details.");
-					Engine.log.error(msg, e);
+					Logger.log.error(msg, e);
 				}
 			}
 		}
@@ -209,7 +209,7 @@
 				((ActionContributionItem)items[i]).getAction().setChecked(false);
 			}
 		}
-		Engine.getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
+		Engine.getCurrent().getActiveVPathway().setNewGraphics(VPathway.NEWNONE);
 	}
 
 	// Elements of the coolbar
@@ -350,7 +350,7 @@
 		
 		GuiMain.loadImages(shell.getDisplay());
 		
-		shell.setImage(SwtEngine.getImageRegistry().get("shell.icon"));
+		shell.setImage(SwtEngine.getCurrent().getImageRegistry().get("shell.icon"));
 		
 		Composite viewComposite = new Composite(parent, SWT.NULL);
 		viewComposite.setLayout(new FillLayout());
@@ -379,7 +379,7 @@
 		
 		setStatus("Using Gene Database: '" + GlobalPreference.DB_GDB_CURRENT.getValue() + "'");
 
-		SwtEngine.updateTitle();
+		SwtEngine.getCurrent().updateTitle();
 		
 		return parent;
 	}
@@ -393,7 +393,7 @@
 	*/
 	protected boolean canHandleShellCloseEvent()
 	{
-		return SwtEngine.canDiscardPathway();
+		return SwtEngine.getCurrent().canDiscardPathway();
 	}
 	
 	protected MenuManager menuManager = null;
@@ -410,7 +410,7 @@
 		
 	public boolean close() {
 		ApplicationEvent e = new ApplicationEvent(this, ApplicationEvent.APPLICATION_CLOSE);
-		Engine.fireApplicationEvent(e);
+		Engine.getCurrent().fireApplicationEvent(e);
 		if(e.doit) {
 			return super.close();
 		}
@@ -448,7 +448,7 @@
 		switch(e.type) {
 		case ApplicationEvent.VPATHWAY_NEW:
 		case ApplicationEvent.VPATHWAY_OPENED:
-			Engine.getActiveVPathway().addVPathwayListener(this);
+			Engine.getCurrent().getActiveVPathway().addVPathwayListener(this);
 		}
 	}
 
Index: trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1058)
@@ -34,6 +34,7 @@
 import org.pathvisio.Globals;
 import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.biopax.gui.BiopaxDialog;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
 import org.pathvisio.model.PathwayExporter;
@@ -58,9 +59,9 @@
 		}
 		public void run() 
 		{
-			if (Engine.getActivePathway() != null)
+			if (Engine.getCurrent().getActivePathway() != null)
 			{
-				Engine.getActivePathway().undo();
+				Engine.getCurrent().getActivePathway().undo();
 			}
 		}
 	}
@@ -77,11 +78,11 @@
 			setText ("&New pathway@Ctrl+N");
 			setToolTipText ("Create new pathway");
 			setImageDescriptor(ImageDescriptor.createFromURL(
-					Engine.getResourceURL("icons/new.gif")));
+					Engine.getCurrent().getResourceURL("icons/new.gif")));
 		}
 		public void run ()
 		{			
-			SwtEngine.newPathway();
+			SwtEngine.getCurrent().newPathway();
 		}	
 	}
 	
@@ -101,24 +102,24 @@
 		public void run () 
 		{
 			//TODO: move to engine, merge with "save"
-			VPathway drawing = Engine.getActiveVPathway();
-			Pathway gmmlData = Engine.getActivePathway();
+			VPathway drawing = Engine.getCurrent().getActiveVPathway();
+			Pathway gmmlData = Engine.getCurrent().getActivePathway();
 			// Check if a gpml pathway is loaded
 			if (drawing != null)
 			{
 				FileDialog fd = new FileDialog(window.getShell(), SWT.SAVE);
 				fd.setText("Save");
-				fd.setFilterExtensions(new String[] {"*." + Engine.SVG_FILE_EXTENSION, "*.*"});
-				fd.setFilterNames(new String[] {Engine.SVG_FILTER_NAME, "All files (*.*)"});
+				fd.setFilterExtensions(new String[] {"*." + Engine.getCurrent().SVG_FILE_EXTENSION, "*.*"});
+				fd.setFilterNames(new String[] {Engine.getCurrent().SVG_FILTER_NAME, "All files (*.*)"});
 				
 				File xmlFile = gmmlData.getSourceFile();
 				if(xmlFile != null) {
 					String name = xmlFile.getName();
-					if (name.endsWith("." + Engine.PATHWAY_FILE_EXTENSION))
+					if (name.endsWith("." + Engine.getCurrent().PATHWAY_FILE_EXTENSION))
 					{
 						name = name.substring(0, name.length() - 
-							Engine.PATHWAY_FILE_EXTENSION.length()) +
-							Engine.SVG_FILE_EXTENSION;
+							Engine.getCurrent().PATHWAY_FILE_EXTENSION.length()) +
+							Engine.getCurrent().SVG_FILE_EXTENSION;
 					}
 					fd.setFileName(name);
 					fd.setFilterPath(xmlFile.getPath());
@@ -131,8 +132,8 @@
 				if(fileName == null) return;
 				
 				// Append .svg extension if not already present
-				if(!fileName.endsWith("." + Engine.SVG_FILE_EXTENSION)) 
-					fileName += "." + Engine.SVG_FILE_EXTENSION;
+				if(!fileName.endsWith("." + Engine.getCurrent().SVG_FILE_EXTENSION)) 
+					fileName += "." + Engine.getCurrent().SVG_FILE_EXTENSION;
 				
 				File checkFile = new File(fileName);
 				boolean confirmed = true;
@@ -155,7 +156,7 @@
 						MessageDialog.openError (window.getShell(), "Error", 
 								"Error: " + msg + "\n\n" + 
 								"See the error log for details.");
-						Engine.log.error(msg, e);
+						Logger.log.error(msg, e);
 					}
 				}
 			}
@@ -178,7 +179,7 @@
 			window = w;
 			setText ("&Open pathway@Ctrl+O");
 			setToolTipText ("Open pathway");
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/open.gif")));
+			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getCurrent().getResourceURL("icons/open.gif")));
 		}
 		public void run () 
 		{
@@ -186,13 +187,13 @@
 			fd.setText("Open");
 			String pwpath = SwtPreference.SWT_DIR_PWFILES.getValue();
 			fd.setFilterPath(pwpath);
-			fd.setFilterExtensions(new String[] {"*." + Engine.PATHWAY_FILE_EXTENSION, "*.*"});
-			fd.setFilterNames(new String[] {Engine.PATHWAY_FILTER_NAME, "All files (*.*)"});
+			fd.setFilterExtensions(new String[] {"*." + Engine.getCurrent().PATHWAY_FILE_EXTENSION, "*.*"});
+			fd.setFilterNames(new String[] {Engine.getCurrent().PATHWAY_FILTER_NAME, "All files (*.*)"});
 	        String fnMapp = fd.open();
 	        // Only open pathway if user selected a file
 	        
 	        if(fnMapp != null) { 
-	        	SwtEngine.openPathway(fnMapp); 
+	        	SwtEngine.getCurrent().openPathway(fnMapp); 
 	        }
 		}
 	}
@@ -211,18 +212,18 @@
 		}
 		public void run () 
 		{
-			if(SwtEngine.canDiscardPathway())
+			if(SwtEngine.getCurrent().canDiscardPathway())
 			{
 				FileDialog fd = new FileDialog(window.getShell(), SWT.OPEN);
 				fd.setText("Open");
 				fd.setFilterPath(SwtPreference.SWT_DIR_PWFILES.getValue());
-				fd.setFilterExtensions(new String[] {"*." + Engine.GENMAPP_FILE_EXTENSION, "*.*"});
-				fd.setFilterNames(new String[] {Engine.GENMAPP_FILTER_NAME, "All files (*.*)"});
+				fd.setFilterExtensions(new String[] {"*." + Engine.getCurrent().GENMAPP_FILE_EXTENSION, "*.*"});
+				fd.setFilterNames(new String[] {Engine.getCurrent().GENMAPP_FILTER_NAME, "All files (*.*)"});
 	        	String fnMapp = fd.open();
 	        	// Only open pathway if user selected a file
 	        	
 	        	if(fnMapp != null) { 
-	        		SwtEngine.openPathway(fnMapp); 
+	        		SwtEngine.getCurrent().openPathway(fnMapp); 
 	        	}
 	        }
 		}
@@ -243,7 +244,7 @@
 		
 		public void run () 
 		{
-			SwtEngine.savePathwayAs();
+			SwtEngine.getCurrent().savePathwayAs();
 		}
 	}
 
@@ -262,8 +263,8 @@
 		}
 		public void run () {
 			//TODO: move to engine, merge with "save" or "saveAs"
-			VPathway drawing = Engine.getActiveVPathway();
-			Pathway gmmlData = Engine.getActivePathway();
+			VPathway drawing = Engine.getCurrent().getActiveVPathway();
+			Pathway gmmlData = Engine.getCurrent().getActivePathway();
 			// Check if a gpml pathway is loaded
 			if (drawing != null)
 			{
@@ -280,7 +281,7 @@
 				}
 				
 				ArrayList<FileType> fts = new ArrayList<FileType>();
-				HashMap<String, PathwayExporter> exporters = Engine.getPathwayExporters();
+				HashMap<String, PathwayExporter> exporters = Engine.getCurrent().getPathwayExporters();
 								
 				for(String ext : exporters.keySet()) {
 					fts.add(new FileType(
@@ -301,10 +302,10 @@
 				File xmlFile = gmmlData.getSourceFile();
 				if(xmlFile != null) {
 					String name = xmlFile.getName();
-					if (name.endsWith("." + Engine.PATHWAY_FILE_EXTENSION))
+					if (name.endsWith("." + Engine.getCurrent().PATHWAY_FILE_EXTENSION))
 					{
 						name = name.substring(0, name.length() - 
-							Engine.PATHWAY_FILE_EXTENSION.length() - 1);
+							Engine.getCurrent().PATHWAY_FILE_EXTENSION.length() - 1);
 					}
 					fd.setFileName(name);
 					fd.setFilterPath(xmlFile.getPath());
@@ -316,11 +317,11 @@
 				if(fileName == null) return;
 				
 				int dot = fileName.lastIndexOf('.');
-				String ext = Engine.GENMAPP_FILE_EXTENSION;
+				String ext = Engine.getCurrent().GENMAPP_FILE_EXTENSION;
 				if(dot >= 0) {
 					ext = fileName.substring(dot + 1, fileName.length());
 				}
-				PathwayExporter exporter = Engine.getPathwayExporter(ext);
+				PathwayExporter exporter = Engine.getCurrent().getPathwayExporter(ext);
 				
 				if(exporter == null) 
 					MessageDialog.openError (window.getShell(), "Error", 
@@ -348,7 +349,7 @@
 						MessageDialog.openError (window.getShell(), "Error", 
 								"Error: " + msg + "\n\n" + 
 								"See the error log for details.");
-						Engine.log.error(msg, e);
+						Logger.log.error(msg, e);
 					}
 				}
 			}
@@ -374,7 +375,7 @@
 		}
 		public void run () 
 		{
-			if (SwtEngine.canDiscardPathway())
+			if (SwtEngine.getCurrent().canDiscardPathway())
 			{
 				window.close();
 			}
@@ -393,7 +394,7 @@
 		public void run () {
 			PreferenceManager pg = new PreferenceDlg();
 			PreferenceDialog pd = new PreferenceDialog(window.getShell(), pg);
-			pd.setPreferenceStore((SwtPreferences)Engine.getPreferenceCollection());
+			pd.setPreferenceStore((SwtPreferences)Engine.getCurrent().getPreferenceCollection());
 			pd.open();
 		}
 	}
@@ -427,7 +428,7 @@
 			}
 		}
 		public void run () {
-			VPathway drawing = Engine.getActiveVPathway();
+			VPathway drawing = Engine.getCurrent().getActiveVPathway();
 			if (drawing != null)
 			{
 				drawing.setPctZoom(pctZoomFactor);
@@ -472,7 +473,7 @@
 		}
 		public void run ()
 		{
-			SwtEngine.openWebPage(Globals.HELP_URL, "Opening help page in broswer",
+			SwtEngine.getCurrent().openWebPage(Globals.HELP_URL, "Opening help page in broswer",
 						"Unable to open web browser" +
 						"\nYou can open the help page manually:\n" +
 						Globals.HELP_URL);
@@ -490,7 +491,7 @@
 		}
 		public void run()
 		{
-			Engine.getActiveVPathway().copyToClipboard();
+			Engine.getCurrent().getActiveVPathway().copyToClipboard();
 		}
 	}
 
@@ -505,7 +506,7 @@
 		}
 		public void run()
 		{
-			Engine.getActiveVPathway().pasteFromClipboad();
+			Engine.getCurrent().getActiveVPathway().pasteFromClipboad();
 		}
 	}
 	
@@ -520,12 +521,12 @@
 			window = w;
 			setText ("&Save pathway@Ctrl+S");
 			setToolTipText ("Save pathway");
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/save.gif")));
+			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getCurrent().getResourceURL("icons/save.gif")));
 		}
 		
 		public void run ()
 		{
-			SwtEngine.savePathway();
+			SwtEngine.getCurrent().savePathway();
 		}
 	}
 	
@@ -541,7 +542,7 @@
 		
 		public void run () {
 			BiopaxDialog d = new BiopaxDialog(window.getShell());
-			d.setPathway(Engine.getActivePathway());
+			d.setPathway(Engine.getCurrent().getActivePathway());
 			d.open();
 		}
 	}
@@ -557,19 +558,19 @@
 		public SwitchEditModeAction (MainWindowBase w)
 		{
 			super("&Edit mode", IAction.AS_CHECK_BOX);
-			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL("icons/edit.gif")));
+			setImageDescriptor(ImageDescriptor.createFromURL(Engine.getCurrent().getResourceURL("icons/edit.gif")));
 			setToolTipText(ttUnChecked);
 			window = w;
 			
-			Engine.addApplicationEventListener(this);
+			Engine.getCurrent().addApplicationEventListener(this);
 		}
 
 		public void run ()
 		{
-			if(Engine.isDrawingOpen())
+			if(Engine.getCurrent().isDrawingOpen())
 			{
-				VPathway drawing = Engine.getActiveVPathway();
-				Pathway pathway = Engine.getActivePathway();
+				VPathway drawing = Engine.getCurrent().getActiveVPathway();
+				Pathway pathway = Engine.getCurrent().getActivePathway();
 				if(isChecked())
 				{
 					// give a warning that this can't be edited.
@@ -615,7 +616,7 @@
 
 		public void applicationEvent(ApplicationEvent e) {
 			if(e.type == ApplicationEvent.VPATHWAY_OPENED) {
-				Engine.getActiveVPathway().setEditMode(isChecked());
+				Engine.getCurrent().getActiveVPathway().setEditMode(isChecked());
 			}
 			else if(e.type == ApplicationEvent.VPATHWAY_NEW) {
 				switchEditMode(true);
Index: trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1058)
@@ -27,6 +27,7 @@
 import org.pathvisio.Engine;
 import org.pathvisio.data.Gdb;
 import org.pathvisio.data.Gex;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ImageExporter;
 import org.pathvisio.model.MappFormat;
 import org.pathvisio.model.SvgFormat;
@@ -48,7 +49,7 @@
 	 * Main method which will be carried out when running the program
 	 */
 	public static void main(String[] args)
-	{
+	{		
 		boolean debugHandles = false;
 		for(String a : args) {
 			if(		a.equalsIgnoreCase("--MonitorHandles") ||
@@ -57,14 +58,14 @@
 			}
 			else if(a.equalsIgnoreCase("--UseR") ||
 					a.equalsIgnoreCase("-ur")) {
-				SwtEngine.USE_R = true;
+				SwtEngine.getCurrent().USE_R = true;
 			}
 		}
 		
 		//Setup the application window
 		MainWindow window = null;
-		if(debugHandles)	window = SwtEngine.getSleakWindow();
-		else				window = SwtEngine.getWindow();
+		if(debugHandles)	window = SwtEngine.getCurrent().getSleakWindow();
+		else				window = SwtEngine.getCurrent().getWindow();
 		
 		initiate();
 		
@@ -77,7 +78,7 @@
 		Gex.close();
 		Gdb.close();
 		//Close log stream
-		Engine.log.getStream().close();
+		Logger.log.getStream().close();
 		
 		Display.getCurrent().dispose();
 	}
@@ -89,10 +90,10 @@
 	{
 		//initiate logger
 		try { 
-			GlobalPreference.FILE_LOG.setDefault(new File(SwtEngine.getApplicationDir(), ".PathVisioLog").toString());
-			Engine.log.setStream(new PrintStream(GlobalPreference.FILE_LOG.getValue())); 
+			GlobalPreference.FILE_LOG.setDefault(new File(SwtEngine.getCurrent().getApplicationDir(), ".PathVisioLog").toString());
+			Logger.log.setStream(new PrintStream(GlobalPreference.FILE_LOG.getValue())); 
 		} catch(Exception e) {}
-		Engine.log.setLogLevel(true, true, true, true, true, true);//Modify this to adjust log level
+		Logger.log.setLogLevel(true, true, true, true, true, true);//Modify this to adjust log level
 		
 		//load the preferences
 		loadPreferences();
@@ -136,16 +137,16 @@
 		VisualizationManager vmgr = new VisualizationManager();
 		Gex gex = new Gex();
 		
-		Engine.addApplicationEventListener(vmgr);
-		Engine.addApplicationEventListener(gex);
+		Engine.getCurrent().addApplicationEventListener(vmgr);
+		Engine.getCurrent().addApplicationEventListener(gex);
 	}
 	
 	static void registerExporters() {
-		Engine.addPathwayExporter(new MappFormat());
-		Engine.addPathwayExporter(new SvgFormat());
-		Engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
-		Engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
-		Engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
+		Engine.getCurrent().addPathwayExporter(new MappFormat());
+		Engine.getCurrent().addPathwayExporter(new SvgFormat());
+		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
+		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
+		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
 	}
 	
 	static void loadVisualizations() {
@@ -153,14 +154,14 @@
 		try {
 			PluginManager.loadPlugins();
 		} catch (Throwable e) {
-			Engine.log.error("When loading visualization plugins", e);
+			Logger.log.error("When loading visualization plugins", e);
 		}
 		
 		VisualizationManager.loadGeneric();
 	}
 	
 	static void loadPreferences() {
-		Engine.setPreferenceCollection(new SwtPreferences());
+		Engine.getCurrent().setPreferenceCollection(new SwtPreferences());
 	}
 	
 	/**
@@ -174,11 +175,11 @@
 		
 		// Labels for color by expressiondata (mRNA and Protein)
 		ImageData img = new ImageData(cl.getResourceAsStream("images/mRNA.bmp"));
-		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.TRANSPARENT_COLOR));
+		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.getCurrent().TRANSPARENT_COLOR));
 		imageRegistry.put("data.mRNA",
 				new Image(display, img));
 		img = new ImageData(cl.getResourceAsStream("images/protein.bmp"));
-		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.TRANSPARENT_COLOR));
+		img.transparentPixel = img.palette.getPixel(SwtUtils.color2rgb(Engine.getCurrent().TRANSPARENT_COLOR));
 		imageRegistry.put("data.protein",
 				new Image(display, img));
 		imageRegistry.put("sidepanel.minimize",
@@ -199,7 +200,7 @@
 				ImageDescriptor.createFromURL(cl.getResource("icons/tree_collapsed.gif")));
 		imageRegistry.put("tree.expanded",
 				ImageDescriptor.createFromURL(cl.getResource("icons/tree_expanded.gif")));
-		SwtEngine.setImageRegistry(imageRegistry);
+		SwtEngine.getCurrent().setImageRegistry(imageRegistry);
 	}
 	
 }
Index: trunk/src/swt/org/pathvisio/gui/swt/AlignActions.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/AlignActions.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/AlignActions.java	(revision 1058)
@@ -29,11 +29,11 @@
 		window = w;
 		type = t;
 		setToolTipText (type.getDescription());
-		setImageDescriptor(ImageDescriptor.createFromURL(Engine.getResourceURL(type.getIcon())));
+		setImageDescriptor(ImageDescriptor.createFromURL(Engine.getCurrent().getResourceURL(type.getIcon())));
 	}
 
 	public void run () {
-		Engine.getActiveVPathway().alignSelected(type);
+		Engine.getCurrent().getActiveVPathway().alignSelected(type);
 	}
 }	
 
Index: trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java	(revision 1058)
@@ -19,12 +19,15 @@
 import org.eclipse.swt.browser.Browser;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.widgets.Composite;
+import org.pathvisio.ApplicationEvent;
+import org.pathvisio.Engine;
+import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.data.Gdb;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.GeneProduct;
-import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayElement;
 import org.pathvisio.view.SelectionBox.SelectionEvent;
 import org.pathvisio.view.SelectionBox.SelectionListener;
@@ -32,7 +35,7 @@
 /**
  * Backpage browser - side panel that shows the backpage information when a GeneProduct is double-clicked
  */
-public class BackpagePanel extends Composite implements SelectionListener {
+public class BackpagePanel extends Composite implements SelectionListener, ApplicationEventListener {
 	private String text = "";
 	
 	private Browser bpBrowser;
@@ -51,7 +54,9 @@
 		bpBrowser = new Browser(this, style); //Set the Browser widget
 		refresh();
 		
-		SelectionBox.addListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
+		VPathway vp = Engine.getCurrent().getActiveVPathway();
+		if(vp != null) vp.addSelectionListener(this);
 	}
 	
 	private void setText(String text) {
@@ -103,7 +108,7 @@
 		});
 	}
 
-	public void drawingEvent(SelectionEvent e) {
+	public void selectionEvent(SelectionEvent e) {
 		switch(e.type) {
 		case SelectionEvent.OBJECT_ADDED:
 			//Just take the first GeneProduct in the selection
@@ -121,4 +126,11 @@
 			break;
 		}
 	}
+
+	public void applicationEvent(ApplicationEvent e) {
+		switch(e.type) {
+		case ApplicationEvent.VPATHWAY_CREATED:
+			((VPathway)e.getSource()).addSelectionListener(this);
+		}
+	}
 }
Index: trunk/src/swt/org/pathvisio/search/PathwaySearchComposite.java
===================================================================
--- trunk/src/swt/org/pathvisio/search/PathwaySearchComposite.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/search/PathwaySearchComposite.java	(revision 1058)
@@ -38,8 +38,8 @@
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.data.DataSources;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.MainWindowBase;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 import org.pathvisio.search.SearchMethods.SearchException;
@@ -286,13 +286,13 @@
 				super.run(monitor);
 			} catch (InterruptedException e) {
 				openMessageDialog("error", e.getMessage());
-				Engine.log.error("Unable to start search", e);
+				Logger.log.error("Unable to start search", e);
 			} catch (InvocationTargetException e) {
 				if(e.getCause() instanceof SearchException)
 					openMessageDialog("", e.getCause().getMessage());
 				else {
 					openMessageDialog("error", "Cause: " + e.getCause().getMessage());
-					Engine.log.error("while searching", e);
+					Logger.log.error("while searching", e);
 				}
 			}
 		}
Index: trunk/src/swt/org/pathvisio/search/SearchMethods.java
===================================================================
--- trunk/src/swt/org/pathvisio/search/SearchMethods.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/search/SearchMethods.java	(revision 1058)
@@ -82,7 +82,7 @@
 		SearchRunnableWithProgress.monitorWorked((int)(TOTAL_WORK * 0.2));
 		
 		//get all pathway files in the folder and subfolders
-		ArrayList<File> pathways = FileUtils.getFiles(folder, Engine.PATHWAY_FILE_EXTENSION, true);
+		ArrayList<File> pathways = FileUtils.getFiles(folder, Engine.getCurrent().PATHWAY_FILE_EXTENSION, true);
 
 		XMLReader xmlReader = XMLReaderFactory.createXMLReader();
 		for(File f : pathways) {
@@ -127,7 +127,7 @@
 		srt.setTableData(srs);
 		
 		//get all pathway files in the folder and subfolders
-		ArrayList<File> pathways = FileUtils.getFiles(folder, Engine.PATHWAY_FILE_EXTENSION, true);
+		ArrayList<File> pathways = FileUtils.getFiles(folder, Engine.getCurrent().PATHWAY_FILE_EXTENSION, true);
 
 		XMLReader xmlReader = XMLReaderFactory.createXMLReader();
 		for(File f : pathways) {
Index: trunk/src/swt/org/pathvisio/search/SearchResultTable.java
===================================================================
--- trunk/src/swt/org/pathvisio/search/SearchResultTable.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/search/SearchResultTable.java	(revision 1058)
@@ -31,6 +31,7 @@
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
 import org.pathvisio.Engine.ApplicationEventListener;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.tableviewer.PathwayTable;
 import org.pathvisio.util.tableviewer.TableData.Row;
 import org.pathvisio.view.GeneProduct;
@@ -47,13 +48,13 @@
 	
 	public SearchResultTable(Composite parent, int style) {
 		super(parent, SWT.NULL);
-		Engine.addApplicationEventListener(this);
+		Engine.getCurrent().addApplicationEventListener(this);
 	}
 		
 	public int getNrResults() { return getNrRows(); }
 		
 	public void highlightResults(boolean highlight) {
-		VPathway drawing = Engine.getActiveVPathway();
+		VPathway drawing = Engine.getCurrent().getActiveVPathway();
 		if(drawing == null) return; //No drawing open
 		
 		if(highlight) { 
@@ -72,7 +73,7 @@
 				}
 				drawing.redraw();
 			} catch(Exception ex) { 
-				Engine.log.error("when highlighting genes from search result table", ex);
+				Logger.log.error("when highlighting genes from search result table", ex);
 			}
 		}
 		else drawing.resetHighlight();
Index: trunk/src/swt/org/pathvisio/data/GexImportWizard.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/GexImportWizard.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/GexImportWizard.java	(revision 1058)
@@ -48,8 +48,8 @@
 import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
-import org.pathvisio.Engine;
 import org.pathvisio.Globals;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 import org.pathvisio.util.swt.TableColumnResizer;
 
@@ -86,7 +86,7 @@
 						new GexSwt.ImportProgressKeeper(
 								(ImportPage) getPage("ImportPage"), importInformation));
 			} catch (Exception e) {
-				Engine.log.error("while running expression data import process: " + e.getMessage(), e);
+				Logger.log.error("while running expression data import process: " + e.getMessage(), e);
 			} // TODO: handle exception
 			ip.setTitle("Import finished");
 			ip.setDescription("Press finish to return to " + Globals.APPLICATION_VERSION_NAME);
@@ -178,7 +178,7 @@
 						
 					} catch(Exception ex) {
 						MessageDialog.openError(getShell(), "Error", "Unable to open connection dialog");
-						Engine.log.error("", ex);
+						Logger.log.error("", ex);
 					}
 				}
 			});
@@ -411,7 +411,7 @@
 				ti.setText(1, line);
 			}
 		} catch (IOException e) { // TODO: handle IOException
-			Engine.log.error("while generating preview for importing expression data: " + e.getMessage(), e);
+			Logger.log.error("while generating preview for importing expression data: " + e.getMessage(), e);
 		}
 		previewTable.pack();
 	}
@@ -440,7 +440,7 @@
 				ti.setText(line.split(ImportInformation.DELIMITER));
 			}
 		} catch (IOException e) { // TODO: handle IOException
-			Engine.log.error("while generating preview for importing expression data: " + e.getMessage(), e);
+			Logger.log.error("while generating preview for importing expression data: " + e.getMessage(), e);
 		}
 		columnTable.pack();
 	}
Index: trunk/src/swt/org/pathvisio/data/ImportInformation.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/ImportInformation.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/ImportInformation.java	(revision 1058)
@@ -21,7 +21,7 @@
 import java.io.FileReader;
 import java.io.IOException;
 
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 
 /**
  * This class contains the information needed to start importing a delimited
@@ -42,7 +42,7 @@
 		//Close the connection to the previous file if exist
 		if(in != null) {
 			try { in.close(); } catch(Exception e) { 
-				Engine.log.error("on closing file " + this.txtFile + ": " + e.getMessage(), e);
+				Logger.log.error("on closing file " + this.txtFile + ": " + e.getMessage(), e);
 			}
 			in = null;
 		}
@@ -124,7 +124,7 @@
 				in.reset();
 			}
 		} catch (Exception e) {
-			Engine.log.error("Error reading file", e);
+			Logger.log.error("Error reading file", e);
 		} // TODO: handle exception
 		return in;
 	}
@@ -177,7 +177,7 @@
 				i++; // Go to headerline
 			return in.readLine().split(ImportInformation.DELIMITER);
 		} catch (IOException e) { // TODO: handle IOException
-			Engine.log.error("Unable to get column names for importing expression data: " + e.getMessage(), e);
+			Logger.log.error("Unable to get column names for importing expression data: " + e.getMessage(), e);
 			return new String[] {};
 		}
 	}
Index: trunk/src/swt/org/pathvisio/data/DBConnHsqldb.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/DBConnHsqldb.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/DBConnHsqldb.java	(revision 1058)
@@ -28,7 +28,7 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.debug.StopWatch;
 
 /**
@@ -63,7 +63,7 @@
 		StopWatch timer = new StopWatch();
 		timer.start();
 		Connection con = DriverManager.getConnection("jdbc:hsqldb:file:" + dbName, prop);
-		Engine.log.info("Connecting with hsqldb to " + dbName + ":\t" + timer.stop());
+		Logger.log.info("Connecting with hsqldb to " + dbName + ":\t" + timer.stop());
 		return con;
 	}
 
@@ -103,7 +103,7 @@
 			prop.setProperty("hsqldb.files_readonly", Boolean.toString(readonly));
 			prop.store(new FileOutputStream(propertyFile), "HSQL Database Engine");
 			} catch (Exception e) {
-				Engine.log.error("Unable to set database properties to readonly", e);
+				Logger.log.error("Unable to set database properties to readonly", e);
 			}
 	}
 
Index: trunk/src/swt/org/pathvisio/data/GexSwt.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/GexSwt.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/GexSwt.java	(revision 1058)
@@ -34,7 +34,7 @@
 public class GexSwt {
 	
 	public static DBConnectorSwt getDBConnector() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
-		return SwtEngine.getSwtDbConnector(DBConnectorSwt.TYPE_GEX);
+		return SwtEngine.getCurrent().getSwtDbConnector(DBConnectorSwt.TYPE_GEX);
 	}
 	
 	public static class ProgressWizardDialog extends WizardDialog {
Index: trunk/src/swt/org/pathvisio/data/Gex.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/Gex.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/Gex.java	(revision 1058)
@@ -50,6 +50,7 @@
 import org.pathvisio.Engine.ApplicationEventListener;
 import org.pathvisio.data.CachedData.Data;
 import org.pathvisio.data.Gdb.IdCodePair;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.debug.StopWatch;
 import org.pathvisio.util.FileUtils;
 import org.pathvisio.util.ProgressKeeper;
@@ -130,7 +131,7 @@
 			xmlOut.output(xmlDoc, out);
 			out.close();
 		} catch(IOException e) {
-			Engine.log.error("Unable to save visualization settings", e);
+			Logger.log.error("Unable to save visualization settings", e);
 		}
 	}
 	
@@ -180,7 +181,7 @@
 				samples.put(id, new Sample(id, r.getString(2), r.getInt(3)));					
 			}
 		} catch (Exception e) {
-			Engine.log.error("while loading data from the 'samples' table: " + e.getMessage(), e);
+			Logger.log.error("while loading data from the 'samples' table: " + e.getMessage(), e);
 		}
 	}
 	
@@ -391,7 +392,7 @@
 						ts.stopToLog("Fetching data for ens id: " + ensId + "\t");
 					} catch (Exception e)
 					{
-						Engine.log.error("while caching expression data: " + e.getMessage(), e);
+						Logger.log.error("while caching expression data: " + e.getMessage(), e);
 					}
 				}
 				
@@ -405,7 +406,7 @@
 		}
 		p.finished();
 		timer.stopToLog("Caching expression data\t\t\t");
-		Engine.log.trace("> Nr of ids queried:\t" + ids.size());
+		Logger.log.trace("> Nr of ids queried:\t" + ids.size());
 	}
 		
 
@@ -557,13 +558,13 @@
 			try {
 				connect(); //re-connect and use the created expression dataset
 			} catch(Exception e) {
-				Engine.log.error("Exception on connecting expression dataset from import thread", e);
+				Logger.log.error("Exception on connecting expression dataset from import thread", e);
 			}
 			
 			p.finished();
 		} catch(Exception e) { 
 			p.report("Import aborted due to error: " + e.getMessage());
-			Engine.log.error("Expression data import error", e);
+			Logger.log.error("Expression data import error", e);
 			close(true);
 			error.close();
 		}
@@ -602,7 +603,7 @@
 		try {
 			error = new PrintWriter(new FileWriter("convert_gex_error.txt"));
 		} catch(IOException ex) {
-			Engine.log.error("Unable to open error file for gdb conversion: " + ex.getMessage(), ex);
+			Logger.log.error("Unable to open error file for gdb conversion: " + ex.getMessage(), ex);
 		}
 		
 		try {
@@ -699,7 +700,7 @@
 	}
 	
 	public static DBConnector getDBConnector() throws ClassNotFoundException, InstantiationException, IllegalAccessException {
-		return Engine.getDbConnector(DBConnector.TYPE_GEX);
+		return Engine.getCurrent().getDbConnector(DBConnector.TYPE_GEX);
 	}
 	
 	/**
@@ -767,7 +768,7 @@
 				fireExpressionDataEvent(new ExpressionDataEvent(Gex.class, ExpressionDataEvent.CONNECTION_CLOSED));
 				
 			} catch (Exception e) {
-				Engine.log.error("Error while closing connection to expression dataset " + dbName, e);
+				Logger.log.error("Error while closing connection to expression dataset " + dbName, e);
 			}
 			con = null;
 		}
@@ -795,7 +796,7 @@
 			conGmGex = DriverManager.getConnection(
 					database_before + gmGexFile.toString() + database_after, "", "");
 		} catch (Exception e) {
-			Engine.log.error("Error: Unable to open connection go GenMAPP gex " + gmGexFile +
+			Logger.log.error("Error: Unable to open connection go GenMAPP gex " + gmGexFile +
 					": " +e.getMessage(), e);
 		}
 	}
@@ -810,7 +811,7 @@
 				conGmGex.close();
 				conGmGex = null;
 			} catch (Exception e) {
-				Engine.log.error("Error while closing connection to GenMAPP gex: " + e.getMessage(), e);
+				Logger.log.error("Error while closing connection to GenMAPP gex: " + e.getMessage(), e);
 			}
 		}
 	}
Index: trunk/src/swt/org/pathvisio/data/GpmlTransfer.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/GpmlTransfer.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/GpmlTransfer.java	(revision 1058)
@@ -25,7 +25,7 @@
 import org.jdom.Namespace;
 import org.jdom.output.Format;
 import org.jdom.output.XMLOutputter;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.GpmlFormat;
 import org.pathvisio.model.PathwayElement;
 
@@ -66,7 +66,7 @@
 			}
 			catch (Exception e)
 			{
-				Engine.log.error ("Converter exception", e);
+				Logger.log.error ("Converter exception", e);
 			}
 
 			XMLOutputter xmlcode = new XMLOutputter(Format.getPrettyFormat());
@@ -82,7 +82,7 @@
 			}
 			catch (Exception e)
 			{
-				Engine.log.error ("Error?!?!", e);
+				Logger.log.error ("Error?!?!", e);
 			}
 		}
 		super.javaToNative(result, transferData);
Index: trunk/src/swt/org/pathvisio/data/DBConnDerby.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/DBConnDerby.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/DBConnDerby.java	(revision 1058)
@@ -33,7 +33,7 @@
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.debug.StopWatch;
 import org.pathvisio.util.FileUtils;
 
@@ -83,7 +83,7 @@
 		}
 		Connection con = DriverManager.getConnection(url, prop);
 		
-		Engine.log.info("Connecting with derby to " + dbName + ":\t" + timer.stop());
+		Logger.log.info("Connecting with derby to " + dbName + ":\t" + timer.stop());
 		
 		lastDbName = dbName;
 		return con;
@@ -99,7 +99,7 @@
 		try {
 			DriverManager.getConnection("jdbc:derby:" + FileUtils.removeExtension(dbName) + ";shutdown=true");
 		} catch(Exception e) {
-			Engine.log.error("Database closed", e);
+			Logger.log.error("Database closed", e);
 		}
 		File zipFile = new File(dbName.endsWith(getDbExt()) ? dbName : dbName + "." + getDbExt());
 		toZip(zipFile, dbDir);
Index: trunk/src/swt/org/pathvisio/data/DBConnDerbyDirectory.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/DBConnDerbyDirectory.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/DBConnDerbyDirectory.java	(revision 1058)
@@ -20,7 +20,7 @@
 
 import org.eclipse.swt.widgets.DirectoryDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.util.FileUtils;
 
 /**
@@ -34,7 +34,7 @@
 		try {
 			DriverManager.getConnection("jdbc:derby:" + FileUtils.removeExtension(dbName) + ";shutdown=true");
 		} catch(Exception e) {
-			Engine.log.error("Database closed", e);
+			Logger.log.error("Database closed", e);
 		}
 		return dbName;
 	}
Index: trunk/src/swt/org/pathvisio/data/DBConnectorSwt.java
===================================================================
--- trunk/src/swt/org/pathvisio/data/DBConnectorSwt.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/data/DBConnectorSwt.java	(revision 1058)
@@ -16,15 +16,10 @@
 //
 package org.pathvisio.data;
 
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.sql.Statement;
-
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.DirectoryDialog;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Shell;
-import org.pathvisio.Engine;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 
 /**
Index: trunk/src/swt/org/pathvisio/util/tableviewer/PathwayTable.java
===================================================================
--- trunk/src/swt/org/pathvisio/util/tableviewer/PathwayTable.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/util/tableviewer/PathwayTable.java	(revision 1058)
@@ -38,7 +38,7 @@
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Table;
 import org.eclipse.swt.widgets.TableColumn;
-import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.preferences.swt.SwtPreferences.SwtPreference;
 import org.pathvisio.util.swt.TableColumnResizer;
@@ -147,9 +147,9 @@
 						pw = fid.getValue();
 					}
 				}
-				SwtEngine.openPathway(pw);
+				SwtEngine.getCurrent().openPathway(pw);
 			} catch(Exception ex) { 
-				Engine.log.error("when trying to open pathway from pathway table", ex);
+				Logger.log.error("when trying to open pathway from pathway table", ex);
 			}
 		}
 	};
Index: trunk/src/swt/org/pathvisio/util/swt/SwtUtils.java
===================================================================
--- trunk/src/swt/org/pathvisio/util/swt/SwtUtils.java	(revision 1057)
+++ trunk/src/swt/org/pathvisio/util/swt/SwtUtils.java	(revision 1058)
@@ -49,6 +49,7 @@
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Shell;
 import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.gui.swt.SwtEngine;
 import org.pathvisio.model.Pathway;
 import org.pathvisio.view.VPathway;
@@ -206,7 +207,7 @@
 	static int ii;
 	static int pixratio;
 	public static Font adjustFontSize(Font f, Point toFit, String text, GC gc, Display display) {
-		VPathway d = Engine.getActiveVPathway();
+		VPathway d = Engine.getCurrent().getActiveVPathway();
 		pixratio = (int)Math.ceil(3 * (d == null ? 1 : d.getZoomFactor()));
 		ii = 3;
 		incrs = new int[3];
@@ -451,7 +452,7 @@
 			
 			if(args == null || doMethod == null) {
 				InterruptedException ex = new InterruptedException("missing method or arguments, see error log for details");
-				Engine.log.error("unable to invoke " + doMethod, ex);
+				Logger.log.error("unable to invoke " + doMethod, ex);
 				throw ex;
 			}
 					
@@ -459,7 +460,7 @@
 
 			runException = null;
 			if(runAsSyncExec) {//Invoke in syncExec, method may access widgets from this thread
-				SwtEngine.getWindow().getShell().getDisplay().syncExec(new Runnable() {
+				SwtEngine.getCurrent().getWindow().getShell().getDisplay().syncExec(new Runnable() {
 					public void run() {
 						runException = doInvoke();
 					}
@@ -501,7 +502,7 @@
 		 * @param w
 		 */
 		public static void monitorWorked(final int w) {
-			SwtEngine.getWindow().getShell().getDisplay().asyncExec(new Runnable() {
+			SwtEngine.getCurrent().getWindow().getShell().getDisplay().asyncExec(new Runnable() {
 				public void run() {
 					if(monitor != null) monitor.worked(w);
 				}
@@ -514,7 +515,7 @@
 		 * @see IProgressMonitor#setTaskName(String)
 		 */
 		public static void monitorSetTaskName(final String taskName) {
-			SwtEngine.getWindow().getShell().getDisplay().asyncExec(new Runnable() {
+			SwtEngine.getCurrent().getWindow().getShell().getDisplay().asyncExec(new Runnable() {
 				public void run() {
 					if(monitor != null) monitor.setTaskName(taskName);
 				}
@@ -528,9 +529,9 @@
 		 * @see MessageDialog#openInformation(org.eclipse.swt.widgets.Shell, String, String)
 		 */
 		public void openMessageDialog(final String title, final String msg) {
-			SwtEngine.getWindow().getShell().getDisplay().asyncExec(new Runnable() {
+			SwtEngine.getCurrent().getWindow().getShell().getDisplay().asyncExec(new Runnable() {
 				public void run() {
-					MessageDialog.openInformation(SwtEngine.getWindow().getShell(), title, msg);
+					MessageDialog.openInformation(SwtEngine.getCurrent().getWindow().getShell(), title, msg);
 				}
 			});
 		}
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Patch.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Patch.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Patch.java	(revision 1058)
@@ -18,11 +18,16 @@
 
 import java.io.IOException;
 import java.io.Reader;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.JDOMException;
+import org.jdom.input.SAXBuilder;
 import org.pathvisio.debug.Logger;
-
-import org.jdom.*;
-import org.jdom.input.*;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.GpmlFormat;
 import org.pathvisio.model.PathwayElement;
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DgpmlOutputter.java	(revision 1058)
@@ -16,13 +16,20 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.io.*;
-import org.jdom.*;
-import org.jdom.output.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.PrintWriter;
+
+import org.jdom.Document;
+import org.jdom.Element;
+import org.jdom.output.Format;
+import org.jdom.output.XMLOutputter;
+import org.pathvisio.debug.Logger;
+import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.GpmlFormat;
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.model.ConverterException;
-import org.pathvisio.debug.Logger;
 
 /**
    Naive implementation of Outputter.
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PatchMain.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PatchMain.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PatchMain.java	(revision 1058)
@@ -16,7 +16,9 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.io.*;
+import java.io.File;
+import java.io.InputStreamReader;
+
 import org.pathvisio.debug.Logger;
 
 /**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/DiffOutputter.java	(revision 1058)
@@ -17,6 +17,7 @@
 package org.pathvisio.gpmldiff;
 
 import java.io.IOException;
+
 import org.pathvisio.model.PathwayElement;
 
 /**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgMain.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgMain.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgMain.java	(revision 1058)
@@ -16,17 +16,21 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.awt.*;
-import java.io.*;
+import java.awt.Color;
+import java.awt.Dimension;
+import java.io.File;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+
+import org.apache.batik.dom.GenericDOMImplementation;
 import org.apache.batik.svggen.SVGGraphics2D;
-import org.apache.batik.dom.GenericDOMImplementation;
-import java.awt.AlphaComposite;
-import org.w3c.dom.Document;
-import org.w3c.dom.DOMImplementation;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.Pathway;
 import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayElement;
-import org.pathvisio.model.Pathway;
-import org.pathvisio.model.ConverterException;
+import org.w3c.dom.DOMImplementation;
+import org.w3c.dom.Document;
 
 class SvgMain
 {
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyDoc.java	(revision 1058)
@@ -16,12 +16,16 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.pathvisio.debug.Logger;
+import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.model.ConverterException;
-import org.pathvisio.debug.Logger;
 
 /**
    Wrapper for org.pathvisio.model.Pathway that adds some extra
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SearchNode.java	(revision 1058)
@@ -16,8 +16,9 @@
 //
 package org.pathvisio.gpmldiff;
 
+import java.util.HashSet;
 import java.util.Set;
-import java.util.HashSet;
+
 import org.pathvisio.model.PathwayElement;
 
 /**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicOutputter.java	(revision 1058)
@@ -16,7 +16,9 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.io.*;
+import java.io.File;
+import java.io.PrintStream;
+
 import org.pathvisio.model.PathwayElement;
 
 /**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/Test.java	(revision 1058)
@@ -19,11 +19,12 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
+
+import junit.framework.TestCase;
+
+import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
-import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.PathwayElement;
-
-import junit.framework.TestCase;
 /**
    Unit tests for package GpmlDiff
 */
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiffWindow.java	(revision 1058)
@@ -16,15 +16,25 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.awt.event.*;
-import java.awt.*;
-import javax.swing.*;
-import org.pathvisio.gui.swing.*;
+import java.awt.BorderLayout;
+import java.awt.Container;
+import java.awt.event.ActionEvent;
+
+import javax.swing.AbstractAction;
+import javax.swing.Action;
+import javax.swing.JFileChooser;
+import javax.swing.JFrame;
+import javax.swing.JMenu;
+import javax.swing.JMenuBar;
+import javax.swing.JOptionPane;
+import javax.swing.JScrollPane;
+
+import org.pathvisio.debug.Logger;
+import org.pathvisio.gui.swing.CommonActions;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.Pathway;
 import org.pathvisio.view.VPathway;
-import org.pathvisio.model.Pathway;
-import org.pathvisio.model.ConverterException;
 import org.pathvisio.view.swing.VPathwaySwing;
-import org.pathvisio.debug.Logger;
 
 class GpmlDiffWindow extends JFrame
 {
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/PwyElt.java	(revision 1058)
@@ -16,10 +16,13 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PropertyType;
-import org.pathvisio.model.ObjectType;
 
 /**
    Utility class for pathway element methods related to gpmldiff.
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/GpmlDiff.java	(revision 1058)
@@ -16,10 +16,12 @@
 //
 package org.pathvisio.gpmldiff;
 
-import java.io.*;
-import org.pathvisio.debug.Logger;
+import java.io.File;
+import java.io.IOException;
 import java.util.Arrays;
 
+import org.pathvisio.debug.Logger;
+
 /**
    Class containing main method
 */
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BasicSim.java	(revision 1058)
@@ -17,7 +17,8 @@
 
 package org.pathvisio.gpmldiff;
 
-import java.util.*;
+import java.util.Map;
+
 import org.pathvisio.model.PathwayElement;
 
 /**
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/SvgOutputter.java	(revision 1058)
@@ -18,34 +18,36 @@
 
 import java.awt.Color;
 import java.awt.Dimension;
+import java.awt.Font;
 import java.awt.Rectangle;
-import java.awt.Font;
-import java.awt.geom.Point2D;
+import java.awt.font.FontRenderContext;
+import java.awt.font.LineBreakMeasurer;
+import java.awt.font.TextLayout;
 import java.awt.geom.Rectangle2D;
 import java.awt.geom.RoundRectangle2D;
-import java.awt.font.TextLayout;
-import java.awt.font.FontRenderContext;
-import java.awt.font.LineBreakMeasurer;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
 import java.text.AttributedCharacterIterator;
 import java.text.AttributedString;
-import java.io.*;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
-import java.util.ArrayList;
 import java.util.Set;
-import java.util.HashSet;
-import java.util.Collections;
+
 import org.apache.batik.dom.GenericDOMImplementation;
 import org.apache.batik.svggen.SVGGraphics2D;
-import org.pathvisio.model.ConverterException;
-import org.pathvisio.model.Pathway;
+import org.pathvisio.debug.Logger;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayElement;
 import org.w3c.dom.DOMImplementation;
 import org.w3c.dom.Document;
-import org.pathvisio.model.ObjectType;
-import org.pathvisio.debug.Logger;
 
 class SvgOutputter extends DiffOutputter
 {
Index: trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java
===================================================================
--- trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 1057)
+++ trunk/tools/gpmldiff/src/org/pathvisio/gpmldiff/BetterSim.java	(revision 1058)
@@ -16,11 +16,10 @@
 //
 package org.pathvisio.gpmldiff;
 
+import java.util.List;
+
 import org.pathvisio.model.PathwayElement;
-import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PropertyType;
-import org.pathvisio.debug.Logger;
-import java.util.*;
 
 class BetterSim extends SimilarityFunction
 {
Index: trunk/tools/gdb2visio/TestDbPerformance.java
===================================================================
--- trunk/tools/gdb2visio/TestDbPerformance.java	(revision 1057)
+++ trunk/tools/gdb2visio/TestDbPerformance.java	(revision 1058)
@@ -105,7 +105,7 @@
 		if(tdb.testThread != null) {
 			tdb.testThread.interrupt();
 		}
-		Display.getCurrent().dispose();
+		Display.Engine.getCurrent().dispose();
 	}
 	
 	public void invertStartButtonLabel() {
