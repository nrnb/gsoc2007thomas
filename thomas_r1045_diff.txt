Index: trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1044)
+++ trunk/src/wikipathways/org/pathvisio/gui/wikipathways/AppletMain.java	(revision 1045)
@@ -16,6 +16,7 @@
 //
 package org.pathvisio.gui.wikipathways;
 
+import java.awt.Color;
 import java.awt.event.ActionEvent;
 import java.net.CookieHandler;
 import java.net.URL;
@@ -29,7 +30,6 @@
 import javax.swing.JApplet;
 import javax.swing.JLabel;
 import javax.swing.JOptionPane;
-import javax.swing.JToolBar;
 import javax.swing.SwingUtilities;
 
 import org.pathvisio.ApplicationEvent;
@@ -40,6 +40,7 @@
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.util.ProgressKeeper;
 import org.pathvisio.util.RunnableWithProgress;
+import org.pathvisio.view.swing.VPathwaySwing;
 import org.pathvisio.wikipathways.Parameter;
 import org.pathvisio.wikipathways.UserInterfaceHandler;
 import org.pathvisio.wikipathways.WikiPathways;
Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1044)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathways.java	(revision 1045)
@@ -90,7 +90,7 @@
 		DBConnector connector = new DBConnectorDerbyServer("wikipathways.org", 1527);
 		Engine.setDBConnector(connector, DBConnector.TYPE_GDB);
 		
-		//Gdb.connect(getPwSpecies());
+		Gdb.connect(getPwSpecies());
 	}
 
 	public String getPwName() {
Index: trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java	(revision 0)
+++ trunk/src/swing/org/pathvisio/gui/swing/BackpagePane.java	(revision 1045)
@@ -0,0 +1,61 @@
+package org.pathvisio.gui.swing;
+
+import javax.swing.JEditorPane;
+
+import org.pathvisio.data.Gdb;
+import org.pathvisio.model.ObjectType;
+import org.pathvisio.model.PathwayElement;
+import org.pathvisio.view.GeneProduct;
+import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.VPathwayElement;
+import org.pathvisio.view.SelectionBox.SelectionEvent;
+import org.pathvisio.view.SelectionBox.SelectionListener;
+
+public class BackpagePane extends JEditorPane implements SelectionListener {
+	PathwayElement input;
+	
+	public BackpagePane() {
+		super();
+		setEditable(false);
+		setContentType("text/html");
+		
+		SelectionBox.addListener(this);
+	}
+
+	public void setInput(final PathwayElement e) {
+		if(e == null) {
+			setText(Gdb.getBackpageHTML(null, null, null));
+		} else if(input != e) {
+			input = e;
+			if(e.getObjectType() == ObjectType.DATANODE) {
+				new Thread() {
+					public void run() {
+						setText(Gdb.getBackpageHTML(
+								e.getGeneID(), 
+								e.getSystemCode(), 
+								e.getBackpageHead()));
+					}
+				}.start();
+			}
+		}
+	}
+
+	public void drawingEvent(SelectionEvent e) {
+		switch(e.type) {
+		case SelectionEvent.OBJECT_ADDED:
+			//Just take the first DataNode in the selection
+			for(VPathwayElement o : e.selection) {
+				if(o instanceof GeneProduct) {
+					setInput(((GeneProduct)o).getGmmlData());
+					break; //Selects the first, TODO: use setGmmlDataObjects
+				}
+			}
+			break;
+		case SelectionEvent.OBJECT_REMOVED:
+			if(e.selection.size() != 0) break;
+		case SelectionEvent.SELECTION_CLEARED:
+			setInput(null);
+			break;
+		}
+	}
+}
Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1044)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1045)
@@ -30,6 +30,7 @@
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
 import javax.swing.JComboBox;
+import javax.swing.JEditorPane;
 import javax.swing.JLabel;
 import javax.swing.JMenu;
 import javax.swing.JMenuBar;
@@ -37,6 +38,7 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JSplitPane;
+import javax.swing.JTabbedPane;
 import javax.swing.JTable;
 import javax.swing.JToolBar;
 import javax.swing.table.TableCellEditor;
@@ -59,11 +61,15 @@
 import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.AlignType;
+import org.pathvisio.view.GeneProduct;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.StackType;
 import org.pathvisio.view.VPathway;
+import org.pathvisio.view.VPathwayElement;
 import org.pathvisio.view.VPathwayEvent;
 import org.pathvisio.view.VPathwayListener;
+import org.pathvisio.view.SelectionBox.SelectionEvent;
+import org.pathvisio.view.SelectionBox.SelectionListener;
 
 import com.mammothsoftware.frwk.ddb.DropDownButton;
 
@@ -76,10 +82,14 @@
 
 	private JScrollPane pathwayScrollPane;
 
-	private JScrollPane sidebarScrollPane;
+	private JScrollPane propertiesScrollPane;
+	
+	private JTabbedPane sidebarTabbedPane;
 
 	private JTable propertyTable;
 
+	private BackpagePane backpagePane;
+	
 	public MainPanel() {
 		setLayout(new BorderLayout());
 
@@ -107,11 +117,17 @@
 				return e == null ? super.getCellEditor(row, column) : e;
 			}
 		};
-
-		sidebarScrollPane = new JScrollPane(propertyTable);
-
+		
+		propertiesScrollPane = new JScrollPane(propertyTable);
+		
+		backpagePane = new BackpagePane();
+		
+		sidebarTabbedPane = new JTabbedPane();
+		sidebarTabbedPane.addTab( "Properties", propertiesScrollPane );
+		sidebarTabbedPane.addTab( "Backpage", new JScrollPane(backpagePane) );
+		
 		splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
-				pathwayScrollPane, sidebarScrollPane);
+				pathwayScrollPane, sidebarTabbedPane);
 		splitPane.setResizeWeight(1);
 		splitPane.setOneTouchExpandable(true);
 		add(splitPane, BorderLayout.CENTER);
@@ -354,10 +370,13 @@
 			break;
 		}
 	}
-
+	
 	public void applicationEvent(ApplicationEvent e) {
-		if(e.type == ApplicationEvent.VPATHWAY_CREATED) {
-			((VPathway)e.getSource()).addVPathwayListener(this);
+		switch(e.type) {
+		case ApplicationEvent.VPATHWAY_CREATED:
+			VPathway vp = (VPathway)e.getSource();
+			vp.addVPathwayListener(this);
+			break;
 		}
 	}
 }
Index: trunk/src/core/org/pathvisio/data/Gdb.java
===================================================================
--- trunk/src/core/org/pathvisio/data/Gdb.java	(revision 1044)
+++ trunk/src/core/org/pathvisio/data/Gdb.java	(revision 1045)
@@ -16,9 +16,11 @@
 //
 package org.pathvisio.data;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -35,6 +37,7 @@
 import org.pathvisio.Engine;
 import org.pathvisio.debug.StopWatch;
 import org.pathvisio.preferences.GlobalPreference;
+import org.pathvisio.util.Utils;
 
 /**
  * This class handles everything related to the Gene Database. It contains the database connection,
@@ -42,6 +45,10 @@
  * to hsqldb format
  */
 public abstract class Gdb {	
+	static {
+		initializeHeader();
+	}
+	
 	private static final int COMPAT_VERSION = 1;
 	
 	/**
@@ -141,7 +148,155 @@
 		} catch(Exception e) { return null;	} //Gene not found
 	}
 	
+	public static String getBackpageHTML(String id, String code, String bpHead) {
+		String text = backpagePanelHeader == null ? "" : backpagePanelHeader;
+		if( id == null || code == null) return text;
+		
+		if (bpHead == null) bpHead = "";
+		text += "<H1>Gene information</H1><P>";
+		text += bpHead.equals("") ? bpHead : "<H2>" + bpHead + "</H2><P>";
+		String bpInfo = Gdb.getBpInfo(id, code);
+		text += bpInfo == null ? "<I>No gene information found</I>" : bpInfo;
+
+		text += getCrossRefText(id, code);
+
+		return text + "</body></html>";
+	}
+
+	private static String getCrossRefText(String id, String code) {
+		List<IdCodePair> crfs = Gdb.getCrossRefs(id, code);
+		if(crfs.size() == 0) return "";
+		StringBuilder crt = new StringBuilder("<H1>Cross references</H1><P>");
+		for(IdCodePair cr : crfs) {
+			String idtxt = cr.getId();
+			String url = getCrossRefLink(cr);
+			if(url != null) {
+				int os = Utils.getOS();
+				if(os == Utils.OS_WINDOWS) {
+					//In windows: open in new browser window
+					idtxt = "<a href='" + url + "' target='_blank'>" + idtxt + "</a>";
+				} else {
+					//This doesn't work under ubuntu, so no new windoe there
+					idtxt = "<a href='" + url + "'>" + idtxt + "</a>";
+				}
+				
+			}
+			String dbName = DataSources.sysCode2Name.get(cr.getCode());
+			crt.append( idtxt + ", " + (dbName != null ? dbName : cr.getCode()) + "<br>");
+		}
+		return crt.toString();
+	}
+	
+	private static String getCrossRefLink(IdCodePair idc) {
+		String c = idc.getCode();
+		String id = idc.getId();
+		if(c.equalsIgnoreCase("En"))
+			return "http://www.ensembl.org/Homo_sapiens/searchview?species=all&idx=Gene&q=" + id;
+		if(c.equalsIgnoreCase("P"))
+			return "http://www.expasy.org/uniprot/" + id;
+		if(c.equalsIgnoreCase("Q")) {
+			String pre = "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?";
+			if(id.startsWith("NM")) {
+				return pre + "db=Nucleotide&cmd=Search&term=" + id;
+			} else {
+				return pre + "db=Protein&cmd=search&term=" + id;
+			}
+		}
+		if(c.equalsIgnoreCase("T"))
+			return "http://godatabase.org/cgi-bin/go.cgi?view=details&search_constraint=terms&depth=0&query=" + id;
+		if(c.equalsIgnoreCase("I"))
+			return "http://www.ebi.ac.uk/interpro/IEntry?ac=" + id;
+		if(c.equalsIgnoreCase("Pd"))
+			return "http://bip.weizmann.ac.il/oca-bin/ocashort?id=" + id;
+		if(c.equalsIgnoreCase("X"))
+			return "http://www.ensembl.org/Homo_sapiens/featureview?type=OligoProbe;id=" + id;
+		if(c.equalsIgnoreCase("Em"))
+			return "http://www.ebi.ac.uk/cgi-bin/emblfetch?style=html&id=" + id;
+		if(c.equalsIgnoreCase("L"))
+			return "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&cmd=Retrieve&dopt=full_report&list_uids=" + id;
+		if(c.equalsIgnoreCase("H"))
+			return "http://www.gene.ucl.ac.uk/cgi-bin/nomenclature/get_data.pl?hgnc_id=" + id;
+		if(c.equalsIgnoreCase("I"))
+			return "http://www.ebi.ac.uk/interpro/IEntry?ac=" + id;
+		if(c.equalsIgnoreCase("M"))
+			return "http://www.informatics.jax.org/searches/accession_report.cgi?id=" + id;
+		if(c.equalsIgnoreCase("Om"))
+			return "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=OMIM&cmd=Search&doptcmdl=Detailed&term=?" + id;
+		if(c.equalsIgnoreCase("Pf"))
+			return "http://www.sanger.ac.uk//cgi-bin/Pfam/getacc?" + id;
+		if(c.equalsIgnoreCase("R"))
+			return "http://rgd.mcw.edu/generalSearch/RgdSearch.jsp?quickSearch=1&searchKeyword=" + id;
+		if(c.equalsIgnoreCase("D"))
+			return "http://db.yeastgenome.org/cgi-bin/locus.pl?locus=" + id;
+		if(c.equalsIgnoreCase("S"))
+			return "http://www.expasy.org/uniprot/" + id;
+		if(c.equalsIgnoreCase("U")) {
+			String [] org_nr = id.split("\\.");
+			if(org_nr.length == 2) {
+				return "http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=" + 
+				org_nr[0] + "&CID=" + org_nr[1];
+			}
+			else {
+				return null;
+			}
+		}
+		if (c.equalsIgnoreCase("Nw"))
+		{
+			return "http://nugowiki.org/index.php/" + id;
+		}
+		if (c.equalsIgnoreCase("Ca"))
+		{
+			return "http://chem.sis.nlm.nih.gov/chemidplus/direct.jsp?regno=" + id;
+		}
+		if (c.equalsIgnoreCase("Cp"))
+		{
+			return "http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=" + id;
+		}
+		if (c.equalsIgnoreCase("Ce"))
+		{
+			return "http://www.ebi.ac.uk/chebi/searchId=CHEBI:" + id;
+		}
+		if (c.equalsIgnoreCase("Ch"))
+		{
+			return "http://www.hmdb.ca/scripts/show_card.cgi?METABOCARD=" + id + ".txt";
+		}
+		if (c.equalsIgnoreCase("Ck"))
+		{
+			return "http://www.genome.jp/dbget-bin/www_bget?cpd:" + id;
+		}
+		return null;
+	}
+	
 	/**
+	 * Directory containing HTML files needed to display the backpage information
+	 */
+	final static String BPDIR = "backpage";
+	/**
+	 * Header file, containing style information
+	 */
+	final static String HEADERFILE = "header.html";
+	
+	static String backpagePanelHeader;
+	
+	/**
+	 * Reads the header of the HTML content displayed in the browser. This header is displayed in the
+	 * file specified in the {@link HEADERFILE} field
+	 */
+	private static void initializeHeader() {
+		try {
+			BufferedReader input = new BufferedReader(new InputStreamReader(
+						Engine.getResourceURL(BPDIR + "/" + HEADERFILE).openStream()));
+			String line;
+			backpagePanelHeader = "";
+			while((line = input.readLine()) != null) {
+				backpagePanelHeader += line.trim();
+			}
+		} catch (Exception e) {
+			Engine.log.error("Unable to read header file for backpage browser: " + e.getMessage(), e);
+		}
+	}
+	
+	/**
 	 * Checks whether the given gene exists in the gene database
 	 * @param id
 	 * @param code
Index: trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java	(revision 1044)
+++ trunk/src/swt/org/pathvisio/gui/swt/BackpagePanel.java	(revision 1045)
@@ -16,19 +16,13 @@
 //
 package org.pathvisio.gui.swt;
 
-import java.io.BufferedReader;
-import java.io.InputStreamReader;
-import java.util.List;
-
 import org.eclipse.swt.browser.Browser;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.widgets.Composite;
-import org.pathvisio.Engine;
-import org.pathvisio.data.DataSources;
 import org.pathvisio.data.Gdb;
 import org.pathvisio.data.Gex;
 import org.pathvisio.data.Gdb.IdCodePair;
-import org.pathvisio.util.Utils;
+import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.GeneProduct;
 import org.pathvisio.view.SelectionBox;
 import org.pathvisio.view.VPathwayElement;
@@ -39,28 +33,8 @@
  * Backpage browser - side panel that shows the backpage information when a GeneProduct is double-clicked
  */
 public class BackpagePanel extends Composite implements SelectionListener {
-	/**
-	 * Directory containing HTML files needed to display the backpage information
-	 */
-	final static String BPDIR = "backpage";
-	/**
-	 * Header file, containing style information
-	 */
-	final static String HEADERFILE = "header.html";
+	private String text = "";
 	
-	/**
-	 * Header for the gene information in HTML format
-	 */
-	final static String bpHeader = "<H1>Gene information</H1><P>";
-	/**
-	 * Header for the expression information in HTML format
-	 */
-	final static String gexHeader = "<H1>Expression data</H1><P>";
-	
-	private String bpText;
-	private String gexText;
-	private String header;
-	
 	private Browser bpBrowser;
 	
 	private GeneProduct geneProduct;
@@ -72,16 +46,19 @@
 	 */
 	public BackpagePanel(Composite parent, int style) {
 		super(parent, style);
-		
-		initializeHeader(); //Load the header including style information
+
 		setLayout(new FillLayout());
 		bpBrowser = new Browser(this, style); //Set the Browser widget
-		setGeneText(null);
-		setGexText(null);
+		refresh();
 		
 		SelectionBox.addListener(this);
 	}
 	
+	private void setText(String text) {
+		this.text = text;
+		refresh();
+	}
+	
 	public void setGeneProduct(final GeneProduct gp) 
 	{ 
 		if(geneProduct == gp) return;
@@ -90,190 +67,41 @@
 			public void run() {
 				geneProduct = gp;
 				if(gp == null) {
-					setGeneText(null);
-					setGexText(null);
-					return;
-				}
+					setText(Gdb.getBackpageHTML(null, null, null));
+				} else {
 				// Get the backpage text
-				String geneHeader = geneProduct.getGmmlData().getBackpageHead();
-				if (geneHeader == null) geneHeader = "";
-				String geneId = geneProduct.getGmmlData().getGeneID();
-				String systemCode = geneProduct.getGmmlData().getSystemCode();
-				String bpText = geneHeader.equals("") ? geneHeader : "<H2>" + geneHeader + "</H2><P>";
-				String bpInfo = Gdb.getBpInfo(geneId, systemCode);
-				bpText += bpInfo == null ? "<I>No gene information found</I>" : bpInfo;
-				String crossRefText = getCrossRefText(geneId, systemCode);
-				String gexText = Gex.getDataString(new IdCodePair(geneId, systemCode));
-				if (bpText != null) 	setGeneText(bpText);
-				if (gexText != null)	setGexText(gexText + crossRefText);
-				else 					setGexText("<I>No expression data found</I>");
+				PathwayElement e = gp.getGmmlData();
+				String text = Gdb.getBackpageHTML(
+						e.getGeneID(), 
+						e.getSystemCode(), 
+						e.getBackpageHead());
+				//Short hack because Gex is not in core package
+				if(Gex.isConnected()) {
+					text = text.substring(0, text.length() - "</body></html>".length());
+					text += "<H1>Expression data</H1><P>";
+					String gexText = Gex.getDataString(new IdCodePair(e.getGeneID(), e.getSystemCode()));
+					text += gexText == null ? "<I>No expression data found</I>" : gexText;
+					text += "</body></html>";
+				}
+				setText(text);
+				}
 			}
 		};
 		
 		//Run in seperate thread so that this method can return
 		fetchThread.start();
 	}
-		
-	public String getCrossRefText(String id, String code) {
-		List<IdCodePair> crfs = Gdb.getCrossRefs(id, code);
-		if(crfs.size() == 0) return "";
-		StringBuilder crt = new StringBuilder("<H1>Cross references</H1><P>");
-		for(IdCodePair cr : crfs) {
-			String idtxt = cr.getId();
-			String url = getCrossRefLink(cr);
-			if(url != null) {
-				int os = Utils.getOS();
-				if(os == Utils.OS_WINDOWS) {
-					//In windows: open in new browser window
-					idtxt = "<a href='" + url + "' target='_blank'>" + idtxt + "</a>";
-				} else {
-					//This doesn't work under ubuntu, so no new windoe there
-					idtxt = "<a href='" + url + "'>" + idtxt + "</a>";
-				}
-				
-			}
-			String dbName = DataSources.sysCode2Name.get(cr.getCode());
-			crt.append( idtxt + ", " + (dbName != null ? dbName : cr.getCode()) + "<br>");
-		}
-		return crt.toString();
-	}
-	
-	String getCrossRefLink(IdCodePair idc) {
-		String c = idc.getCode();
-		String id = idc.getId();
-		if(c.equalsIgnoreCase("En"))
-			return "http://www.ensembl.org/Homo_sapiens/searchview?species=all&idx=Gene&q=" + id;
-		if(c.equalsIgnoreCase("P"))
-			return "http://www.expasy.org/uniprot/" + id;
-		if(c.equalsIgnoreCase("Q")) {
-			String pre = "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?";
-			if(id.startsWith("NM")) {
-				return pre + "db=Nucleotide&cmd=Search&term=" + id;
-			} else {
-				return pre + "db=Protein&cmd=search&term=" + id;
-			}
-		}
-		if(c.equalsIgnoreCase("T"))
-			return "http://godatabase.org/cgi-bin/go.cgi?view=details&search_constraint=terms&depth=0&query=" + id;
-		if(c.equalsIgnoreCase("I"))
-			return "http://www.ebi.ac.uk/interpro/IEntry?ac=" + id;
-		if(c.equalsIgnoreCase("Pd"))
-			return "http://bip.weizmann.ac.il/oca-bin/ocashort?id=" + id;
-		if(c.equalsIgnoreCase("X"))
-			return "http://www.ensembl.org/Homo_sapiens/featureview?type=OligoProbe;id=" + id;
-		if(c.equalsIgnoreCase("Em"))
-			return "http://www.ebi.ac.uk/cgi-bin/emblfetch?style=html&id=" + id;
-		if(c.equalsIgnoreCase("L"))
-			return "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&cmd=Retrieve&dopt=full_report&list_uids=" + id;
-		if(c.equalsIgnoreCase("H"))
-			return "http://www.gene.ucl.ac.uk/cgi-bin/nomenclature/get_data.pl?hgnc_id=" + id;
-		if(c.equalsIgnoreCase("I"))
-			return "http://www.ebi.ac.uk/interpro/IEntry?ac=" + id;
-		if(c.equalsIgnoreCase("M"))
-			return "http://www.informatics.jax.org/searches/accession_report.cgi?id=" + id;
-		if(c.equalsIgnoreCase("Om"))
-			return "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=OMIM&cmd=Search&doptcmdl=Detailed&term=?" + id;
-		if(c.equalsIgnoreCase("Pf"))
-			return "http://www.sanger.ac.uk//cgi-bin/Pfam/getacc?" + id;
-		if(c.equalsIgnoreCase("R"))
-			return "http://rgd.mcw.edu/generalSearch/RgdSearch.jsp?quickSearch=1&searchKeyword=" + id;
-		if(c.equalsIgnoreCase("D"))
-			return "http://db.yeastgenome.org/cgi-bin/locus.pl?locus=" + id;
-		if(c.equalsIgnoreCase("S"))
-			return "http://www.expasy.org/uniprot/" + id;
-		if(c.equalsIgnoreCase("U")) {
-			String [] org_nr = id.split("\\.");
-			if(org_nr.length == 2) {
-				return "http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=" + 
-				org_nr[0] + "&CID=" + org_nr[1];
-			}
-			else {
-				return null;
-			}
-		}
-		if (c.equalsIgnoreCase("Nw"))
-		{
-			return "http://nugowiki.org/index.php/" + id;
-		}
-		if (c.equalsIgnoreCase("Ca"))
-		{
-			return "http://chem.sis.nlm.nih.gov/chemidplus/direct.jsp?regno=" + id;
-		}
-		if (c.equalsIgnoreCase("Cp"))
-		{
-			return "http://pubchem.ncbi.nlm.nih.gov/summary/summary.cgi?cid=" + id;
-		}
-		if (c.equalsIgnoreCase("Ce"))
-		{
-			return "http://www.ebi.ac.uk/chebi/searchId=CHEBI:" + id;
-		}
-		if (c.equalsIgnoreCase("Ch"))
-		{
-			return "http://www.hmdb.ca/scripts/show_card.cgi?METABOCARD=" + id + ".txt";
-		}
-		if (c.equalsIgnoreCase("Ck"))
-		{
-			return "http://www.genome.jp/dbget-bin/www_bget?cpd:" + id;
-		}
-		return null;
-	}
-	
+			
 	/**
-	 * Sets the text for the Gene information part of the browser. Will be prepended by a paragraph
-	 * header as defined in bpHeader
-	 * @param bpText	Text to display in HTML format
-	 */
-	public void setGeneText(String bpText) {
-		if(bpText == null) { //In case no information has to be displayed
-			this.bpText = bpHeader + "<I>No gene selected</I>";
-		} else {
-			this.bpText = bpHeader + bpText;
-		}
-		refresh();
-	}
-	
-	/**
-	 * Sets the text for the expression part of the browser. Will be prepended by a paragraph
-	 * header as defined in gexHeader
-	 * @param gexText	Text to display in HTML format
-	 */
-	public void setGexText(String gexText) {
-		if(gexText != null) { //In case no information has to be displayed
-			this.gexText = gexHeader + gexText;
-		} else {
-			this.gexText = "";
-		}
-		refresh();
-	}
-	
-	/**
 	 * Refreshes the text displayed in the browser
 	 */
 	public void refresh() {
 		getDisplay().asyncExec(new Runnable() {
 			public void run() {
-				bpBrowser.setText(header + bpText + gexText);	
+				bpBrowser.setText(text);	
 			}
 		});
 	}
-	
-	/**
-	 * Reads the header of the HTML content displayed in the browser. This header is displayed in the
-	 * file specified in the {@link HEADERFILE} field
-	 */
-	private void initializeHeader() {
-		try {
-			BufferedReader input = new BufferedReader(new InputStreamReader(
-						Engine.getResourceURL(BPDIR + "/" + HEADERFILE).openStream()));
-			String line;
-			header = "";
-			while((line = input.readLine()) != null) {
-				header += line.trim();
-			}
-		} catch (Exception e) {
-			Engine.log.error("Unable to read header file for backpage browser: " + e.getMessage(), e);
-		}
-	}
 
 	public void drawingEvent(SelectionEvent e) {
 		switch(e.type) {
Index: trunk/build.xml
===================================================================
--- trunk/build.xml	(revision 1044)
+++ trunk/build.xml	(revision 1045)
@@ -168,7 +168,7 @@
 		</jar>
 		<!-- different resources.jar, only with minimal data -->
 		<jar jarfile="${wikipathways.dir}/applet/resources.jar">
-			<!--<fileset dir="." includes="backpage/*"/>-->
+			<fileset dir="." includes="backpage/*"/>
 			<fileset dir="." includes="icons/*"/>
 			<!--<fileset dir="." includes="images/*"/>-->
 			<fileset dir="." includes="GPML.xsd"/>
Index: trunk/lib/derbyclient.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
