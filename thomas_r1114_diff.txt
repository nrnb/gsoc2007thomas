Index: trunk/pathvisio.sh
===================================================================
--- trunk/pathvisio.sh	(revision 1113)
+++ trunk/pathvisio.sh	(revision 1114)
@@ -45,40 +45,15 @@
 	esac
 done
 
+#Export classpath with script generated by ant-build
+source classpath.sh;
+
 export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib/atlas:/usr/lib/firefox
 export MOZILLA_FIVE_HOME=/usr/lib/firefox
 
-MYCLASSPATHBASE=lib/JRI.jar:\
-lib/BrowserLauncher.jar:\
-lib/org.eclipse.equinox.common.jar:\
-lib/org.eclipse.equinox.supplement.jar:\
-lib/org.eclipse.jface.jar:\
-lib/swt-linux-lib/swt.jar:\
-lib/org.eclipse.core.commands.jar:\
-lib/jdom.jar:\
-lib/derby.jar:\
-lib/swt-linux-lib.jar:\
-lib/resources.jar:\
-lib/batik/batik-awt-util.jar:\
-lib/batik/batik-ext.jar:\
-lib/batik/batik-script.jar:\
-lib/batik/batik-util.jar:\
-lib/batik/batik-dom.jar:\
-lib/batik/xml-apis.jar:\
-lib/batik/batik-xml.jar:\
-lib/batik/batik-extension.jar:\
-lib/batik/pdf-transcoder.jar:\
-lib/batik/batik-css.jar:\
-lib/batik/batik-transcoder.jar:\
-lib/batik/batik-svg-dom.jar:\
-lib/batik/batik-parser.jar:\
-lib/batik/batik-svggen.jar:\
-lib/batik/batik-bridge.jar:\
-lib/batik/batik-gvt.jar
+MYCLASSPATH1=$PATHVISIO_CP:build/v1
+MYCLASSPATH2=$PATHVISIO_CP:build/v2
 
-MYCLASSPATH1=$MYCLASSPATHBASE:build/v1
-MYCLASSPATH2=$MYCLASSPATHBASE:build/v2
-
 if [ $RUN_MODE = "DIRECT" ]; then
 	if [ $USE_EXPERIMENTAL = "0" ]; then
 		java -classpath $MYCLASSPATH1 -Djava.library.path="/usr/lib/firefox:./lib/swt-linux-lib" $MAIN_CLASS
Index: trunk/src/MANIFEST.MF
===================================================================
--- trunk/src/MANIFEST.MF	(revision 1113)
+++ trunk/src/MANIFEST.MF	(revision 1114)
@@ -1,3 +0,0 @@
-Manifest-Version: 1.0
-Main-Class: org.pathvisio.gui.GuiMain
-Class-Path: lib/resources.jar lib/derby.jar lib/R-resources.jar lib/swt-win32-lib/swt.jar lib/swt-linux-lib/swt.jar lib/org.eclipse.core.commands.jar lib/org.eclipse.equinox.common.jar lib/org.eclipse.jface.jar lib/hsqldb.jar lib/jdom.jar lib/JRI.jar lib/BrowserLauncher.jar lib/plugins.jar lib/batik/batik-awt-util.jar lib/batik/batik-bridge.jar lib/batik/batik-css.jar lib/batik/batik-dom.jar lib/batik/batik-ext.jar lib/batik/batik-extension.jar lib/batik/batik-gvt.jar lib/batik/batik-parser.jar lib/batik/batik-script.jar lib/batik/batik-svg-dom.jar lib/batik/batik-svggen.jar lib/batik/batik-transcoder.jar lib/batik/batik-util.jar lib/batik/batik-xml.jar lib/batik/pdf-transcoder.jar lib/batik/xml-apis.jar
Index: trunk/src/test/org/pathvisio/model/Test.java
===================================================================
--- trunk/src/test/org/pathvisio/model/Test.java	(revision 1113)
+++ trunk/src/test/org/pathvisio/model/Test.java	(revision 1114)
@@ -131,7 +131,7 @@
 	 */
 	public void testRef()
 	{	
-		assertNull ("query non-existing list of ref", data.getReferringObjects("abcde"));
+		assertTrue ("query non-existing list of ref", data.getReferringObjects("abcde").size() == 0);
 		
 		// create link
 		o.setGraphId("1");
@@ -139,7 +139,7 @@
 		assertTrue ("reference created", data.getReferringObjects("1").contains(l.getMStart()));
 		
 		l.setStartGraphRef("2");
-		assertNull ("reference removed", data.getReferringObjects("1"));
+		assertTrue ("reference removed", data.getReferringObjects("1").size() == 0);
 		
 		PathwayElement o2 = new PathwayElement(ObjectType.DATANODE);
 		data.add (o2);
Index: trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/MainWindowWikipathways.java
===================================================================
--- trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/MainWindowWikipathways.java	(revision 0)
+++ trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/MainWindowWikipathways.java	(revision 1114)
@@ -0,0 +1,32 @@
+package org.pathvisio.wikipathways.swt;
+
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+import org.pathvisio.Engine;
+import org.pathvisio.gui.swt.MainWindow;
+import org.pathvisio.gui.swt.SwtEngine;
+
+public class MainWindowWikipathways extends MainWindow {
+	WikiPathways wiki;
+	
+	public MainWindowWikipathways(WikiPathways w) {
+		super();
+		wiki = w;
+	}
+	protected boolean canHandleShellCloseEvent() {
+		if(Engine.getCurrent().getActivePathway().hasChanged()) {
+			Display.getCurrent().syncExec(new Runnable() {
+				public void run() {
+					boolean doit = MessageDialog.openQuestion(SwtEngine.getCurrent().getWindow().getShell(), "Save pathway?", 
+							"Do you want to save the changes to " + wiki.pwName + " on " + WikiPathways.SITE_NAME + "?");
+					if(doit) {
+						wiki.saveUI();
+					}
+					
+				}
+			});
+		}
+		return true;
+	}
+}
Index: trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/WikiPathways.java
===================================================================
--- trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/WikiPathways.java	(revision 0)
+++ trunk/src/wikipathways-swt/org/pathvisio/wikipathways/swt/WikiPathways.java	(revision 1114)
@@ -0,0 +1,466 @@
+package org.pathvisio.wikipathways.swt;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.RandomAccessFile;
+import java.lang.reflect.InvocationTargetException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.HashMap;
+
+import org.apache.commons.codec.binary.Base64;
+import org.apache.xmlrpc.XmlRpcException;
+import org.apache.xmlrpc.XmlRpcRequest;
+import org.apache.xmlrpc.client.XmlRpcClient;
+import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
+import org.apache.xmlrpc.client.XmlRpcClientException;
+import org.apache.xmlrpc.client.XmlRpcHttpClientConfig;
+import org.apache.xmlrpc.client.XmlRpcHttpTransport;
+import org.apache.xmlrpc.client.XmlRpcTransport;
+import org.apache.xmlrpc.client.XmlRpcTransportFactory;
+import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig;
+import org.apache.xmlrpc.util.HttpUtil;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.jface.action.ControlContribution;
+import org.eclipse.jface.action.ToolBarContributionItem;
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+import org.pathvisio.Engine;
+import org.pathvisio.debug.Logger;
+import org.pathvisio.gui.swt.GuiMain;
+import org.pathvisio.gui.swt.MainWindow;
+import org.pathvisio.gui.swt.SwtEngine;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.Pathway;
+import org.pathvisio.model.PathwayElement;
+import org.pathvisio.util.swt.SwtUtils.SimpleRunnableWithProgress;
+import org.xml.sax.SAXException;
+
+public class WikiPathways {
+	public static String SITE_NAME = "WikiPathways.org";
+	HashMap<String, String> cookie;
+	String rpcURL;
+	String pwName;
+	String pwSpecies;
+	String pwURL;
+	String user;
+	boolean isNew;
+	
+	File localFile;
+	
+	public WikiPathways() {
+		cookie = new HashMap<String, String>();
+	}
+
+	public static void main(String[] args)
+	{			
+		final Display d = new Display();
+		ProgressMonitorDialog pdstart = new ProgressMonitorDialog(new Shell(d, SWT.ON_TOP));
+		try {
+			pdstart.run(true, false, new IRunnableWithProgress() {
+				public void run(IProgressMonitor m) throws InvocationTargetException, InterruptedException {
+					m.beginTask("Starting PathVisio", IProgressMonitor.UNKNOWN);
+					GuiMain.initiate();				
+					m.done();
+				}
+			});
+		} catch (Exception e) {
+			e.printStackTrace(); //Log not started yet
+		}
+		
+		d.dispose();
+				
+		//Parse comman-line arguments
+		final WikiPathways wiki = new WikiPathways();
+		for(int i = 0; i < args.length - 1; i++) {
+			//Check for parameters
+			String a = args[i];
+			if(a.startsWith("-")) {
+				if		(a.equalsIgnoreCase("-c")) {
+					String c = args[i+1];
+					int sep = c.indexOf('=');
+					if(sep <= 0 || sep >= c.length() - 1) {
+						error("Error in input parameters", new Exception("Error in -c parameter"));
+						System.exit(-1);
+					} else {
+						Logger.log.trace("Parsed -c argument" + c);
+						wiki.setCookie(c.substring(0, sep), c.substring(sep + 1));
+					}
+				}
+				else if	(a.equalsIgnoreCase("-pwName")) {
+					Logger.log.trace("Parsed -pwName argument" + args[i+1]);
+					wiki.setPathwayName(args[i+1]);
+				}
+				else if	(a.equalsIgnoreCase("-pwUrl")) {
+					Logger.log.trace("Parsed -pwUrl argument" + args[i+1]);
+					wiki.setPathwayURL(args[i+1]);
+				}
+				else if	(a.equalsIgnoreCase("-rpcUrl")) {
+					Logger.log.trace("Parsed -rpcUrl argument" + args[i+1]);
+					wiki.setRpcURL(args[i+1]);
+				}
+				else if (a.equalsIgnoreCase("-pwSpecies")) {
+					Logger.log.trace("Parsed -pwSpecies argument" + args[i+1]);
+					wiki.setPathwaySpecies(args[i+1]);
+				}
+				else if (a.equalsIgnoreCase("-user")) {
+					Logger.log.trace("Parsed -user argument" + args[i+1]);
+					wiki.setUser(args[i+1]);
+				}
+				else if (a.equalsIgnoreCase("-new")) {
+					Logger.log.trace("Parsed -new flag");
+					String value = args[i+1];
+					if(value.equalsIgnoreCase("true") || value.equals("1")) {
+						wiki.setNew(true);
+					}
+				}
+			}
+		}
+		
+		final MainWindow window = new MainWindowWikipathways(wiki);
+		SwtEngine.getCurrent().setWindow(window);
+		
+		//Start PathVisio in a seperate thread
+		Thread thr = new Thread() {
+			public void run() {				
+				window.setBlockOnOpen(true);
+				wiki.addSaveButton(window);
+				window.open();
+
+				Display.getCurrent().dispose();
+				Logger.log.getStream().close();
+			}
+		};
+		thr.start();
+		
+		//Wait for PathVisio to startup
+		Logger.log.trace("\t> Waiting for window to open");
+		while(window.getShell() == null) {
+			try {
+				Thread.sleep(50);
+			} catch (InterruptedException e) {
+				//Swallow it
+			}
+		}
+
+//		Open pathway, or create new one
+		if(wiki.isNew()) {//New pathway
+			Engine.getCurrent().newPathway();
+			window.getShell().getDisplay().asyncExec(new Runnable() {
+				public void run() {
+					Pathway data = Engine.getCurrent().getActivePathway();
+					PathwayElement info = data.getMappInfo();
+					if(wiki.user != null) info.setAuthor(wiki.user);
+					info.setMapInfoName(wiki.pwName);
+				}
+			});
+		} else { //Open pathway
+			Logger.log.trace("Opening pathway " + wiki.pwURL);
+			final Shell wshell = SwtEngine.getCurrent().getWindow().getShell();
+			final SimpleRunnableWithProgress sp = new SimpleRunnableWithProgress(
+					WikiPathways.class, "openPathwayURL", new Class[] {}, new Object[] {}, wiki);
+			SimpleRunnableWithProgress.setMonitorInfo(
+					"Downloading patwhay from " + SITE_NAME, IProgressMonitor.UNKNOWN);
+
+			final ProgressMonitorDialog pd = new ProgressMonitorDialog(wshell);
+			wshell.getDisplay().asyncExec(new Runnable() {
+				public void run() {
+					try {
+						pd.run(true, false, sp);
+					} catch (Exception e) {
+						error(wshell, "Unable to open pathway", e);
+						System.exit(-1);
+					}
+				}
+			});
+		}
+	}
+
+
+	static void error(final String error, final Throwable e) {
+		Display d = Display.getDefault();
+		d.syncExec(new Runnable() {
+			public void run() {
+				Shell shell = new Shell();
+				error(shell, error, e);
+			}
+		});
+	}
+
+	static void error(final Shell shell, final String error, final Throwable e) {
+		Logger.log.error(error, e);
+		shell.getDisplay().syncExec(new Runnable() {
+			public void run() {
+				Throwable ex = e;
+				if(ex instanceof InvocationTargetException) ex = ex.getCause();
+				MessageDialog.openError(shell, error, ex != null ? ex.getMessage() : "No message specified");
+			}
+		});
+	}
+	
+	protected void setCookie(String key, String value) {
+		cookie.put(key, value);
+	}
+
+	public void openPathwayURL() throws Exception {
+		RunnableWithException re = new RunnableWithException() {
+			public void run() {
+				try {
+					localFile = SwtEngine.getCurrent().openPathway(new URL(pwURL));
+					Engine.getCurrent().getActiveVPathway().setEditMode(true);
+				} catch(Exception e) {
+					this.e = e;
+				}
+			}
+		};
+		SwtEngine.getCurrent().getWindow().getShell().getDisplay().syncExec(re);
+		if(re.e != null) throw re.e;
+	}
+	
+	abstract class RunnableWithException implements Runnable {
+		Exception e;
+		public void runWithException() throws Exception {
+			run();
+			if(e != null) throw e;
+		}
+	}
+	
+	protected void setNew(boolean isNew) {
+		this.isNew = isNew;
+	}
+	
+	public boolean isNew() {
+		return isNew;
+	}
+	
+	protected File getLocalFile() { 
+		if(localFile == null) {
+			try {
+				localFile = File.createTempFile("tmp", ".gpml");
+			} catch(Exception e) {
+				return null;
+			}
+		}
+		return localFile;
+	}
+	
+	protected void setPathwayName(String pathwayName) {
+		pwName = pathwayName;
+	}
+	
+	protected void setPathwaySpecies(String pathwaySpecies) {
+		pwSpecies = pathwaySpecies;
+	}
+	
+	protected void setPathwayURL(String pathwayURL) {
+		pwURL = pathwayURL;
+	}
+	
+	protected void setRpcURL(String rpcURL) {
+		this.rpcURL = rpcURL;
+	}
+	
+	public void setUser(String user) {
+		this.user = user;
+	}
+	void addSaveButton(MainWindow w) {
+		ToolBarContributionItem tc = (ToolBarContributionItem)w.getCoolBarManager().find("CommonActions");
+		
+		tc.getToolBarManager().add(new ControlContribution("SaveToWiki") {
+			protected Control createControl(Composite parent) {
+				final Button b = new Button(parent, SWT.PUSH);
+				//b.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_GREEN));
+				b.setText("Save to " + SITE_NAME);
+				b.setToolTipText("Save current pathway as '" + pwName + "' on " + SITE_NAME);
+				b.addSelectionListener(new SelectionAdapter() {
+					public void widgetSelected(SelectionEvent e) {
+						saveUI();
+					}
+				});
+				return b;
+			}
+		});
+	}
+	
+	boolean ovrChanged;
+	
+	protected void saveToWiki(String description) throws XmlRpcException, IOException, ConverterException {		
+		//TODO: check if changed
+		if(ovrChanged || Engine.getCurrent().getActivePathway().hasChanged()) {
+			ovrChanged = true; //In case we get an error, save changes next time
+			File gpmlFile = getLocalFile();
+			//Save current pathway to local file
+			Engine.getCurrent().savePathway(gpmlFile);
+			saveToWiki(description, gpmlFile);
+			ovrChanged = false; //Save successfull, don't save next time
+		} else {
+			Logger.log.trace("No changes made, ignoring save");
+			//Do nothing, no changes made
+		}
+	}
+	
+	protected void saveToWiki(String description, File gpmlFile) throws XmlRpcException, IOException {	
+		XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
+		config.setServerURL(new URL(rpcURL));
+	
+		XmlRpcClient client = new XmlRpcClient();
+		XmlRpcCookieTransportFactory ctf = new XmlRpcCookieTransportFactory(client);
+	
+		XmlRpcCookieHttpTransport ct = (XmlRpcCookieHttpTransport)ctf.getTransport();
+		for(String key : cookie.keySet()) {
+			Logger.log.trace("Setting cookie: " + key + "=" + cookie.get(key));
+			ct.addCookie(key, cookie.get(key));
+		}
+		
+		client.setTransportFactory(ctf);
+		client.setConfig(config);
+		
+		RandomAccessFile raf = new RandomAccessFile(gpmlFile, "r");
+		byte[] data = new byte[(int)raf.length()];
+		raf.readFully(data);
+		byte[] data64 = Base64.encodeBase64(data);
+		Object[] params = new Object[]{ pwName, pwSpecies, description, data64 };
+				
+		client.execute("WikiPathways.updatePathway", params);
+	}
+
+	protected void saveUI() {
+		Shell shell = SwtEngine.getCurrent().getWindow().getShell();
+
+		String d = "New pathway";
+		if(!isNew()) {
+			//Dialog for modification description
+			InputDialog dialog = new InputDialog(shell, "Save to " + SITE_NAME, "Please specify an edit summary (description of changes)", "", null);
+			int status = dialog.open();
+			if(status == InputDialog.CANCEL) {
+				return;
+			}
+			d = dialog.getValue();
+		}
+		final String descr = d;
+
+		//Progressbar for saving pathway
+		try {
+			IRunnableWithProgress op = new IRunnableWithProgress() {
+				public void run(IProgressMonitor m) throws InvocationTargetException, InterruptedException {
+					try {
+						m.beginTask("Saving pathway to " + SITE_NAME, IProgressMonitor.UNKNOWN);
+						saveToWiki(descr);
+						m.done();
+					} catch(Exception e) {
+						throw new InvocationTargetException(e);
+					}
+				}
+			};
+			ProgressMonitorDialog pd2 = new ProgressMonitorDialog(shell);
+
+			Logger.log.trace("Saving to wiki: " + System.currentTimeMillis());
+			pd2.run(true, false, op);
+			Logger.log.trace("Finished: " + System.currentTimeMillis());
+
+			if(isNew()) {
+				SwtEngine.getCurrent().openWebPage(pwURL, "Opening pathway on " + SITE_NAME, "Unable to open pathway at " + pwURL);
+			} else {
+				MessageDialog.openInformation(shell, "Info", "Pathway saved to " + SITE_NAME + 
+				", please press 'refresh' in your browser or hit F5 to refresh the pathway image");
+			}
+			setNew(false); //Saved, so not new anymore
+		} catch (InvocationTargetException e) {
+			// handle exception
+			error(shell, "Unable to save pathway to wiki", e.getCause());
+		} catch (InterruptedException ie) {
+			error(shell, "Unable to save pathway to wiki", ie);
+		}
+	}
+
+	static class XmlRpcCookieTransportFactory implements XmlRpcTransportFactory {
+		private final XmlRpcCookieHttpTransport TRANSPORT;
+
+		public XmlRpcCookieTransportFactory(XmlRpcClient pClient) {
+			TRANSPORT = new XmlRpcCookieHttpTransport(pClient);
+		 }
+		
+		public XmlRpcTransport getTransport() { return TRANSPORT; }
+	}
+
+	/** Implementation of an HTTP transport that supports sending cookies with the
+	 * HTTP header, based on the {@link java.net.HttpURLConnection} class.
+	 */
+	public static class XmlRpcCookieHttpTransport extends XmlRpcHttpTransport {
+		private static final String userAgent = USER_AGENT + " (Sun HTTP Transport, mod Thomas)";
+		private static final String cookieHeader = "Cookie";
+		private URLConnection conn;
+		private HashMap<String, String> cookie;
+		
+		public XmlRpcCookieHttpTransport(XmlRpcClient pClient) {
+			super(pClient, userAgent);
+			cookie = new HashMap<String, String>();
+		}
+
+		public void addCookie(String key, String value) {
+			cookie.put(key, value);
+		}
+		
+		protected void setCookies() {
+			String cookieString = null;
+			for(String key : cookie.keySet()) {
+				cookieString = (cookieString == null ? "" : cookieString + "; ") + key + "=" + cookie.get(key);
+			}
+			if(cookieString != null) {
+				conn.setRequestProperty(cookieHeader, cookieString);
+			}
+		}
+		
+		public Object sendRequest(XmlRpcRequest pRequest) throws XmlRpcException {
+			XmlRpcHttpClientConfig config = (XmlRpcHttpClientConfig) pRequest.getConfig();
+			try {
+				conn = config.getServerURL().openConnection();
+				conn.setUseCaches(false);
+				conn.setDoInput(true);
+				conn.setDoOutput(true);
+				setCookies();
+			} catch (IOException e) {
+				throw new XmlRpcException("Failed to create URLConnection: " + e.getMessage(), e);
+			}
+			return super.sendRequest(pRequest);
+		}
+
+		protected void setRequestHeader(String pHeader, String pValue) {
+			conn.setRequestProperty(pHeader, pValue);
+			
+		}
+
+		protected void close() throws XmlRpcClientException {
+			if (conn instanceof HttpURLConnection) {
+				((HttpURLConnection) conn).disconnect();
+			}
+		}
+
+		protected boolean isResponseGzipCompressed(XmlRpcStreamRequestConfig pConfig) {
+			return HttpUtil.isUsingGzipEncoding(conn.getHeaderField("Content-Encoding"));
+		}
+
+		protected InputStream getInputStream() throws XmlRpcException {
+			try {
+				return conn.getInputStream();
+			} catch (IOException e) {
+				throw new XmlRpcException("Failed to create input stream: " + e.getMessage(), e);
+			}
+		}
+
+		protected void writeRequest(ReqWriter pWriter) throws IOException, XmlRpcException, SAXException {
+	        pWriter.write(conn.getOutputStream());
+		}
+	}
+}
Index: trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java
===================================================================
--- trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 1113)
+++ trunk/src/v2/org/pathvisio/gui/swt/MainWindow.java	(revision 1114)
@@ -298,7 +298,7 @@
 			statsMenu.add(rStatsAction);
 			statsMenu.add(rLoadStatsAction);
 		}
-		dataMenu.add(new CommonActions.BiopaxAction(this));
+//		dataMenu.add(new CommonActions.BiopaxAction(this));
 		
 		MenuManager helpMenu = new MenuManager ("&Help");
 		helpMenu.add(aboutAction);
Index: trunk/src/core/org/pathvisio/model/ImageExporter.java
===================================================================
--- trunk/src/core/org/pathvisio/model/ImageExporter.java	(revision 1113)
+++ trunk/src/core/org/pathvisio/model/ImageExporter.java	(revision 1114)
@@ -16,24 +16,30 @@
 //
 package org.pathvisio.model;
 
+import java.awt.Dimension;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.FileWriter;
 import java.io.OutputStream;
+import java.io.Writer;
 
+import org.apache.batik.dom.GenericDOMImplementation;
+import org.apache.batik.svggen.SVGGraphics2D;
 import org.apache.batik.transcoder.Transcoder;
 import org.apache.batik.transcoder.TranscoderInput;
 import org.apache.batik.transcoder.TranscoderOutput;
 import org.apache.batik.transcoder.image.ImageTranscoder;
 import org.apache.batik.transcoder.image.PNGTranscoder;
 import org.apache.batik.transcoder.image.TIFFTranscoder;
-import org.jdom.Document;
-import org.jdom.JDOMException;
-import org.jdom.output.DOMOutputter;
+import org.pathvisio.view.VPathway;
+import org.w3c.dom.DOMImplementation;
+import org.w3c.dom.Document;
 
 public class ImageExporter implements PathwayExporter {
 	public static final int TYPE_PNG = 0;
 	public static final int TYPE_TIFF = 1;
 	public static final int TYPE_PDF = 2;
+	public static final int TYPE_SVG = 3;
 	
 	private int type;
 	private String[] extensions;
@@ -57,6 +63,8 @@
 			return "tiff";
 		case TYPE_PDF:
 			return "pdf";
+		case TYPE_SVG:
+			return "svg";
 		default:
 			return null;
 		}
@@ -70,17 +78,40 @@
 			return "TIFF";
 		case TYPE_PDF:
 			return "PDF";
+		case TYPE_SVG:
+			return "SVG";
 		default:
 			return null;
 		}
 		
 	}
 	
-	public void doExport(File file, Pathway pathway) throws ConverterException {
-		Document svg = SvgFormat.createJdom(pathway);
+	public void doExport(File file, Pathway pathway) throws ConverterException {		
+		VPathway vPathway = new VPathway(null);
+		vPathway.fromGmmlData(pathway);
 		
+		double width = vPathway.getVWidth();
+		double height = vPathway.getVHeight();
+		
+		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
+		Document svg = domImpl.createDocument ("http://www.w3.org/2000/svg", "svg", null);
+		
+		SVGGraphics2D svgG2d = new SVGGraphics2D(svg);
+		svgG2d.setSVGCanvasSize(new Dimension((int)width, (int)height));
+		vPathway.draw(svgG2d);
+		
 		Transcoder t = null;
 		switch(type) {
+		case TYPE_SVG:
+			try {
+				Writer out = new FileWriter(file);			
+				svgG2d.stream(out, true);
+				out.flush();
+				out.close();
+			} catch(Exception e) {
+				throw new ConverterException(e);
+			}
+			return;
 		case TYPE_PNG:
 			t = new PNGTranscoder();
 			break;
@@ -99,7 +130,7 @@
 		t.addTranscodingHint(ImageTranscoder.KEY_BACKGROUND_COLOR, java.awt.Color.WHITE);
 
 		try {
-			TranscoderInput input = new TranscoderInput(convertToDOM(svg));
+			TranscoderInput input = new TranscoderInput(svg);
 
 			// Create the transcoder output.
 			OutputStream ostream = new FileOutputStream(file);
@@ -119,10 +150,4 @@
 	public void noExporterException() throws ConverterException {
 		throw new ConverterException("No exporter for this image format");
 	}
-
-	public org.w3c.dom.Document convertToDOM(org.jdom.Document jdomDoc) throws JDOMException {
-		DOMOutputter outputter = new DOMOutputter();
-		return outputter.output(jdomDoc);
-	}
-
 }
Index: trunk/src/core/org/pathvisio/model/Pathway.java
===================================================================
--- trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1113)
+++ trunk/src/core/org/pathvisio/model/Pathway.java	(revision 1114)
@@ -199,9 +199,13 @@
 			throw new IllegalArgumentException("Can't remove mappinfo object!");
 		if (o.getObjectType() == ObjectType.INFOBOX)
 			throw new IllegalArgumentException("Can't remove infobox object!");
+		o.removeListener(this);
+		dataObjects.remove(o);
+		List<GraphRefContainer> references = getReferringObjects(o.getGraphId());
+		for(GraphRefContainer refc : references) {
+			refc.setGraphRef(null);
+		}
 		fireObjectModifiedEvent(new PathwayEvent(o, PathwayEvent.DELETED));
-		o.removeListener(this);
-		dataObjects.remove(o);		
 		o.setParent(null);
 	}
 
@@ -336,7 +340,13 @@
 	 */
 	public List<GraphRefContainer> getReferringObjects (String id)
 	{
-		return graphRefs.get(id);
+		List<GraphRefContainer> refs = graphRefs.get(id);
+		if(refs != null) {
+			refs = new ArrayList<GraphRefContainer>(refs);
+		} else {
+			refs = new ArrayList<GraphRefContainer>();
+		}
+		return refs;
 	}
 	
 	private File sourceFile = null;
Index: trunk/src/core/org/pathvisio/model/GraphLink.java
===================================================================
--- trunk/src/core/org/pathvisio/model/GraphLink.java	(revision 1113)
+++ trunk/src/core/org/pathvisio/model/GraphLink.java	(revision 1114)
@@ -115,7 +115,7 @@
 		
 		List<GraphRefContainer> reflist = gd.getReferringObjects(gid.getGraphId());
 		
-		if (reflist != null && !gid.getGraphId().equals("")) 
+		if (!gid.getGraphId().equals("")) 
 		{
 			// get all referring points as a hashset, so
 			// that a line that refers to the same object twice
Index: trunk/src/core/org/pathvisio/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/Engine.java	(revision 1113)
+++ trunk/src/core/org/pathvisio/Engine.java	(revision 1114)
@@ -127,11 +127,28 @@
 		openPathway(pathwayFile, null);
 	}
 	
+	public void exportPathway(File file) throws ConverterException {
+		Logger.log.trace("Exporting pathway to " + file);
+		String fileName = file.toString();
+
+		int dot = fileName.lastIndexOf('.');
+		String ext = null;
+		if(dot >= 0) {
+			ext = fileName.substring(dot + 1, fileName.length());
+		}
+		PathwayExporter exporter = getPathwayExporter(ext);
+
+		if(exporter == null) throw new ConverterException( "No exporter for '" + ext +  "' files" );
+
+		exporter.doExport(file, pathway);	
+	}
+	
 	public void importPathway(File file) throws ConverterException {
 		importPathway(file, null);
 	}
 	
 	public void importPathway(File file, VPathwayWrapper wrapper) throws ConverterException {
+		Logger.log.trace("Importing pathway from " + file);
 		String fileName = file.toString();
 		
 		int dot = fileName.lastIndexOf('.');
Index: trunk/src/core/org/pathvisio/util/Converter.java
===================================================================
--- trunk/src/core/org/pathvisio/util/Converter.java	(revision 1113)
+++ trunk/src/core/org/pathvisio/util/Converter.java	(revision 1114)
@@ -24,9 +24,14 @@
 
 import java.io.File;
 
+import org.pathvisio.Engine;
 import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.GpmlFormat;
+import org.pathvisio.model.ImageExporter;
+import org.pathvisio.model.MappFormat;
 import org.pathvisio.model.Pathway;
+import org.pathvisio.model.SvgFormat;
 
 /**
  * @author Thomas Kelder (t.a.j.kelder@student.tue.nl)
@@ -35,146 +40,83 @@
     
 	public static void printUsage()
 	{
-		System.out.println ("GenMAPP <-> GPML Converter\n" +
+		System.out.println ("GPML Converter\n" +
 				"Usage:\n" +
 				"\tjava Converter <input filename> [<output filename>]\n" +
 				"\n" +
-				"Converts between GenMAPP mapp format and PathVisio GPML format.\n" +
+				"Converts between GPML format and several other formats:\n" +
+				"\t- GPML (.gpml/.xml) <-> GenMAPP (.mapp)\n" +
+				"\t- GPML (.gpml/.xml) -> SVG (.svg)\n" +
+				"\t- GPML (.gpml/.xml) -> PNG (.png)\n" +
+				"\t- GPML (.gpml/.xml) -> TIFF (.tiff)\n" +
+				"\t- GPML (.gpml/.xml) -> PDF (.pdf)\n" +
 				"The conversion direction is determined from the extension of the input file.\n" +
-				"Valid extensions are:\n" +
-				"\t.mapp for GenMAPP mapp format,\n" +
-				"\t.xml or .gpml for PathVisio GPML format\n." +
-				"\n" +
 				"Return codes:\n" +
 				"\t 0: OK\n" +
 				"\t-1: Parameter or file error\n" +
-				"\t-2: Conversion error\n" +
-				"\t-3: Validation error\n");
+				"\t-2: Conversion error\n"
+			);
 	}
 	
-	
 	/**
      * Command line arguments:
      *
      */ 
     public static void main(String[] args) 
     {
-    	String outputString = "";
-        String inputString = "";
+    	Engine engine = Engine.getCurrent();
+    	engine.addPathwayImporter(new GpmlFormat());
+    	engine.addPathwayImporter(new MappFormat());
+		engine.addPathwayExporter(new MappFormat());
+		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_SVG));
+		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
+		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
+		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
+    	
         File inputFile = null;
         File outputFile = null;
-        boolean fromMappToGmml = true;
         
         // Handle command line arguments
         // Check for custom output path
-        Logger log = new Logger();
-		log.setStream (System.err);		
+        Logger.log.setStream (System.err);		
 						//debug, trace, info, warn, error, fatal
-		log.setLogLevel (false, false, true, true, true, true);
+        Logger.log.setLogLevel (false, false, true, true, true, true);
 		
 		boolean error = false;
 		if (args.length == 0)
 		{
-			log.error ("Need at least one command line argument");
+			Logger.log.error ("Need at least one command line argument");
 			error = true;			
 		}
 		else if (args.length > 2)
 		{
-			log.error ("Too many arguments");
+			Logger.log.error ("Too many arguments");
 			error = true;
 		}
 		else
 		{
 			inputFile = new File(args[0]);
-			inputString = args[0];
-		}		
-		
-		if (!error)
-		{
-			if(inputString.endsWith(".mapp")) 
-			{
-				fromMappToGmml = true;
+			outputFile = new File(args[1]);
+			if(inputFile == null || !inputFile.canRead()) {
+				Logger.log.error("Unable to read inputfile: " + inputFile);
 			}
-			else if (inputString.endsWith(".xml"))
-			{
-				fromMappToGmml = false;
+			if(outputFile == null || !outputFile.canWrite()) {
+				Logger.log.error("Unable to write outputfile: " + outputFile);
 			}
-			else if (inputString.endsWith(".gpml"))
-			{
-				fromMappToGmml = false;
-			}
-			else
-			{
-				log.error ("Wrong extension for input file: must be .mapp, .xml or .gpml");
-				error = true;
-			}
-		}
-
-		if (!error)
-		{
-			if (args.length == 2)
-			{
-				outputString = args[1];
-			}
-			else
-			{
-				outputString = inputString;
-				int pos = outputString.lastIndexOf('.');
-				if (pos >= 0)
-					outputString = outputString.substring(0, pos);
-				outputString = outputString + (fromMappToGmml ? ".gpml" : ".mapp");
-			}
-			outputFile = new File (outputString);
-		}
+		}		
 		
-
 		if (!error)
 		{
-			if (inputFile.exists() && inputFile.canRead())
-				;			
-			else
-			{
-				log.error("Can't read from file " + args[0]);
-				error = true;
-			}			
-		}
-		
-		if (!error)
-		{
-			log.info("Source: " + inputString);
-			log.info("Dest:   " + outputString);
-			log.info("Going from " + 
-					(fromMappToGmml ? "mapp to gpml " : "gpml to mapp"));
-
-			boolean valid = true;
-			
-			try
-			{
-				if (fromMappToGmml)
-				{
-					Pathway gmmlData = new Pathway();
-					gmmlData.readFromMapp(inputFile);
-					gmmlData.writeToXml(outputFile, true);					
-				}
-				else
-				{
-					Pathway gmmlData = new Pathway();
-					gmmlData.readFromXml(inputFile, true);					
-					gmmlData.writeToMapp(outputFile);
-				}
+			try {
+				engine.importPathway(inputFile);
+				engine.exportPathway(outputFile);
+			} catch(ConverterException e) {
+				e.printStackTrace();
+				System.exit(-2);
 			}
-			catch (ConverterException e)
-			{
-				log.error(e.getMessage(), e);
-				System.exit(-2);			
-			}
-			System.exit(valid ? 0 : -3);
-		}
-		else
-		{
+		} else {
 			printUsage();
 			System.exit(-1);
-		}        
-                
+		}
     }
 }
Index: trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxRefDialog.java
===================================================================
--- trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxRefDialog.java	(revision 0)
+++ trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxRefDialog.java	(revision 1114)
@@ -0,0 +1,151 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.biopax.gui;
+
+import org.biopax.paxtools.model.level2.BioPAXElement;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.viewers.ILabelProviderListener;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.jface.viewers.ISelectionChangedListener;
+import org.eclipse.jface.viewers.IStructuredContentProvider;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.jface.viewers.ITableLabelProvider;
+import org.eclipse.jface.viewers.SelectionChangedEvent;
+import org.eclipse.jface.viewers.StructuredSelection;
+import org.eclipse.jface.viewers.TableViewer;
+import org.eclipse.jface.viewers.Viewer;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Table;
+import org.eclipse.swt.widgets.TableColumn;
+import org.pathvisio.biopax.BiopaxManager;
+
+public class BiopaxRefDialog extends Dialog {	
+	BiopaxManager biopax;
+	String ref;
+	
+	TableViewer tableViewer;
+
+	public BiopaxRefDialog(Shell shell, BiopaxManager bp, String ref) {
+		super(shell);
+		setShellStyle(SWT.DIALOG_TRIM | SWT.RESIZE);
+		biopax = bp;
+		this.ref = ref;
+	}
+		
+	protected void createButtonsForButtonBar(Composite parent) {
+		createButton(parent, IDialogConstants.OK_ID,
+				IDialogConstants.OK_LABEL, true);
+		createButton(parent, IDialogConstants.CANCEL_ID,
+				IDialogConstants.CANCEL_LABEL, false);
+	}
+
+	public String getRef() {
+		return ref;
+	}
+	
+	public void setRef(String r) {
+		ref = r;
+	}
+	
+	protected Control createDialogArea(Composite parent) {
+		 Composite comp = (Composite) super.createDialogArea(parent);
+		 comp.setLayout(new GridLayout());
+		 
+		 
+		 tableViewer = new TableViewer(comp, SWT.SINGLE | SWT.V_SCROLL | SWT.H_SCROLL);
+		 Table t = tableViewer.getTable();
+		 t.setHeaderVisible(true);
+		 TableColumn tcElm = new TableColumn(t, SWT.LEFT);
+		 tcElm.setText("Element");
+		 tcElm.setWidth(500);
+		 TableColumn tcID = new TableColumn(t, SWT.LEFT);
+		 tcID.setText("ID");
+		 tcID.setWidth(100);
+		 
+		 tableViewer.setContentProvider(new IStructuredContentProvider() {
+			public Object[] getElements(Object input) {
+				BiopaxManager bpm = (BiopaxManager)input;
+				if(bpm != null) {
+					return bpm.getModel().getObjects().toArray();
+				} else {
+					return new Object[] {};
+				}
+			}
+
+			public void dispose() { }
+
+			public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {	}
+			 
+		 });
+		 tableViewer.setLabelProvider(new ITableLabelProvider() {
+			public void addListener(ILabelProviderListener l) { }
+			public void dispose() { }
+			public boolean isLabelProperty(Object value, String property) {
+				return false;
+			}
+			public void removeListener(ILabelProviderListener l) { }
+			public Image getColumnImage(Object value, int col) { return null; }
+			public String getColumnText(Object value, int col) {
+				BioPAXElement bpe = (BioPAXElement)value;
+				switch(col) {
+				case 0:
+					return bpe.getRDFId();
+				case 1:
+					return bpe.getClass().toString();
+				default: return "";
+				}
+			}
+		 });
+		 tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent e) {
+				BioPAXElement selected = getSelectedObject(e.getSelection());
+				setRef(selected.getRDFId());
+			}	
+		 });
+		 
+		 init();
+		 
+		 return comp;
+	}
+	
+	BioPAXElement getSelectedObject(ISelection s) {
+		return (BioPAXElement)
+			((IStructuredSelection)s).getFirstElement();
+	}
+	
+	private void update() {
+		if(tableViewer != null) {
+			tableViewer.setInput(biopax);
+			tableViewer.refresh();
+		}
+	}
+	
+	private void init() {
+		tableViewer.setInput(biopax);
+		BioPAXElement pe = biopax.getModel().getIdMap().get(ref);
+		if(pe != null) {
+			tableViewer.setSelection(new StructuredSelection(pe));
+		}
+	}
+	
+}
\ No newline at end of file
Index: trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxDialog.java
===================================================================
--- trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxDialog.java	(revision 0)
+++ trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxDialog.java	(revision 1114)
@@ -0,0 +1,104 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.biopax.gui;
+
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Text;
+import org.pathvisio.biopax.BiopaxManager;
+import org.pathvisio.debug.Logger;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.Pathway;
+
+public class BiopaxDialog extends Dialog {
+	Pathway pathway;
+	BiopaxManager biopax;
+	Text text;
+	
+	public BiopaxDialog(Shell shell) {
+		super(shell);
+		setShellStyle(SWT.DIALOG_TRIM | SWT.RESIZE);
+	}
+
+	public void setPathway(Pathway p) {
+		pathway = p;
+		biopax = new BiopaxManager(p.getBiopax().getBiopax());
+		update();
+	}
+	
+	protected String getBiopaxString() {
+		return text.getText();
+	}
+	
+	public void update() {
+		if(text != null && !text.isDisposed()) {
+			if(biopax != null) {
+				try {
+					text.setText(biopax.getXml());
+				} catch(ConverterException e) {
+					text.setText(e.toString());
+					Logger.log.error("Unable to set BioPAX text", e);
+				}
+			} else {
+				text.setText("");
+			}
+		}
+	}
+	
+    protected void createButtonsForButtonBar(Composite parent) {
+        createButton(parent, IDialogConstants.OK_ID,
+            IDialogConstants.OK_LABEL, true);
+        createButton(parent, IDialogConstants.CANCEL_ID,
+            IDialogConstants.CANCEL_LABEL, false);
+    }
+    
+	protected Control createDialogArea(Composite parent) {
+		 Composite comp = (Composite) super.createDialogArea(parent);
+		 comp.setLayout(new FillLayout());
+		 
+		 text = new Text(comp, SWT.MULTI | SWT.WRAP | SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER);
+		 text.setSize(500, 500);
+		 update();		 
+		 return comp;
+	}
+
+	protected void updateBiopax() {
+		biopax.setModel(BiopaxManager.modelFromString(getBiopaxString()));
+	}
+	protected void updatePathway() throws ConverterException {
+		pathway.getBiopax().setBiopax(biopax.getDocument());
+	}
+	
+	protected void okPressed() {
+		try {
+			updateBiopax();
+			updatePathway();
+		} catch(Exception e) {
+			MessageDialog.openError(getShell(), 
+					"Invalid BioPAX code", 
+					"The BioPAX code is invalid:\n" + e.getMessage());
+			return;
+		}
+		super.okPressed();
+	}
+}
Index: trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxCellEditor.java
===================================================================
--- trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxCellEditor.java	(revision 0)
+++ trunk/src/biopax-paxtools/org/pathvisio/biopax/gui/BiopaxCellEditor.java	(revision 1114)
@@ -0,0 +1,43 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.biopax.gui;
+
+import org.eclipse.jface.viewers.DialogCellEditor;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.pathvisio.Engine;
+import org.pathvisio.biopax.BiopaxManager;
+
+public class BiopaxCellEditor extends DialogCellEditor {	
+	public BiopaxCellEditor(Composite parent, String label) {
+		super(parent);
+	}
+	
+	protected Button createButton(Composite parent) {
+		Button b = super.createButton(parent);
+		b.setText("...");
+		return b;
+	}
+
+	protected Object openDialogBox(Control cellEditorWindow) {
+		BiopaxManager bpm = new BiopaxManager(Engine.getCurrent().getActivePathway().getBiopax().getBiopax());
+		BiopaxRefDialog d = new BiopaxRefDialog(cellEditorWindow.getShell(), bpm, (String)getValue());
+		d.open();
+		return d.getRef();
+	}
+}
Index: trunk/src/biopax-paxtools/org/pathvisio/biopax/BiopaxManager.java
===================================================================
--- trunk/src/biopax-paxtools/org/pathvisio/biopax/BiopaxManager.java	(revision 0)
+++ trunk/src/biopax-paxtools/org/pathvisio/biopax/BiopaxManager.java	(revision 1114)
@@ -0,0 +1,89 @@
+// PathVisio,
+// a tool for data visualization and analysis using Biological Pathways
+// Copyright 2006-2007 BiGCaT Bioinformatics
+//
+// Licensed under the Apache License, Version 2.0 (the "License"); 
+// you may not use this file except in compliance with the License. 
+// You may obtain a copy of the License at 
+// 
+// http://www.apache.org/licenses/LICENSE-2.0 
+//  
+// Unless required by applicable law or agreed to in writing, software 
+// distributed under the License is distributed on an "AS IS" BASIS, 
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
+// See the License for the specific language governing permissions and 
+// limitations under the License.
+//
+package org.pathvisio.biopax;
+
+import java.io.ByteArrayOutputStream;
+import java.io.Reader;
+import java.io.StringReader;
+
+import org.biopax.paxtools.impl.level2.BioPAXFactoryImpl;
+import org.biopax.paxtools.io.jena.JenaIOHandler;
+import org.biopax.paxtools.model.BioPAXLevel;
+import org.biopax.paxtools.model.level2.BioPAXFactory;
+import org.biopax.paxtools.model.level2.Model;
+import org.jdom.Document;
+import org.jdom.input.SAXBuilder;
+import org.jdom.output.Format;
+import org.jdom.output.XMLOutputter;
+import org.pathvisio.debug.Logger;
+import org.pathvisio.model.ConverterException;
+import org.pathvisio.util.Utils;
+
+public class BiopaxManager {
+	Model model;
+	
+	/**
+	 * Create a Biopax object from the given JDOM element
+	 * @param e The element containing BioPAX code
+	 */
+	public BiopaxManager(Document doc) {
+		BioPAXFactory bpf = new BioPAXFactoryImpl();
+		if(doc == null) { //Create new model
+			model = bpf.createModel();
+		} else { //Parse jdom
+			String bpText = new XMLOutputter(Format.getPrettyFormat()).outputString(doc);
+			Logger.log.info(bpText);
+			model = modelFromString(bpText);
+		}
+	}
+	
+	public Document getDocument() throws ConverterException {
+		try {
+			String xml = getXml();
+			SAXBuilder saxBuilder=new SAXBuilder();
+			Reader stringReader=new StringReader(xml);
+			return saxBuilder.build(stringReader);
+		} catch(Exception e) {
+			throw new ConverterException(e);
+		}
+	}
+		
+	public static Model modelFromString(String xml) {
+		BioPAXFactory bpf = new BioPAXFactoryImpl();
+		JenaIOHandler ioh = new JenaIOHandler(bpf, BioPAXLevel.L2);
+		return ioh.convertFromOWL(Utils.stringToInputStream(xml));
+	}
+	
+	public String getXml() throws ConverterException {
+		try {
+			ByteArrayOutputStream out = new ByteArrayOutputStream();
+			JenaIOHandler ioh = new JenaIOHandler();
+			ioh.convertToOWL(model, out);
+			return out.toString();
+		} catch(Exception e) {
+			throw new ConverterException(e);
+		}
+	}
+	
+	public Model getModel() {
+		return model;
+	}
+	
+	public void setModel(Model m) {
+		model = m;
+	}
+}
Index: trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1113)
+++ trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1114)
@@ -18,6 +18,7 @@
 
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
+import java.net.URL;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jface.dialogs.IDialogConstants;
@@ -80,6 +81,11 @@
 		return window;
 	}
 	
+
+	public void setWindow(MainWindow w) {
+		window = w;
+	}
+	
 	/**
 	   Updates the title of the main window.
 	   Call at initialization of the program,
@@ -292,6 +298,64 @@
 		bl.openURLinBrowser(url);
 	}
 	
+	private void handleOpenException(String pwFile, ConverterException e) {
+		if (e.getMessage().contains("Cannot find the declaration of element 'Pathway'"))
+		{
+			MessageDialog.openError(getWindow().getShell(), 
+				"Unable to open Gpml file", 
+				"Unable to open Gpml file.\n\n" +
+				"The most likely cause for this error is that you are trying to open an old Gpml file. " +
+				"Please note that the Gpml format has changed as of March 2007. " +
+				"The standard pathway set can be re-downloaded from http://pathvisio.org " +
+				"Non-standard pathways need to be recreated or upgraded. " +
+				"Please contact the authors at " + Globals.DEVELOPER_EMAIL + " if you need help with this.\n" +
+				"\nSee error log for details");
+			Logger.log.error("Unable to open Gpml file", e);
+		}
+		else if (pwFile.endsWith("." + Engine.GENMAPP_FILE_EXTENSION))
+		{
+			MessageDialog.openError(getWindow().getShell(), 
+				"Unable to open Mapp file", 
+				"Unable to open Mapp file.\n\n" +					
+				"Check that the file you're trying to open really is a "+
+				"Pathway in the GenMAPP .mapp format. If the problem persists, please contact " +
+				"the developers at " + Globals.DEVELOPER_EMAIL + ". Please include the " +
+				"file you're trying to open and the error log.");
+				Logger.log.error("Unable to open Gpml file", e);						
+		}
+		else
+		{
+			//TODO: refactor these error messages,
+			// so it's not redundant with SwingEngine
+			MessageDialog.openError(
+				getWindow().getShell(), 
+				"Unable to open Gpml file",
+				"Unable to open Gpml file\n\n" +
+				"Check that the file you're trying to open really is a "+
+				"Pathway in the Gpml format. If the problem persists, please contact " +
+				"the developers at " + Globals.DEVELOPER_EMAIL + ". Please include the " +
+				"file you're trying to open and the error log.");
+			Logger.log.error("Unable to open Gpml file", e);
+		}
+	}
+	
+	public File openPathway(URL url) {
+		File local = null;
+		if (canDiscardPathway())
+		{
+			try { 
+				VPathwayWrapper w = createWrapper();
+				Engine.getCurrent().openPathway(url, w);
+				updateTitle();
+			} 
+			catch(ConverterException e) 
+			{		
+				handleOpenException(url.toString(), e);
+			}
+		}
+		return local;
+	}
+	
 	/**
 	 Open a pathway from a gpml file
 	 Asks the user if the old pathway should be discarded, if necessary
@@ -307,44 +371,7 @@
 			} 
 			catch(ConverterException e) 
 			{		
-				if (e.getMessage().contains("Cannot find the declaration of element 'Pathway'"))
-				{
-					MessageDialog.openError(getWindow().getShell(), 
-						"Unable to open Gpml file", 
-						"Unable to open Gpml file.\n\n" +
-						"The most likely cause for this error is that you are trying to open an old Gpml file. " +
-						"Please note that the Gpml format has changed as of March 2007. " +
-						"The standard pathway set can be re-downloaded from http://pathvisio.org " +
-						"Non-standard pathways need to be recreated or upgraded. " +
-						"Please contact the authors at " + Globals.DEVELOPER_EMAIL + " if you need help with this.\n" +
-						"\nSee error log for details");
-					Logger.log.error("Unable to open Gpml file", e);
-				}
-				else if (pwf.endsWith("." + Engine.GENMAPP_FILE_EXTENSION))
-				{
-					MessageDialog.openError(getWindow().getShell(), 
-						"Unable to open Mapp file", 
-						"Unable to open Mapp file.\n\n" +					
-						"Check that the file you're trying to open really is a "+
-						"Pathway in the GenMAPP .mapp format. If the problem persists, please contact " +
-						"the developers at " + Globals.DEVELOPER_EMAIL + ". Please include the " +
-						"file you're trying to open and the error log.");
-						Logger.log.error("Unable to open Gpml file", e);						
-				}
-				else
-				{
-					//TODO: refactor these error messages,
-					// so it's not redundant with SwingEngine
-					MessageDialog.openError(
-						getWindow().getShell(), 
-						"Unable to open Gpml file",
-						"Unable to open Gpml file\n\n" +
-						"Check that the file you're trying to open really is a "+
-						"Pathway in the Gpml format. If the problem persists, please contact " +
-						"the developers at " + Globals.DEVELOPER_EMAIL + ". Please include the " +
-						"file you're trying to open and the error log.");
-					Logger.log.error("Unable to open Gpml file", e);
-				}
+				handleOpenException(pwf, e);
 			}
 		}
 	}
Index: trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 1113)
+++ trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 1114)
@@ -47,7 +47,6 @@
 import org.pathvisio.ApplicationEvent;
 import org.pathvisio.Engine;
 import org.pathvisio.Engine.ApplicationEventListener;
-import org.pathvisio.biopax.gui.BiopaxCellEditor;
 import org.pathvisio.data.DataSources;
 import org.pathvisio.gui.swt.dialogs.CommentsDialog;
 import org.pathvisio.model.DataNodeType;
@@ -83,7 +82,6 @@
 	ComboBoxCellEditor comboBoxEditor;
 	SuggestCellEditor identifierSuggestEditor;
 	SuggestCellEditor symbolSuggestEditor;
-	BiopaxCellEditor biopaxEditor;
 	DialogCellEditor commentsEditor;
 	
 	private List<PathwayElement> dataObjects;
@@ -233,7 +231,6 @@
 		comboBoxEditor = new ComboBoxCellEditor(tableViewer.getTable(), new String[] {""});
 		identifierSuggestEditor = new GdbCellEditor(tableViewer.getTable(), GdbCellEditor.TYPE_IDENTIFIER);
 		symbolSuggestEditor = new GdbCellEditor(tableViewer.getTable(), GdbCellEditor.TYPE_SYMBOL);
-		biopaxEditor = new BiopaxCellEditor(tableViewer.getTable(), "...");
 		//Temporary table editor for comments, will be removed when right-click menu is implemented
 		commentsEditor = new DialogCellEditor(tableViewer.getTable()) {
 			protected Object openDialogBox(Control cellEditorWindow) {
@@ -315,8 +312,6 @@
 				return identifierSuggestEditor;
 			case DB_SYMBOL:
 				return textEditor;
-			case BIOPAXREF:
-				return biopaxEditor;
 			case COMMENTS:
 				return commentsEditor;
 		}
Index: trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java	(revision 1113)
+++ trunk/src/swt/org/pathvisio/gui/swt/MainWindowBase.java	(revision 1114)
@@ -480,9 +480,11 @@
 		switch(e.getType()) {
 		case VPathwayEvent.EDIT_MODE_OFF:
 			showLegend(true);
+			showEditActionsCI(false);
 			break;
 		case VPathwayEvent.EDIT_MODE_ON:
 			showLegend(false);
+			showEditActionsCI(true);
 			break;
 		case VPathwayEvent.ELEMENT_ADDED:
 			deselectNewItemActions();
Index: trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1113)
+++ trunk/src/swt/org/pathvisio/gui/swt/CommonActions.java	(revision 1114)
@@ -33,7 +33,6 @@
 import org.pathvisio.Engine;
 import org.pathvisio.Globals;
 import org.pathvisio.Engine.ApplicationEventListener;
-import org.pathvisio.biopax.gui.BiopaxDialog;
 import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.Pathway;
@@ -530,22 +529,22 @@
 		}
 	}
 	
-	static class BiopaxAction extends Action 
-	{
-		MainWindowBase window;
-		public BiopaxAction (MainWindowBase w)
-		{
-			window = w;
-			setText ("Edit &BioPAX code");
-			setToolTipText ("Edit BioPAX code");
-		}
-		
-		public void run () {
-			BiopaxDialog d = new BiopaxDialog(window.getShell());
-			d.setPathway(Engine.getCurrent().getActivePathway());
-			d.open();
-		}
-	}
+//	static class BiopaxAction extends Action 
+//	{
+//		MainWindowBase window;
+//		public BiopaxAction (MainWindowBase w)
+//		{
+//			window = w;
+//			setText ("Edit &BioPAX code");
+//			setToolTipText ("Edit BioPAX code");
+//		}
+//		
+//		public void run () {
+//			BiopaxDialog d = new BiopaxDialog(window.getShell());
+//			d.setPathway(Engine.getCurrent().getActivePathway());
+//			d.open();
+//		}
+//	}
 	
 	/**
 	 * {@link Action} to switch between edit and view mode
Index: trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1113)
+++ trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1114)
@@ -143,7 +143,7 @@
 	
 	static void registerExporters() {
 		Engine.getCurrent().addPathwayExporter(new MappFormat());
-		Engine.getCurrent().addPathwayExporter(new SvgFormat());
+		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_SVG));
 		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
 		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
 		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
Index: trunk/webstart/pathvisio_v2.jnlp
===================================================================
--- trunk/webstart/pathvisio_v2.jnlp	(revision 1113)
+++ trunk/webstart/pathvisio_v2.jnlp	(revision 1114)
@@ -9,47 +9,47 @@
 	</information>
 	<resources>
 		 <j2se version="1.5+"/>
-		 <jar href="pathvisio_v2.jar"/>
-		 <jar href="resources.jar"/>
-		 <jar href="plugins.jar"/>
-		 <jar href="R-resources.jar"/>
-         <jar href="JRI.jar"/>
-		 <jar href="hsqldb.jar"/>
-		 <jar href="derby.jar"/>
-		 <jar href="jdom.jar"/>
-		 <jar href="BrowserLauncher.jar"/>
-		 <jar href="org.eclipse.core.commands.jar"/>
-		 <jar href="org.eclipse.equinox.common.jar"/>
-		 <jar href="org.eclipse.jface.jar"/>
-		 <jar href="org.eclipse.equinox.supplement.jar"/>
-		 <jar href="batik/batik-awt-util.jar"/>
-		 <jar href="batik/batik-bridge.jar"/>
-		 <jar href="batik/batik-css.jar"/>
-		 <jar href="batik/batik-dom.jar"/>
-		 <jar href="batik/batik-ext.jar"/>
-		 <jar href="batik/batik-extension.jar"/>
-		 <jar href="batik/batik-gvt.jar"/>
-		 <jar href="batik/batik-parser.jar"/>
-		 <jar href="batik/batik-script.jar"/>
-		 <jar href="batik/batik-svg-dom.jar"/>
-		 <jar href="batik/batik-svggen.jar"/>
-		 <jar href="batik/batik-transcoder.jar"/>
-		 <jar href="batik/batik-util.jar"/>
-		 <jar href="batik/batik-xml.jar"/>
-		 <jar href="batik/pdf-transcoder.jar"/>
-		 <jar href="batik/xml-apis.jar"/>
+		 <jar href="lib/pathvisio_v2.jar"/>
+		 <jar href="lib/resources.jar"/>
+		 <jar href="lib/plugins.jar"/>
+		 <jar href="lib/R-resources.jar"/>
+         <jar href="lib/JRI.jar"/>
+		 <jar href="lib/hsqldb.jar"/>
+		 <jar href="lib/derby.jar"/>
+		 <jar href="lib/jdom.jar"/>
+		 <jar href="lib/BrowserLauncher.jar"/>
+		 <jar href="lib/org.eclipse.core.commands.jar"/>
+		 <jar href="lib/org.eclipse.equinox.common.jar"/>
+		 <jar href="lib/org.eclipse.jface.jar"/>
+		 <jar href="lib/org.eclipse.equinox.supplement.jar"/>
+		 <jar href="lib/batik/batik-awt-util.jar"/>
+		 <jar href="lib/batik/batik-bridge.jar"/>
+		 <jar href="lib/batik/batik-css.jar"/>
+		 <jar href="lib/batik/batik-dom.jar"/>
+		 <jar href="lib/batik/batik-ext.jar"/>
+		 <jar href="lib/batik/batik-extension.jar"/>
+		 <jar href="lib/batik/batik-gvt.jar"/>
+		 <jar href="lib/batik/batik-parser.jar"/>
+		 <jar href="lib/batik/batik-script.jar"/>
+		 <jar href="lib/batik/batik-svg-dom.jar"/>
+		 <jar href="lib/batik/batik-svggen.jar"/>
+		 <jar href="lib/batik/batik-transcoder.jar"/>
+		 <jar href="lib/batik/batik-util.jar"/>
+		 <jar href="lib/batik/batik-xml.jar"/>
+		 <jar href="lib/batik/pdf-transcoder.jar"/>
+		 <jar href="lib/batik/xml-apis.jar"/>
 	</resources>
 	<resources os="Windows">
-		<jar href="swt-win32-lib/swt.jar"/>
-		<nativelib href="swt-win32-lib.jar"/>	
+		<jar href="lib/swt-win32-lib/swt.jar"/>
+		<nativelib href="lib/swt-win32-lib.jar"/>	
 	</resources>
 	<resources os="Linux">
-		<jar href="swt-linux-lib/swt.jar"/>
-		<nativelib href="swt-linux-lib.jar"/>	
+		<jar href="lib/swt-linux-lib/swt.jar"/>
+		<nativelib href="lib/swt-linux-lib.jar"/>	
 	</resources>
 	<resources os="Mac OS X">
-		<jar href="swt-mac-lib/swt.jar"/>
-		<nativelib href="swt-mac-lib.jar"/>	
+		<jar href="lib/swt-mac-lib/swt.jar"/>
+		<nativelib href="lib/swt-mac-lib.jar"/>	
 	</resources>
 	<application-desc main-class="org.pathvisio.gui.swt.GuiMain">
 		<argument>-ur</argument>
Index: trunk/webstart/pathvisio_v1.jnlp
===================================================================
--- trunk/webstart/pathvisio_v1.jnlp	(revision 1113)
+++ trunk/webstart/pathvisio_v1.jnlp	(revision 1114)
@@ -10,43 +10,43 @@
 	<resources>
 		 <j2se version="1.5+"/>
 		 <jar href="pathvisio_v1.jar"/>
-		 <jar href="resources.jar"/>
-		 <jar href="hsqldb.jar"/>
-		 <jar href="derby.jar"/>
-		 <jar href="BrowserLauncher.jar"/>
-		 <jar href="jdom.jar"/>
-		 <jar href="org.eclipse.core.commands.jar"/>
-		 <jar href="org.eclipse.equinox.common.jar"/>
-		 <jar href="org.eclipse.jface.jar"/>
-		 <jar href="org.eclipse.equinox.supplement.jar"/>
-		 <jar href="batik/batik-awt-util.jar"/>
-		 <jar href="batik/batik-bridge.jar"/>
-		 <jar href="batik/batik-css.jar"/>
-		 <jar href="batik/batik-dom.jar"/>
-		 <jar href="batik/batik-ext.jar"/>
-		 <jar href="batik/batik-extension.jar"/>
-		 <jar href="batik/batik-gvt.jar"/>
-		 <jar href="batik/batik-parser.jar"/>
-		 <jar href="batik/batik-script.jar"/>
-		 <jar href="batik/batik-svg-dom.jar"/>
-		 <jar href="batik/batik-svggen.jar"/>
-		 <jar href="batik/batik-transcoder.jar"/>
-		 <jar href="batik/batik-util.jar"/>
-		 <jar href="batik/batik-xml.jar"/>
-		 <jar href="batik/pdf-transcoder.jar"/>
-		 <jar href="batik/xml-apis.jar"/>
+		 <jar href="lib/resources.jar"/>
+		 <jar href="lib/hsqldb.jar"/>
+		 <jar href="lib/derby.jar"/>
+		 <jar href="lib/BrowserLauncher.jar"/>
+		 <jar href="lib/jdom.jar"/>
+		 <jar href="lib/org.eclipse.core.commands.jar"/>
+		 <jar href="lib/org.eclipse.equinox.common.jar"/>
+		 <jar href="lib/org.eclipse.jface.jar"/>
+		 <jar href="lib/org.eclipse.equinox.supplement.jar"/>
+		 <jar href="lib/batik/batik-awt-util.jar"/>
+		 <jar href="lib/batik/batik-bridge.jar"/>
+		 <jar href="lib/batik/batik-css.jar"/>
+		 <jar href="lib/batik/batik-dom.jar"/>
+		 <jar href="lib/batik/batik-ext.jar"/>
+		 <jar href="lib/batik/batik-extension.jar"/>
+		 <jar href="lib/batik/batik-gvt.jar"/>
+		 <jar href="lib/batik/batik-parser.jar"/>
+		 <jar href="lib/batik/batik-script.jar"/>
+		 <jar href="lib/batik/batik-svg-dom.jar"/>
+		 <jar href="lib/batik/batik-svggen.jar"/>
+		 <jar href="lib/batik/batik-transcoder.jar"/>
+		 <jar href="lib/batik/batik-util.jar"/>
+		 <jar href="lib/batik/batik-xml.jar"/>
+		 <jar href="lib/batik/pdf-transcoder.jar"/>
+		 <jar href="lib/batik/xml-apis.jar"/>
 	</resources>
 	<resources os="Windows">
-		<jar href="swt-win32-lib/swt.jar"/>
-		<nativelib href="swt-win32-lib.jar"/>	
+		<jar href="lib/swt-win32-lib/swt.jar"/>
+		<nativelib href="lib/swt-win32-lib.jar"/>	
 	</resources>
 	<resources os="Linux">
-		<jar href="swt-linux-lib/swt.jar"/>
-		<nativelib href="swt-linux-lib.jar"/>	
+		<jar href="lib/swt-linux-lib/swt.jar"/>
+		<nativelib href="lib/swt-linux-lib.jar"/>	
 	</resources>
 	<resources os="Mac OS X">
-		<jar href="swt-mac-lib/swt.jar"/>
-		<nativelib href="swt-mac-lib.jar"/>	
+		<jar href="lib/swt-mac-lib/swt.jar"/>
+		<nativelib href="lib/swt-mac-lib.jar"/>	
 	</resources>
 	<application-desc main-class="org.pathvisio.gui.swt.GuiMain"/>
 	<security>
Index: trunk/build.xml
===================================================================
--- trunk/build.xml	(revision 1113)
+++ trunk/build.xml	(revision 1114)
@@ -12,12 +12,21 @@
 	<!-- <property name="dist.dir" value="dist"/> -->
 	<property name="webstart.dir" value="webstart"/>
 	<property name="wikipathways.dir" value="wikipathways"/>
-	<property name="wikipathways.applet.dir" value="${wikipathways.dir}/applet"/>
+	<property name="wikipathways.www.dir" value="build/wikipathways-www"/>
+	<property name="wikipathways.bin.dir" value="${wikipathways.www.dir}/wpi/bin"/>
+	<property name="wikipathways.webstart.dir" value="${wikipathways.bin.dir}"/>
+	<property name="wikipathways.applet.dir" value="${wikipathways.www.dir}/wpi/applet"/>
+	<property name="wikipathways.dest" value="/var/www/wikipathways"/>
+	<property name="wikipathways.bin.dest" value="${wikipathways.dest}/wpi/bin"/>
+	<property name="wikipathways.webstart.dest" value="${wikipathways.bin.dest}"/>
+	<property name="wikipathways.applet.dest" value="${wikipathways.dest}/wpi/applet"/>
 	<property name="lib.dir" value="lib"/>
 	<property name="exec.perl" value="perl"/>
 	<property name="svn.exec.svnversion" value="svnversion"/>
 	<property name="exec.inno.setup" value="iscc"/>
 	
+	<property name="jar.class.path" value="lib/resources.jar lib/derby.jar lib/R-resources.jar lib/swt-win32-lib/swt.jar lib/swt-linux-lib/swt.jar lib/org.eclipse.core.commands.jar lib/org.eclipse.equinox.common.jar lib/org.eclipse.jface.jar lib/hsqldb.jar lib/jdom.jar lib/JRI.jar lib/BrowserLauncher.jar lib/plugins.jar lib/batik/batik-awt-util.jar lib/batik/batik-bridge.jar lib/batik/batik-css.jar lib/batik/batik-dom.jar lib/batik/batik-ext.jar lib/batik/batik-extension.jar lib/batik/batik-gvt.jar lib/batik/batik-parser.jar lib/batik/batik-script.jar lib/batik/batik-svg-dom.jar lib/batik/batik-svggen.jar lib/batik/batik-transcoder.jar lib/batik/batik-util.jar lib/batik/batik-xml.jar lib/batik/pdf-transcoder.jar lib/batik/xml-apis.jar"/>
+	
 	<path id="project.v1.class.path">
 		<pathelement location="${build.v1.dir}"/>
 		<fileset dir="lib">
@@ -51,6 +60,9 @@
 		<mkdir dir="${build.plugins.dir}"/>
 		<mkdir dir="${build.wikipathways.dir}"/>
 		<mkdir dir="${apidoc.dir}"/>
+		<mkdir dir="${wikipathways.www.dir}"/>
+		<mkdir dir="${wikipathways.bin.dir}"/>
+		<mkdir dir="${wikipathways.webstart.dir}"/>
 		<mkdir dir="${wikipathways.applet.dir}"/>
 		
 		<echo file="${src.dir}/core/org/pathvisio/Revision.java">
@@ -61,7 +73,9 @@
 	public static final String REVISION = "${subversion_revision}";
 };
 </echo>
-		
+	<exec executable="${exec.perl}" failifexecutionfails="true" output="classpath.sh">
+		<arg line="-e '$cp = &quot;.&quot;; foreach(@ARGV) { $cp .= &quot;:$_&quot;; } print &quot;export PATHVISIO_CP=\&quot;$cp\&quot;\n&quot;' ${jar.class.path}"/>
+	</exec>
 	</target>
 	
 	<target name="clean" description="Remove all generated files.">
@@ -72,12 +86,12 @@
 		<delete dir="${build.test.dir}"/>
 		<delete dir="${apidoc.dir}"/>
 		<delete dir="${webstart.dir}/www"/>
-		<delete dir="${wikipathways.applet.dir}"/>
+		<delete dir="${wikipathways.www.dir}"/>
 	</target>
 	
 	<target name="compile-v1" depends="prepare,resources-jar" description="Compile all sources">
 		<javac debug="true" srcdir="."
-			includes="src/v1/**,src/core/**,src/swt/**,src/swing/**"
+			includes="src/v1/**,src/core/**,src/swt/**,src/swing/**,src/wikipathways-swt/**"
 			destdir="${build.v1.dir}">
 			<classpath refid="project.v1.class.path"/>
 		</javac>
@@ -149,12 +163,27 @@
 	</target>
 	
 	<target name="jar" depends="compile-v1,compile-v2" description="Generates executable jar file">
-		<jar jarfile="pathvisio_v2.jar" manifest="src/MANIFEST.MF">
+		<jar jarfile="pathvisio_v2.jar">
+			<manifest>
+				<attribute name="Main-Class" value="org.pathvisio.gui.GuiMain"/>
+				<attribute name="Class-Path" value="${jar.class.path}"/>
+			</manifest>
 			<fileset dir="${build.v2.dir}" includes="**/*.class"/>			
 		</jar>
-		<jar jarfile="pathvisio_v1.jar" manifest="src/MANIFEST.MF">
+		<jar jarfile="pathvisio_v1.jar">
+			<manifest>
+				<attribute name="Main-Class" value="org.pathvisio.gui.GuiMain"/>
+				<attribute name="Class-Path" value="${jar.class.path}"/>
+			</manifest>
 			<fileset dir="${build.v1.dir}" includes="**/*.class"/>			
 		</jar>
+		<jar jarfile="pathvisio_converter.jar">
+			<manifest>
+				<attribute name="Main-Class" value="org.pathvisio.util.Converter"/>
+				<attribute name="Class-Path" value="${jar.class.path}"/>
+			</manifest>
+			<fileset dir="${build.v1.dir}" includes="**/*.class"/>			
+		</jar>
 		<jar jarfile="lib/plugins.jar">
 			<fileset dir="${build.plugins.dir}" includes="**/*.class"/>			
 		</jar>
@@ -164,11 +193,11 @@
 		<jar jarfile="wikipathways.jar">
 			<fileset dir="${build.wikipathways.dir}" includes="**/*.class"/>
             <manifest>
-                <attribute name="Class-Path" value="jdom.jar resources.jar derbyclient.jar swing-worker-1.1.jar apache/commons-codec-1.3.jar apache/commons-httpclient-3.0.1.jar apache/commons-logging-1.1.jar apache/ws-commons-util-1.0.1.jar apache/xmlrpc-client-3.0.jar apache/xmlrpc-common-3.0.jar"/>
+            	<attribute name="Class-Path" value="${jar.class.path}"/>
             </manifest>
 		</jar>
 		<!-- different resources.jar, only with minimal data -->
-		<jar jarfile="${wikipathways.dir}/applet/resources.jar">
+		<jar jarfile="${wikipathways.applet.dir}/resources.jar">
 			<fileset dir="." includes="backpage/*"/>
 			<fileset dir="." includes="icons/*"/>
 			<!--<fileset dir="." includes="images/*"/>-->
@@ -197,14 +226,13 @@
 		<copy file="pathvisio_v1.jar" toDir="${webstart.dir}/www"/>
 		<copy file="pathvisio_v2.jar" toDir="${webstart.dir}/www"/>
 		<signjar jar="pathvisio_v1.jar" lazy="true" 
-			alias="PathVisio" storepass="PathVisio" keystore="${lib.dir}/visioKeyStore"/>
+			alias="PV" storepass="PathVisio" keystore="${lib.dir}/visioKeyStore"/>
 		<signjar jar="pathvisio_v2.jar" lazy="true" 
-			alias="PathVisio" storepass="PathVisio" keystore="${lib.dir}/visioKeyStore"/>
-                
-		<copy toDir="${webstart.dir}/www" overwrite="true">
+			alias="PV" storepass="PathVisio" keystore="${lib.dir}/visioKeyStore"/>
+		<copy toDir="${webstart.dir}/www/lib">
 			<fileset dir="${lib.dir}" includes="**/*.jar"/>
 		</copy>
-		<signjar alias="PathVisio" lazy = "true" 
+		<signjar alias="PV" lazy = "true" 
 			storepass="PathVisio" keystore="${lib.dir}/visioKeyStore">
 			<fileset dir="${webstart.dir}/www" includes="**/*.jar"/>
 		</signjar>
@@ -219,28 +247,46 @@
 		</exec>
 	</target>
 
-	<target name="wikipathways" depends="jar-wikipathways" description="Build PathVisio for WikiPathways">
-		<copy file="wikipathways.jar" toDir="${wikipathways.dir}/applet"/>
+	<target name="wikipathways-swt" depends="prepare-webstart" description="Create resources for the wikipathways swt editor">
+		<!-- Copy webstart files -->
+		<copy toDir="${wikipathways.webstart.dir}" >
+			<fileset dir="${webstart.dir}/www" includes="**/*.jar"/>
+		</copy>
+		<!-- copy to /var/www/wikipathways -->
+		<copy toDir="${wikipathways.webstart.dest}">
+			<fileset dir="${wikipathways.webstart.dir}" includes="**/*.*" />
+		</copy>
+	</target>
+	
+	<target name="wikipathways-applet" depends="jar-wikipathways" description="Build PathVisio for WikiPathways">
+		<copy file="wikipathways.jar" toDir="${wikipathways.applet.dir}"/>
 		<copy toDir="${wikipathways.applet.dir}">
 			<fileset dir="${lib.dir}">
 				<include name="apache/*.jar"/>
 				<include name="jdom.jar"/>
 				<include name="swing-worker-1.1.jar"/>
 				<include name="derbyclient.jar"/>
-			</fileset>
-			
+			</fileset>	
 		</copy>
-		<signjar alias="PathVisio" lazy = "true" 
+		<signjar alias="PV" lazy = "true" 
 			storepass="PathVisio" keystore="${lib.dir}/visioKeyStore">
 			<fileset dir="${wikipathways.applet.dir}" includes="**/*.jar"/>
 		</signjar>
 		<!-- copy to /var/www/wikipathways -->
-		<copy toDir="/var/www/wikipathways/wpi/applet">
+		<copy toDir="${wikipathways.applet.dest}">
 			<fileset dir="${wikipathways.applet.dir}" includes="**/*.*" />
 		</copy>
-		<!-- todo: copy scripts and bin too -->
 	</target>
 
+	<target name="wikipathways-all" depends="wikipathways-swt, wikipathways-applet">
+		<!-- Copy converter jar -->
+		<copy toDir="${wikipathways.bin.dest}">
+			<fileset dir=".">
+				<include name="pathvisio_converter.jar"/>
+			</fileset>
+		</copy>
+	</target>
+	
 	<target name="docs" depends="prepare" description="generate api-docs">
 		<tstamp /> <!-- set ${TODAY} -->
 		<javadoc destdir="${apidoc.dir}" 
Index: trunk/lib/derbyclient.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/visioKeyStore
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/derby.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/BrowserLauncher.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/swt-win32-lib/swt.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/h2.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/hsqldb.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/org.eclipse.jface.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/org.eclipse.equinox.common.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/junit.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/jdom.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/org.eclipse.equinox.supplement.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/org.eclipse.core.commands.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/lib/swt-linux-lib/swt.jar
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: trunk/wikipathways/wpi/bin/pathvisio_wikipathways.jnlp
===================================================================
--- trunk/wikipathways/wpi/bin/pathvisio_wikipathways.jnlp	(revision 1113)
+++ trunk/wikipathways/wpi/bin/pathvisio_wikipathways.jnlp	(revision 1114)
@@ -10,51 +10,51 @@
 	<resources>
 		 <j2se version="1.5+"/>
 		 <jar href="pathvisio_v1.jar"/>
-		 <jar href="resources.jar"/>
-		<!-- <jar href="hsqldb.jar"/> -->
-		 <jar href="derby.jar"/>
-		 <jar href="BrowserLauncher.jar"/>
-		 <jar href="jdom.jar"/>
-		 <jar href="org.eclipse.core.commands.jar"/>
-		 <jar href="org.eclipse.equinox.common.jar"/>
-		 <jar href="org.eclipse.jface.jar"/>
-		 <jar href="org.eclipse.equinox.supplement.jar"/>
-		 <jar href="apache/commons-codec-1.3.jar"/>
-		 <jar href="apache/commons-httpclient-3.0.1.jar"/>
-		 <jar href="apache/commons-logging-1.1.jar"/>
-		 <jar href="apache/ws-commons-util-1.0.1.jar"/>
-		 <jar href="apache/xmlrpc-client-3.0.jar"/>
-		 <jar href="apache/xmlrpc-common-3.0.jar"/>
-		 <jar href="batik/batik-awt-util.jar"/>
-		 <jar href="batik/batik-bridge.jar"/>
-		 <jar href="batik/batik-css.jar"/>
-		 <jar href="batik/batik-dom.jar"/>
-		 <jar href="batik/batik-ext.jar"/>
-		 <jar href="batik/batik-extension.jar"/>
-		 <jar href="batik/batik-gvt.jar"/>
-		 <jar href="batik/batik-parser.jar"/>
-		 <jar href="batik/batik-script.jar"/>
-		 <jar href="batik/batik-svg-dom.jar"/>
-		 <jar href="batik/batik-svggen.jar"/>
-		 <jar href="batik/batik-transcoder.jar"/>
-		 <jar href="batik/batik-util.jar"/>
-		 <jar href="batik/batik-xml.jar"/>
-		 <jar href="batik/pdf-transcoder.jar"/>
-		 <jar href="batik/xml-apis.jar"/>
+		 <jar href="lib/resources.jar"/>
+		 <jar href="lib/hsqldb.jar"/>
+		 <jar href="lib/derby.jar"/>
+		 <jar href="lib/BrowserLauncher.jar"/>
+		 <jar href="lib/jdom.jar"/>
+		 <jar href="lib/org.eclipse.core.commands.jar"/>
+		 <jar href="lib/org.eclipse.equinox.common.jar"/>
+		 <jar href="lib/org.eclipse.jface.jar"/>
+		 <jar href="lib/org.eclipse.equinox.supplement.jar"/>
+		 <jar href="lib/batik/batik-awt-util.jar"/>
+		 <jar href="lib/batik/batik-bridge.jar"/>
+		 <jar href="lib/batik/batik-css.jar"/>
+		 <jar href="lib/batik/batik-dom.jar"/>
+		 <jar href="lib/batik/batik-ext.jar"/>
+		 <jar href="lib/batik/batik-extension.jar"/>
+		 <jar href="lib/batik/batik-gvt.jar"/>
+		 <jar href="lib/batik/batik-parser.jar"/>
+		 <jar href="lib/batik/batik-script.jar"/>
+		 <jar href="lib/batik/batik-svg-dom.jar"/>
+		 <jar href="lib/batik/batik-svggen.jar"/>
+		 <jar href="lib/batik/batik-transcoder.jar"/>
+		 <jar href="lib/batik/batik-util.jar"/>
+		 <jar href="lib/batik/batik-xml.jar"/>
+		 <jar href="lib/batik/pdf-transcoder.jar"/>
+		 <jar href="lib/batik/xml-apis.jar"/>
+		 <jar href="lib/apache/commons-codec-1.3.jar"/>
+		 <jar href="lib/apache/commons-httpclient-3.0.1.jar"/>
+		 <jar href="lib/apache/commons-logging-1.1.jar"/>
+		 <jar href="lib/apache/ws-commons-util-1.0.1.jar"/>
+		 <jar href="lib/apache/xmlrpc-client-3.0.jar"/>
+		 <jar href="lib/apache/xmlrpc-common-3.0.jar"/>
 	</resources>
 	<resources os="Windows">
-		<jar href="swt-win32.jar"/>
-		<nativelib href="swt-win32-lib.jar"/>	
+		<jar href="lib/swt-win32-lib/swt.jar"/>
+		<nativelib href="lib/swt-win32-lib.jar"/>	
 	</resources>
 	<resources os="Linux">
-		<jar href="swt-linux.jar"/>
-		<nativelib href="swt-linux-lib.jar"/>	
+		<jar href="lib/swt-linux-lib/swt.jar"/>
+		<nativelib href="lib/swt-linux-lib.jar"/>	
 	</resources>
 	<resources os="Mac OS X">
-		<jar href="swt-mac.jar"/>
-		<nativelib href="swt-mac-lib.jar"/>	
+		<jar href="lib/swt-mac-lib/swt.jar"/>
+		<nativelib href="lib/swt-mac-lib.jar"/>	
 	</resources>
-	<application-desc main-class="org.wikipathways.core.WikiPathways">
+	<application-desc main-class="org.pathvisio.wikipathways.swt.WikiPathways">
 		<!--ARG-->
 	</application-desc>
 	<security>
