Index: trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java
===================================================================
--- trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java	(revision 1131)
+++ trunk/src/wikipathways/org/pathvisio/wikipathways/WikiPathwaysEngine.java	(revision 1132)
@@ -60,6 +60,5 @@
 		engine.addPathwayExporter(new WikiPathwaysExporter(rpcUrl, ImageExporter.TYPE_SVG));
 		engine.addPathwayExporter(new WikiPathwaysExporter(rpcUrl, ImageExporter.TYPE_TIFF));
 		engine.addPathwayExporter(new WikiPathwaysExporter(rpcUrl, ImageExporter.TYPE_PDF));
-		engine.addPathwayExporter(new WikiPathwaysExporter(rpcUrl, WikiPathwaysExporter.TYPE_MAPP));
 	}
 }
Index: trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java	(revision 1131)
+++ trunk/src/swing/org/pathvisio/gui/swing/GuiInit.java	(revision 1132)
@@ -20,7 +20,7 @@
 
 import org.pathvisio.Engine;
 import org.pathvisio.debug.Logger;
-import org.pathvisio.model.GpmlFormat;
+import org.pathvisio.model.MappFormat;
 import org.pathvisio.preferences.GlobalPreference;
 
 public class GuiInit {
@@ -35,10 +35,10 @@
 	}
 	
 	private static void initImporters() {
-		Engine.getCurrent().addPathwayImporter(new GpmlFormat());
+		Engine.getCurrent().addPathwayImporter(new MappFormat());
 	}
 	
 	private static void initExporters() {
-		Engine.getCurrent().addPathwayExporter(new GpmlFormat());
+		Engine.getCurrent().addPathwayExporter(new MappFormat());
 	}
 }
Index: trunk/src/core/org/pathvisio/model/ImageExporter.java
===================================================================
--- trunk/src/core/org/pathvisio/model/ImageExporter.java	(revision 1131)
+++ trunk/src/core/org/pathvisio/model/ImageExporter.java	(revision 1132)
@@ -16,26 +16,8 @@
 //
 package org.pathvisio.model;
 
-import java.awt.Dimension;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.FileWriter;
-import java.io.OutputStream;
-import java.io.Writer;
 
-import org.apache.batik.dom.GenericDOMImplementation;
-import org.apache.batik.svggen.SVGGraphics2D;
-import org.apache.batik.transcoder.Transcoder;
-import org.apache.batik.transcoder.TranscoderInput;
-import org.apache.batik.transcoder.TranscoderOutput;
-import org.apache.batik.transcoder.image.ImageTranscoder;
-import org.apache.batik.transcoder.image.PNGTranscoder;
-import org.apache.batik.transcoder.image.TIFFTranscoder;
-import org.pathvisio.view.VPathway;
-import org.w3c.dom.DOMImplementation;
-import org.w3c.dom.Document;
-
-public class ImageExporter implements PathwayExporter {
+public abstract class ImageExporter implements PathwayExporter {
 	public static final String TYPE_PNG = "png";
 	public static final String TYPE_TIFF = "tiff";
 	public static final String TYPE_PDF = "pdf";
@@ -55,6 +37,8 @@
 		return extensions;
 	}
 	
+	public String getType() { return type; }
+	
 	public String getDefaultExtension() {
 		return type;
 	}
@@ -63,65 +47,7 @@
 		return type.toUpperCase();
 	}
 	
-	public void doExport(File file, Pathway pathway) throws ConverterException {		
-		VPathway vPathway = new VPathway(null);
-		vPathway.fromGmmlData(pathway);
-		
-		double width = vPathway.getVWidth();
-		double height = vPathway.getVHeight();
-		
-		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
-		Document svg = domImpl.createDocument ("http://www.w3.org/2000/svg", "svg", null);
-		
-		SVGGraphics2D svgG2d = new SVGGraphics2D(svg);
-		svgG2d.setSVGCanvasSize(new Dimension((int)width, (int)height));
-		vPathway.draw(svgG2d);
-		Transcoder t = null;
-		if			(type.equals(TYPE_SVG)) {
-			try {
-				Writer out = new FileWriter(file);			
-				svgG2d.stream(out, true);
-				out.flush();
-				out.close();
-			} catch(Exception e) {
-				throw new ConverterException(e);
-			}
-			return;
-		} else if	(type.equals(TYPE_PNG)) {
-			t = new PNGTranscoder();
-		} else if	(type.equals(TYPE_TIFF)) {
-			t = new TIFFTranscoder();
-		} else if	(type.equals(TYPE_PDF)) {
-			try {
-                 Class pdfClass = Class.forName("org.apache.fop.svg.PDFTranscoder");
-                 t = (Transcoder)pdfClass.newInstance();
-             } catch(Exception e) {
-            	 noExporterException();
-             }
-		}
-		if(t == null) noExporterException();
-
-		svgG2d.getRoot(svg.getDocumentElement());
-		t.addTranscodingHint(ImageTranscoder.KEY_BACKGROUND_COLOR, java.awt.Color.WHITE);
-
-		try {
-			TranscoderInput input = new TranscoderInput(svg);
-
-			// Create the transcoder output.
-			OutputStream ostream = new FileOutputStream(file);
-			TranscoderOutput output = new TranscoderOutput(ostream);
-
-			// Save the image.
-			t.transcode(input, output);
-			
-		    // Flush and close the stream.
-	        ostream.flush();
-	        ostream.close();
-		} catch(Exception e) {
-			throw new ConverterException(e);
-		}
-	}
-
+	
 	public void noExporterException() throws ConverterException {
 		throw new ConverterException("No exporter for this image format");
 	}
Index: trunk/src/core/org/pathvisio/model/BatikImageExporter.java
===================================================================
--- trunk/src/core/org/pathvisio/model/BatikImageExporter.java	(revision 0)
+++ trunk/src/core/org/pathvisio/model/BatikImageExporter.java	(revision 1132)
@@ -0,0 +1,86 @@
+package org.pathvisio.model;
+
+import java.awt.Dimension;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.OutputStream;
+import java.io.Writer;
+
+import org.apache.batik.dom.GenericDOMImplementation;
+import org.apache.batik.svggen.SVGGraphics2D;
+import org.apache.batik.transcoder.Transcoder;
+import org.apache.batik.transcoder.TranscoderInput;
+import org.apache.batik.transcoder.TranscoderOutput;
+import org.apache.batik.transcoder.image.ImageTranscoder;
+import org.apache.batik.transcoder.image.PNGTranscoder;
+import org.apache.batik.transcoder.image.TIFFTranscoder;
+import org.pathvisio.view.VPathway;
+import org.w3c.dom.DOMImplementation;
+import org.w3c.dom.Document;
+
+public class BatikImageExporter extends ImageExporter {
+
+	public BatikImageExporter(String type) {
+		super(type);
+	}
+
+	public void doExport(File file, Pathway pathway) throws ConverterException {		
+		VPathway vPathway = new VPathway(null);
+		vPathway.fromGmmlData(pathway);
+		
+		double width = vPathway.getVWidth();
+		double height = vPathway.getVHeight();
+		
+		DOMImplementation domImpl = GenericDOMImplementation.getDOMImplementation();
+		Document svg = domImpl.createDocument ("http://www.w3.org/2000/svg", "svg", null);
+		
+		SVGGraphics2D svgG2d = new SVGGraphics2D(svg);
+		svgG2d.setSVGCanvasSize(new Dimension((int)width, (int)height));
+		vPathway.draw(svgG2d);
+		Transcoder t = null;
+		if			(getType().equals(TYPE_SVG)) {
+			try {
+				Writer out = new FileWriter(file);			
+				svgG2d.stream(out, true);
+				out.flush();
+				out.close();
+			} catch(Exception e) {
+				throw new ConverterException(e);
+			}
+			return;
+		} else if	(getType().equals(TYPE_PNG)) {
+			t = new PNGTranscoder();
+		} else if	(getType().equals(TYPE_TIFF)) {
+			t = new TIFFTranscoder();
+		} else if	(getType().equals(TYPE_PDF)) {
+			try {
+                 Class pdfClass = Class.forName("org.apache.fop.svg.PDFTranscoder");
+                 t = (Transcoder)pdfClass.newInstance();
+             } catch(Exception e) {
+            	 noExporterException();
+             }
+		}
+		if(t == null) noExporterException();
+
+		svgG2d.getRoot(svg.getDocumentElement());
+		t.addTranscodingHint(ImageTranscoder.KEY_BACKGROUND_COLOR, java.awt.Color.WHITE);
+
+		try {
+			TranscoderInput input = new TranscoderInput(svg);
+
+			// Create the transcoder output.
+			OutputStream ostream = new FileOutputStream(file);
+			TranscoderOutput output = new TranscoderOutput(ostream);
+
+			// Save the image.
+			t.transcode(input, output);
+			
+		    // Flush and close the stream.
+	        ostream.flush();
+	        ostream.close();
+		} catch(Exception e) {
+			throw new ConverterException(e);
+		}
+	}
+}
Index: trunk/src/core/org/pathvisio/util/Converter.java
===================================================================
--- trunk/src/core/org/pathvisio/util/Converter.java	(revision 1131)
+++ trunk/src/core/org/pathvisio/util/Converter.java	(revision 1132)
@@ -26,12 +26,11 @@
 
 import org.pathvisio.Engine;
 import org.pathvisio.debug.Logger;
+import org.pathvisio.model.BatikImageExporter;
 import org.pathvisio.model.ConverterException;
 import org.pathvisio.model.GpmlFormat;
 import org.pathvisio.model.ImageExporter;
 import org.pathvisio.model.MappFormat;
-import org.pathvisio.model.Pathway;
-import org.pathvisio.model.SvgFormat;
 
 /**
  * @author Thomas Kelder (t.a.j.kelder@student.tue.nl)
@@ -68,10 +67,10 @@
     	engine.addPathwayImporter(new GpmlFormat());
     	engine.addPathwayImporter(new MappFormat());
 		engine.addPathwayExporter(new MappFormat());
-		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_SVG));
-		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
-		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
-		engine.addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
+		engine.addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_SVG));
+		engine.addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_PNG));
+		engine.addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_TIFF));
+		engine.addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_PDF));
     	
         File inputFile = null;
         File outputFile = null;
Index: trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1131)
+++ trunk/src/swt/org/pathvisio/gui/swt/GuiMain.java	(revision 1132)
@@ -28,9 +28,9 @@
 import org.pathvisio.data.Gdb;
 import org.pathvisio.data.Gex;
 import org.pathvisio.debug.Logger;
+import org.pathvisio.model.BatikImageExporter;
 import org.pathvisio.model.ImageExporter;
 import org.pathvisio.model.MappFormat;
-import org.pathvisio.model.SvgFormat;
 import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.preferences.Preference;
 import org.pathvisio.preferences.swt.SwtPreferences;
@@ -149,10 +149,10 @@
 	
 	static void registerExporters() {
 		Engine.getCurrent().addPathwayExporter(new MappFormat());
-		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_SVG));
-		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PNG));
-		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_TIFF));
-		Engine.getCurrent().addPathwayExporter(new ImageExporter(ImageExporter.TYPE_PDF));
+		Engine.getCurrent().addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_SVG));
+		Engine.getCurrent().addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_PNG));
+		Engine.getCurrent().addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_TIFF));
+		Engine.getCurrent().addPathwayExporter(new BatikImageExporter(ImageExporter.TYPE_PDF));
 	}
 	
 	static void loadVisualizations() {
