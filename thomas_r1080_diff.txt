Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1079)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1080)
@@ -51,12 +51,12 @@
 import org.pathvisio.gui.swing.CommonActions.ImportAction;
 import org.pathvisio.gui.swing.CommonActions.NewElementAction;
 import org.pathvisio.gui.swing.CommonActions.PasteAction;
-import org.pathvisio.gui.swing.CommonActions.SaveLocalAction;
+import org.pathvisio.gui.swing.CommonActions.SaveAction;
+import org.pathvisio.gui.swing.CommonActions.SaveAsAction;
 import org.pathvisio.gui.swing.CommonActions.ZoomAction;
 import org.pathvisio.gui.swing.dialogs.DataNodeDialog;
 import org.pathvisio.gui.swing.dialogs.PathwayElementDialog;
 import org.pathvisio.gui.swing.propertypanel.PathwayTableModel;
-import org.pathvisio.gui.wikipathways.Actions;
 import org.pathvisio.model.ObjectType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.AlignType;
@@ -130,9 +130,10 @@
 	
 	protected void addMenuActions(JMenuBar mb) {
 		JMenu pathwayMenu = new JMenu("Pathway");
-		pathwayMenu.add(new SaveLocalAction());
+		pathwayMenu.add(new SaveAction());
+		pathwayMenu.add(new SaveAsAction());
 		pathwayMenu.add(new ImportAction(this));
-		pathwayMenu.add(new ExportAction());
+		//pathwayMenu.add(new ExportAction()); //TODO: implement
 
 		JMenu editMenu = new JMenu("Edit");
 		editMenu.add(new CopyAction());
@@ -180,9 +181,10 @@
 	protected void addToolBarActions(JToolBar tb) {
 		tb.setLayout(new WrapLayout(1, 1));
 		
-		addToToolbar(new SaveLocalAction());
+		addToToolbar(new SaveAction());
+		addToToolbar(new SaveAsAction());
 		addToToolbar(new ImportAction(this));
-		addToToolbar(new ExportAction());
+		//addToToolbar(new ExportAction()); //TODO: implement
 		tb.addSeparator();
 		addToToolbar(new CopyAction(), TB_GROUP_HIDE_ON_EDIT);
 		addToToolbar(new PasteAction(), TB_GROUP_HIDE_ON_EDIT);
Index: trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1079)
+++ trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 1080)
@@ -27,7 +27,6 @@
 import javax.swing.ImageIcon;
 import javax.swing.JFileChooser;
 import javax.swing.KeyStroke;
-import javax.swing.ProgressMonitor;
 import javax.swing.filechooser.FileFilter;
 
 import org.pathvisio.Engine;
@@ -41,6 +40,7 @@
 
 public abstract class CommonActions {
 	private static URL IMG_SAVE = Engine.getCurrent().getResourceURL("icons/save.gif");
+	private static URL IMG_SAVEAS = Engine.getCurrent().getResourceURL("icons/saveas.gif");
 	private static URL IMG_IMPORT = Engine.getCurrent().getResourceURL("icons/import.gif");
 	private static URL IMG_EXPORT = Engine.getCurrent().getResourceURL("icons/export.gif");
 	private static URL IMG_COPY= Engine.getCurrent().getResourceURL("icons/copy.gif");
@@ -73,8 +73,20 @@
 		}
 	}
 	
-	static class SaveLocalAction extends AbstractAction {
-		public SaveLocalAction() {
+	static class SaveAsAction extends AbstractAction {
+		public SaveAsAction() {
+			super("Save as", new ImageIcon(IMG_SAVEAS));
+			putValue(Action.SHORT_DESCRIPTION, "Save a local copy of the pathway");
+			putValue(Action.LONG_DESCRIPTION, "Save a local copy of the pathway");
+		}
+
+		public void actionPerformed(ActionEvent e) {
+			SwingEngine.getCurrent().savePathwayAs();
+		}
+	}
+	
+	static class SaveAction extends AbstractAction {
+		public SaveAction() {
 			super("Save", new ImageIcon(IMG_SAVE));
 			putValue(Action.SHORT_DESCRIPTION, "Save a local copy of the pathway");
 			putValue(Action.LONG_DESCRIPTION, "Save a local copy of the pathway");
@@ -82,8 +94,7 @@
 		}
 
 		public void actionPerformed(ActionEvent e) {
-			// TODO Auto-generated method stub
-			
+			SwingEngine.getCurrent().savePathway();
 		}
 	}
 	
@@ -137,21 +148,13 @@
 					};
 					jfc.addChoosableFileFilter(ff);
 				}
-				
+
 				int status = jfc.showDialog(component, "Import");
 				if(status == JFileChooser.APPROVE_OPTION) {
-					try {
-						
-						int totalWork = 1000;
-						ProgressMonitor m = new ProgressMonitor(component, "Loading pathway", "Please wait while the pathway is being loaded", 0, 1000);
-						m.setProgress(10);
-						SwingEngine.getCurrent().importPathway(jfc.getSelectedFile());
-						m.setProgress((int)(totalWork*2/3));
-						Engine.getCurrent().getActiveVPathway().setEditMode(true);
-						m.setProgress(totalWork);
-					} catch(ConverterException ex) {
-						SwingEngine.getCurrent().handleConverterException(SwingEngine.MSG_UNABLE_IMPORT, component, ex);
-					}
+					boolean editMode = Engine.getCurrent().hasVPathway() ? 
+					Engine.getCurrent().getActiveVPathway().isEditMode() : false;
+					SwingEngine.getCurrent().importPathway(jfc.getSelectedFile());
+					Engine.getCurrent().getActiveVPathway().setEditMode(editMode);
 				}
 		}
 	}
Index: trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1079)
+++ trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1080)
@@ -20,12 +20,17 @@
 import java.io.File;
 import java.net.URL;
 
+import javax.swing.JFileChooser;
 import javax.swing.JOptionPane;
+import javax.swing.filechooser.FileFilter;
 
+import org.eclipse.jface.dialogs.MessageDialog;
 import org.pathvisio.Engine;
 import org.pathvisio.Globals;
 import org.pathvisio.debug.Logger;
 import org.pathvisio.model.ConverterException;
+import org.pathvisio.model.Pathway;
+import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayWrapper;
 import org.pathvisio.view.swing.VPathwaySwing;
 
@@ -72,14 +77,14 @@
 					"The standard pathway set can be re-downloaded from http://pathvisio.org " +
 					"Non-standard pathways need to be recreated or upgraded. " +
 					"Please contact the authors at " + Globals.DEVELOPER_EMAIL + " if you need help with this.\n" +
-					"\nSee error log for details");
+					"\nSee error log for details", "Error", JOptionPane.ERROR_MESSAGE);
 			Logger.log.error("Unable to open Gpml file", e);
 		}
 		else
 		{
 			JOptionPane.showMessageDialog(c,
-					message + "\n" + e.getClass() + e.getMessage());
-			Logger.log.error("Unable to open Gpml file", e);
+					message + "\n" + e.getClass() + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
+			Logger.log.error("Converter exception", e);
 		}
 	}
 		
@@ -87,15 +92,91 @@
 		 return new VPathwaySwing(getApplicationPanel().getScrollPane());
 	}
 	
-	public File openPathway(URL url) throws ConverterException {
-		return Engine.getCurrent().openPathway(url, createWrapper());
+	public void openPathway(URL url) {
+		try {
+			Engine.getCurrent().openPathway(url, createWrapper());
+		} catch(ConverterException e) {
+			handleConverterException(e.getMessage(), null, e);
+		}
 	}
 	
-	public void importPathway(File f) throws ConverterException {
-		Engine.getCurrent().importPathway(f, createWrapper());
+	public void importPathway(File f) {
+		try {
+			Engine.getCurrent().importPathway(f, createWrapper());
+		} catch(ConverterException e) {
+			handleConverterException(e.getMessage(), null, e);
+		}
 	}
 	
 	public void newPathway() {
 		Engine.getCurrent().newPathway(createWrapper());
 	}
+
+	public boolean mayOverwrite(File f) {
+		boolean allow = true;
+		if(f.exists()) {
+			int status = JOptionPane.showConfirmDialog(null, "File " + f.getName() + " already exists, overwrite?", 
+					"File already exists", JOptionPane.YES_NO_OPTION);
+			allow = status == JOptionPane.YES_OPTION;
+		}
+		return allow;
+	}
+	
+	public boolean savePathwayAs() {
+		//Open file dialog
+		JFileChooser jfc = new JFileChooser();
+		jfc.setAcceptAllFileFilterUsed(false);
+		jfc.setDialogTitle("Save pathway");
+		jfc.setDialogType(JFileChooser.SAVE_DIALOG);
+		jfc.addChoosableFileFilter(new FileFilter() {
+			public boolean accept(File f) {
+				if(f.isDirectory()) return true;
+				String ext = f.toString().substring(f.toString().length() - 4);
+				if(ext.equalsIgnoreCase("xml") || ext.equalsIgnoreCase("gpml")) {
+					return true;
+				}
+				return false;
+			}
+			public String getDescription() {
+				return "GPML files (*.gpml, *.xml)";
+			}
+			
+		});
+		int status = jfc.showDialog(null, "Import");
+		if(status == JFileChooser.APPROVE_OPTION) {
+			File toFile = jfc.getSelectedFile();
+			try {
+				if(mayOverwrite(toFile)) {
+					Engine.getCurrent().savePathway(toFile);
+					return true;
+				}
+			} catch(ConverterException e) {
+				handleConverterException(e.getMessage(), null, e);
+			}
+		}
+		return false;
+	}
+	
+	public boolean savePathway()
+	{
+		Pathway pathway = Engine.getCurrent().getActivePathway();
+		
+		boolean result = true;	
+		
+        // Overwrite the existing xml file.
+		// If the target file is read-only, let the user select a new pathway
+		if (pathway.getSourceFile() != null && pathway.getSourceFile().canWrite())
+		{
+			try {
+				Engine.getCurrent().savePathway(pathway.getSourceFile());
+			} catch (ConverterException e) {
+				handleConverterException(e.getMessage(), null, e);
+			}
+		}
+		else {
+			result = savePathwayAs();
+		}
+
+		return result;
+	}
 }
Index: trunk/src/core/org/pathvisio/Engine.java
===================================================================
--- trunk/src/core/org/pathvisio/Engine.java	(revision 1079)
+++ trunk/src/core/org/pathvisio/Engine.java	(revision 1080)
@@ -217,8 +217,13 @@
 	}
 	
 	private void createVPathway(Pathway p, VPathwayWrapper wrapper) {
+		double zoom = 100;
+		if(hasVPathway()) zoom = getActiveVPathway().getPctZoom();
+		
 		vPathway = wrapper.createVPathway();
 		vPathway.fromGmmlData(pathway);
+		
+		vPathway.setPctZoom(zoom);
 		fireApplicationEvent(new ApplicationEvent(vPathway, ApplicationEvent.VPATHWAY_CREATED));
 	}
 	
@@ -239,7 +244,7 @@
 		fireApplicationEvent(new ApplicationEvent(pathway, ApplicationEvent.PATHWAY_NEW));
 		
 		if(wrapper != null) {
-			createVPathway(pathway, wrapper);
+			createVPathway(pathway, wrapper);	
 			fireApplicationEvent(new ApplicationEvent(vPathway, ApplicationEvent.VPATHWAY_NEW));
 		}
 	}
Index: trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1079)
+++ trunk/src/swt/org/pathvisio/gui/swt/SwtEngine.java	(revision 1080)
@@ -183,17 +183,12 @@
 													   "File already exists, overwrite?");
 			}
 			if(confirmed)
-			{
-				double usedZoom = vPathway.getPctZoom();
-				// Set zoom to 100%
-				vPathway.setPctZoom(100);					
+			{				
 				// Overwrite the existing xml file
 				try
 				{
 					Engine.getCurrent().savePathway(checkFile);
 					updateTitle();
-					// Set zoom back
-					vPathway.setPctZoom(usedZoom);
 				}
 				catch (ConverterException e)
 				{
@@ -387,14 +382,9 @@
 		public boolean savePathway()
 		{
 			Pathway pathway = Engine.getCurrent().getActivePathway();
-			VPathway vPathway = Engine.getCurrent().getActiveVPathway();
 			
 			boolean result = true;
-			
-			double usedZoom = vPathway.getPctZoom();
-			// Set zoom to 100%
-			vPathway.setPctZoom(100);			
-			
+							
 	        // Overwrite the existing xml file.
 			// If the target file is read-only, let the user select a new pathway
 			if (pathway.getSourceFile() != null && pathway.getSourceFile().canWrite())
@@ -417,8 +407,6 @@
 			{
 				result = savePathwayAs();
 			}
-			// Set zoom back
-			vPathway.setPctZoom(usedZoom);
 
 			return result;
 		}
Index: trunk/icons/saveas.gif
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: trunk/icons/saveas.gif
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

