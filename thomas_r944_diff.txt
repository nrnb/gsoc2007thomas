Index: branches/g2d-branch/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- branches/g2d-branch/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 943)
+++ branches/g2d-branch/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 944)
@@ -13,7 +13,11 @@
 import javax.swing.JPanel;
 import javax.swing.JScrollPane;
 import javax.swing.JSplitPane;
+import javax.swing.JTable;
 import javax.swing.JToolBar;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumn;
 
 import org.pathvisio.Engine;
 import org.pathvisio.gui.swing.CommonActions.CopyAction;
@@ -23,6 +27,7 @@
 import org.pathvisio.gui.swing.CommonActions.PasteAction;
 import org.pathvisio.gui.swing.CommonActions.SaveAction;
 import org.pathvisio.gui.swing.CommonActions.ZoomAction;
+import org.pathvisio.gui.swing.propertypanel.PathwayTableModel;
 import org.pathvisio.view.VPathway;
 import org.pathvisio.view.swing.VPathwaySwing;
 
@@ -34,6 +39,7 @@
 	private JToolBar toolBar;
 	private JScrollPane pathwayScrollPane;
 	private JScrollPane sidebarScrollPane;
+	private JTable propertyTable;
 	
 	public MainPanel() {
 		setLayout(new BorderLayout());
@@ -46,11 +52,19 @@
 		add(toolBar, BorderLayout.NORTH);
 		//menuBar will be added by container (JFrame or JApplet)
 		
-		
-		
 		pathwayScrollPane = new JScrollPane();
 		sidebarScrollPane = new JScrollPane();
 		
+		final PathwayTableModel model = new PathwayTableModel();
+		propertyTable = new JTable(model) {
+			public TableCellRenderer getCellRenderer(int row, int column) {
+				TableCellRenderer r = model.getCellRenderer(row, column);
+				return r == null ? super.getCellRenderer(row, column) : r;
+			}
+		};
+		
+		sidebarScrollPane.setViewportView(propertyTable);
+		
 		splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, pathwayScrollPane, sidebarScrollPane);
 		splitPane.setResizeWeight(1);
 		splitPane.setOneTouchExpandable(true);
Index: branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java
===================================================================
--- branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 943)
+++ branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 944)
@@ -2,45 +2,74 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableCellRenderer;
 
 import org.pathvisio.model.PathwayElement;
+import org.pathvisio.model.PathwayEvent;
+import org.pathvisio.model.PathwayListener;
 import org.pathvisio.model.PropertyType;
+import org.pathvisio.view.Graphics;
+import org.pathvisio.view.SelectionBox;
+import org.pathvisio.view.SelectionBox.SelectionEvent;
+import org.pathvisio.view.SelectionBox.SelectionListener;
 
-public class PathwayTableModel extends AbstractTableModel {
-	List<PathwayElement> input;
+public class PathwayTableModel extends AbstractTableModel implements SelectionListener, PathwayListener {
+	Set<PathwayElement> input;
 	List<TypedProperty> properties;
 	
-	public void setInput(PathwayElement pwElm) {
+	public PathwayTableModel() {
+		input = new HashSet<PathwayElement>();
+		properties = new ArrayList<TypedProperty>();
+		SelectionBox.addListener(this);
+	}
+	
+	private void clearInput() {
+		for(PathwayElement e : input) {
+			e.removeListener(this);
+		}
 		input.clear();
+		refresh();
+	}
+	
+	private void removeInput(PathwayElement pwElm) {
+		input.remove(pwElm);
+		pwElm.removeListener(this);
+		refresh();
+	}
+	
+	private void addInput(PathwayElement pwElm) {
 		input.add(pwElm);
-		fireTableDataChanged();
+		pwElm.addListener(this);
+		refresh();
 	}
 	
-	public void setInput(Collection<PathwayElement> input) {
-		this.input.clear();
-		this.input.addAll(input);
+	protected void refresh() {
+		properties = generateProperties(input);
 		fireTableDataChanged();
 	}
 	
-	protected List<TypedProperty> generateProperties(List<PathwayElement> elements) {
+	protected List<TypedProperty> generateProperties(Set<PathwayElement> elements) {
 		List<TypedProperty> properties = new ArrayList<TypedProperty>();
 		List<PropertyType> propTypes = getProperties(elements);
 		for(PropertyType pt : propTypes) {
-			Object value = getAggregateValue(pt, elements);
-			properties.add(TypedProperty.getInstance(value, pt));
+			TypedProperty value = getAggregateProperty(pt, elements);
+			properties.add(value);
 		}
 		return properties;
 	}
 	
-	protected List<PropertyType> getProperties(List<PathwayElement> elements) {
-		List<PropertyType> properties = null;
-		List<PropertyType> remove = new ArrayList<PropertyType>();
+	protected List<PropertyType> getProperties(Set<PathwayElement> elements) {
+		ArrayList<PropertyType> properties = null;
+		ArrayList<PropertyType> remove = new ArrayList<PropertyType>();
 		for(PathwayElement e : elements) {
 			if(properties == null) {
-				properties = e.getAttributes();
+				properties = new ArrayList<PropertyType>();
+				properties.addAll(e.getAttributes());
 				continue;
 			}
 			remove.clear();
@@ -52,21 +81,21 @@
 			}
 			properties.removeAll(remove);
 		}
-		return properties;
+		return properties == null ? new ArrayList<PropertyType>() : properties;
 	}
 	
-	Object getAggregateValue(PropertyType key, List<PathwayElement> elements) {
-		Object value = TypedProperty.DIFFERENT;
-		for(int i = 0; i < elements.size(); i++) {
-			PathwayElement e = elements.get(i);
+	TypedProperty getAggregateProperty(PropertyType key, Set<PathwayElement> elements) {
+		Object value = null;
+		boolean first = true;
+		for(PathwayElement e : elements) {
 			Object o = e.getProperty(key);
-			if(i != 0 && (o == null || !o.equals(value))) {
-				return TypedProperty.DIFFERENT;
+			if(!first && (o == null || !o.equals(value))) {
+				return TypedProperty.getInstance(elements, key);
 			}
-
 			value = o;
+			first = false;
 		}
-		return value;
+		return TypedProperty.getInstance(elements, value, key);
 	}
 		
 	public int getColumnCount() {
@@ -77,9 +106,55 @@
 		return properties.size();
 	}
 
+	public TypedProperty getPropertyAt(int row) {
+		return properties.get(row);
+	}
+	
 	public Object getValueAt(int rowIndex, int columnIndex) {
 		TypedProperty p = properties.get(rowIndex);
 		if(columnIndex == 0) return p.getType().desc();
 		else return p.getViewValue();
 	}
+
+	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
+		// TODO Auto-generated method stub
+		super.setValueAt(aValue, rowIndex, columnIndex);
+	}
+	
+	public String getColumnName(int column) {
+		if(column == 0) return "Property";
+		return "Value";
+	}
+	
+	public boolean isCellEditable(int rowIndex, int columnIndex) {
+		return columnIndex == 1;
+	}
+	
+	public void drawingEvent(SelectionEvent e) {
+		switch(e.type) {
+		case SelectionEvent.OBJECT_ADDED:
+			if(e.affectedObject instanceof Graphics)
+				addInput(((Graphics)e.affectedObject).getGmmlData());
+			break;
+		case SelectionEvent.OBJECT_REMOVED:
+			if(e.affectedObject instanceof Graphics)
+				removeInput(((Graphics)e.affectedObject).getGmmlData());
+			break;
+		case SelectionEvent.SELECTION_CLEARED:
+			 clearInput();
+			break;
+		}		
+	}
+
+	public TableCellRenderer getCellRenderer(int row, int column) {
+		if(column != 0) {
+			TypedProperty tp = getPropertyAt(row);
+			if(tp != null) return tp.getCellRenderer();
+		}
+		return null;
+	}
+
+	public void gmmlObjectModified(PathwayEvent e) {
+		refresh();
+	}
 }
Index: branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java
===================================================================
--- branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java	(revision 943)
+++ branches/g2d-branch/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java	(revision 944)
@@ -1,56 +1,82 @@
 package org.pathvisio.gui.swing.propertypanel;
 
 import java.awt.Color;
+import java.awt.Component;
+import java.util.Collection;
 
+import javax.swing.JPanel;
+import javax.swing.JTable;
+import javax.swing.table.DefaultTableCellRenderer;
+import javax.swing.table.TableCellRenderer;
+
+import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PropertyType;
 
-public class TypedProperty {
-	public static final Object DIFFERENT = new Object();
-	Object value = DIFFERENT;
+public class TypedProperty<T> {	
+	Collection<PathwayElement> elements;
+	T value;
 	PropertyType type;
+	boolean different;
 	
-	public TypedProperty(Object value, PropertyType type) {
+	private TypedProperty(Collection<PathwayElement> elements, T value, PropertyType type, boolean different) {
+		this.elements = elements;
 		this.value = value;
+		this.type = type;
+		this.different = different;
 	}
-		
-	public Object getViewValue() {
-		return value;
+	
+	public void setValue(T value) {
+		//TODO: validate
+		this.value = value;
+		if(value != null) {
+			for(PathwayElement e : elements) {
+				e.setProperty(type, value);
+			}
+		}
 	}
 	
-	public String stringValue() {
-		return value.toString();
+	public T getViewValue() {
+		return value;
 	}
 	
 	public PropertyType getType() {
 		return type;
 	}
+		
+	public boolean hasDifferentValues() { return different; }
+	public void setHasDifferentValues(boolean diff) { different = diff; }
 	
-	public static TypedProperty getInstance(Object value, PropertyType type) {
+	public TableCellRenderer getCellRenderer() {
+		return hasDifferentValues() ? differentRenderer : null;
+	}
+	
+//	public TableEditor getCellEditor() {
+//		
+//	}
+	
+	public static TypedProperty getInstance(Collection<PathwayElement> elements, Object value, PropertyType type) {
+		return getInstance(elements, value, type, false);
+	}
+	
+	public static TypedProperty getInstance(Collection<PathwayElement> elements, PropertyType type) {
+		return getInstance(elements, null, type, true);
+	}
+	
+	private static TypedProperty getInstance(Collection<PathwayElement> elements, Object value, PropertyType type, boolean different) {
 		switch(type.type()) {
 		case STRING:
-			return new StringProperty(value, type);
+			return new TypedProperty<String>(elements, (String)value, type, different);
 		case COLOR:
-			return new ColorProperty(value, type);
+			return new TypedProperty<Color>(elements, (Color)value, type, different);
 		default:
-			return new TypedProperty(value, type);
+			return new TypedProperty<Object>(elements, value, type, different);
 		}
 	}
 	
-	public static class StringProperty extends TypedProperty {
-		public StringProperty(Object value, PropertyType type) {
-			super(value, type);
+	private DefaultTableCellRenderer differentRenderer = new DefaultTableCellRenderer() {
+		protected void setValue(Object value) {
+			value = "Different values";
+			super.setValue(value);
 		}
-		public String getViewValue() {
-			return (String)value;
-		}
-	}
-
-	public static class ColorProperty extends TypedProperty {
-		public ColorProperty(Object value, PropertyType type) {
-			super(value, type);
-		}
-		public Color getViewValue() {
-			return (Color)value;
-		}
-	}
+	};
 }
