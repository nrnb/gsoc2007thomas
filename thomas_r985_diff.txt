Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 984)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 985)
@@ -126,6 +126,7 @@
 		tb.addSeparator();
 		
 		tb.addSeparator();
+			
 		tb.add(new JLabel("Zoom:", JLabel.LEFT));
 		JComboBox combo = new JComboBox(new Object[] { 
 				new ZoomAction(VPathway.ZOOM_TO_FIT),
@@ -137,7 +138,9 @@
 				new ZoomAction(150),
 				new ZoomAction(200)
 		} );
+		combo.setMaximumSize(combo.getPreferredSize());
 		combo.setEditable(true);
+		combo.setSelectedIndex(5); //100%
 		combo.addActionListener(new ActionListener() {
 			public void actionPerformed(ActionEvent e) {
 				JComboBox combo = (JComboBox)e.getSource();
@@ -156,6 +159,7 @@
 			}
 		});
 		tb.add(combo);
+		
 		tb.addSeparator();
 		
 		tb.add(new NewElementAction(VPathway.NEWGENEPRODUCT));
@@ -183,6 +187,7 @@
 		lineShapeButton.addComponent(new JMenuItem(new NewElementAction(VPathway.NEWRECEPTORSQUARE)));
 		lineShapeButton.setRunFirstItem(true);
 		tb.add(lineShapeButton);
+		
 	}
 	
 	public JMenuBar getMenuBar() {
@@ -196,5 +201,9 @@
 	public JScrollPane getScrollPane() {
 		return pathwayScrollPane;
 	}
+	
+	public JSplitPane getSplitPane() {
+		return splitPane;
+	}
 }
 
Index: trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 984)
+++ trunk/src/swing/org/pathvisio/gui/swing/propertypanel/PathwayTableModel.java	(revision 985)
@@ -18,6 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 
@@ -32,6 +33,7 @@
 import org.pathvisio.model.PathwayEvent;
 import org.pathvisio.model.PathwayListener;
 import org.pathvisio.model.PropertyType;
+import org.pathvisio.preferences.GlobalPreference;
 import org.pathvisio.view.Graphics;
 import org.pathvisio.view.SelectionBox;
 import org.pathvisio.view.SelectionBox.SelectionEvent;
@@ -81,6 +83,7 @@
 			TypedProperty value = getAggregateProperty(pt, elements);
 			properties.add(value);
 		}
+		Collections.sort(properties);
 		return properties;
 	}
 	
@@ -90,11 +93,12 @@
 		for(PathwayElement e : elements) {
 			if(properties == null) {
 				properties = new ArrayList<PropertyType>();
-				properties.addAll(e.getAttributes());
+				properties.addAll(e.getAttributes(GlobalPreference.getValueBoolean(GlobalPreference.SHOW_ADVANCED_ATTRIBUTES)));
 				continue;
 			}
 			remove.clear();
-			List<PropertyType> attributes = e.getAttributes();
+			List<PropertyType> attributes = e.getAttributes(
+					GlobalPreference.getValueBoolean(GlobalPreference.SHOW_ADVANCED_ATTRIBUTES));
 			for(PropertyType p : properties) {
 				if(!attributes.contains(p)) {
 					remove.add(p);
@@ -102,7 +106,8 @@
 			}
 			properties.removeAll(remove);
 		}
-		return properties == null ? new ArrayList<PropertyType>() : properties;
+		if(properties == null) properties = new ArrayList<PropertyType>();
+		return properties;
 	}
 	
 	TypedProperty getAggregateProperty(PropertyType key, Collection<PathwayElement> elements) {
@@ -173,7 +178,6 @@
 	public TableCellRenderer getCellRenderer(int row, int column) {
 		if(column != 0) {
 			TypedProperty tp = getPropertyAt(row);
-			System.out.println("Getting cell renderer" + tp);
 			if(tp != null) return tp.getCellRenderer();
 		}
 		return null;
Index: trunk/src/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java	(revision 984)
+++ trunk/src/swing/org/pathvisio/gui/swing/propertypanel/TypedProperty.java	(revision 985)
@@ -18,9 +18,10 @@
 
 import java.awt.Color;
 import java.awt.Component;
+import java.awt.Font;
+import java.awt.GraphicsEnvironment;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
-import java.text.NumberFormat;
 import java.util.Collection;
 import java.util.HashMap;
 
@@ -47,8 +48,9 @@
 import org.pathvisio.model.OrientationType;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.model.PropertyType;
+import org.pathvisio.model.ShapeType;
 
-public class TypedProperty {	
+public class TypedProperty implements Comparable {	
 	Collection<PathwayElement> elements;
 	Object value;
 	PropertyType type;
@@ -69,6 +71,10 @@
 		this.different = different;
 	}
 
+	public int compareTo(Object o) {
+		return type.compareTo(((TypedProperty)o).getType());
+	}
+	
 	public void setValue(Object value) {
 		this.value = value;
 		if(value != null) {
@@ -111,6 +117,9 @@
 		case DOUBLE:
 			return doubleRenderer;
 		case FONT:
+			return fontRenderer;
+		case SHAPETYPE:
+			return shapeTypeRenderer;
 		case GENETYPE: //TODO
 		}
 		return null;
@@ -136,6 +145,10 @@
 			return angleEditor;
 		case DOUBLE:
 			return doubleEditor;
+		case FONT:
+			return fontEditor;
+		case SHAPETYPE:
+			return shapeTypeEditor;
 		default:
 			return null;
 		}
@@ -267,6 +280,8 @@
 	private static CheckBoxRenderer checkboxRenderer = new CheckBoxRenderer();
 	private static ComboRenderer orientationRenderer = new ComboRenderer(OrientationType.getNames());
 	private static ComboRenderer organismRenderer = new ComboRenderer(MappFormat.organism_latin_name);
+	private static FontRenderer fontRenderer = new FontRenderer();
+	private static ComboRenderer shapeTypeRenderer = new ComboRenderer(ShapeType.getNames(), ShapeType.values());
 	
 	private static ColorEditor colorEditor = new ColorEditor();
 	private static ComboEditor lineTypeEditor = new ComboEditor(LineType.getNames(), true);
@@ -277,7 +292,9 @@
 	private static ComboEditor organismEditor = new ComboEditor(MappFormat.organism_latin_name, false);
 	private static AngleEditor angleEditor = new AngleEditor();
 	private static DoubleEditor doubleEditor = new DoubleEditor();
-	
+	private static ComboEditor fontEditor = new ComboEditor(GraphicsEnvironment
+			.getLocalGraphicsEnvironment().getAvailableFontFamilyNames(), false);
+	private static ComboEditor shapeTypeEditor= new ComboEditor(ShapeType.getNames(), true);
 	private static DefaultTableCellRenderer angleRenderer = new DefaultTableCellRenderer() {
 		protected void setValue(Object value) {
 			super.setValue( (Double)(value) * 180.0 / Math.PI );
@@ -331,6 +348,16 @@
 		}
 	}
 	
+	private static class FontRenderer extends JLabel implements TableCellRenderer {
+		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
+			String fn = (String)value;
+			Font f = getFont();
+			setFont(new Font(fn, f.getStyle(), f.getSize()));
+			setText(fn);
+			return this;
+		}
+	}
+	
 	private static class ColorRenderer extends JLabel implements TableCellRenderer {
 		Border unselectedBorder = null;
 		Border selectedBorder = null;
Index: trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 984)
+++ trunk/src/swing/org/pathvisio/gui/swing/CommonActions.java	(revision 985)
@@ -284,16 +284,15 @@
 		
 		public void actionPerformed(ActionEvent e) {
 			VPathway vp = Engine.getActiveVPathway();
-			vp.addVPathwayListener(this);
 			if(vp != null) {
+				vp.addVPathwayListener(this);
 				vp.setNewGraphics(element);
 			}
 		}
 
 		public void vPathwayEvent(VPathwayEvent e) {
 			if(e.getType() == VPathwayEvent.NEW_ELEMENT_ADDED) {
-				e.getVPathway().setNewGraphics(VPathway.NEWNONE);
-				e.getVPathway().removeVPathwayListener(this);	
+				e.getVPathway().setNewGraphics(VPathway.NEWNONE);	
 			}
 		}
 	}
Index: trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java	(revision 984)
+++ trunk/src/swing/org/pathvisio/gui/swing/GuiMain.java	(revision 985)
@@ -17,6 +17,7 @@
 package org.pathvisio.gui.swing;
 
 import javax.swing.JFrame;
+import javax.swing.UIManager;
 
 import org.pathvisio.Engine;
 import org.pathvisio.view.swing.VPathwaySwing;
@@ -34,7 +35,6 @@
 		frame.add(mainPanel);
 		frame.setJMenuBar(mainPanel.getMenuBar());
 		frame.setSize(800, 600);
-		
 //		try {
 //		    UIManager.setLookAndFeel(
 //		        UIManager.getSystemLookAndFeelClassName());
@@ -44,6 +44,7 @@
 		
 		//Display the window.
 		frame.setVisible(true);
+		mainPanel.getSplitPane().setDividerLocation(0.8);
 		Engine.newPathway(new VPathwaySwing(mainPanel.getScrollPane()));
 		Engine.getActiveVPathway().setEditMode(true);
 	}
Index: trunk/src/core/org/pathvisio/preferences/GlobalPreference.java
===================================================================
--- trunk/src/core/org/pathvisio/preferences/GlobalPreference.java	(revision 984)
+++ trunk/src/core/org/pathvisio/preferences/GlobalPreference.java	(revision 985)
@@ -28,8 +28,10 @@
 	COLOR_NO_GENE_FOUND(Color.WHITE),
 	COLOR_NO_DATA_FOUND(new Color(100, 100, 100)),
 	COLOR_SELECTED(Color.RED),
-	COLOR_HIGHLIGHTED(Color.GREEN);
+	COLOR_HIGHLIGHTED(Color.GREEN),
 	
+	SHOW_ADVANCED_ATTRIBUTES(Boolean.toString(false));
+	
 	GlobalPreference(String defaultValue) {
 		this.defaultValue = defaultValue;
 	}
Index: trunk/src/core/org/pathvisio/view/VPathway.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathway.java	(revision 984)
+++ trunk/src/core/org/pathvisio/view/VPathway.java	(revision 985)
@@ -1483,7 +1483,7 @@
 	private List<VPathwayListener> removeListeners = new ArrayList<VPathwayListener>();
 	
 	public void addVPathwayListener(VPathwayListener l) {
-		listeners.add(l);
+		if(!listeners.contains(l)) listeners.add(l);
 	}
 	
 	public void removeVPathwayListener(VPathwayListener l) {
Index: trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java
===================================================================
--- trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java	(revision 984)
+++ trunk/src/swt/org/pathvisio/preferences/swt/SwtPreferences.java	(revision 985)
@@ -155,10 +155,8 @@
 		SWT_CURR_GDB("none"),
 		SWT_DB_ENGINE_GDB("org.pathvisio.data.DBConnDerby"),
 		SWT_DB_ENGINE_EXPR("org.pathvisio.data.DBConnDerby"),
-		SWT_SIDEPANEL_SIZE("30"),
+		SWT_SIDEPANEL_SIZE("30");
 		
-		SWT_SHOW_ADVANCED_ATTR(Boolean.toString(false));
-		
 		SwtPreference(String defaultValue) {
 			this.defaultValue = defaultValue;
 		}
Index: trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java
===================================================================
--- trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java	(revision 984)
+++ trunk/src/swt/org/pathvisio/preferences/swt/PreferenceDlg.java	(revision 985)
@@ -97,7 +97,7 @@
 			addField(f);
 			
 			BooleanFieldEditor f2 =	new BooleanFieldEditor (
-					SwtPreference.SWT_SHOW_ADVANCED_ATTR.name(),									   
+					GlobalPreference.SHOW_ADVANCED_ATTRIBUTES.name(),									   
 					"Show advanced attributes (e.g. references):", getFieldEditorParent());
 				addField (f2);
 		}
Index: trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java
===================================================================
--- trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 984)
+++ trunk/src/swt/org/pathvisio/gui/swt/PropertyPanel.java	(revision 985)
@@ -171,7 +171,7 @@
 		{
 			// get attributes. Only get advanced attributes if the preferences say so.
 			for (PropertyType attr : o.getAttributes(
-					 GlobalPreference.getValueBoolean(SwtPreference.SWT_SHOW_ADVANCED_ATTR)))
+					 GlobalPreference.getValueBoolean(GlobalPreference.SHOW_ADVANCED_ATTRIBUTES)))
 			{
 				if (master.containsKey(attr))
 				{
