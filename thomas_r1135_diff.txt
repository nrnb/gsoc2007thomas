Index: trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1134)
+++ trunk/src/swing/org/pathvisio/gui/swing/MainPanel.java	(revision 1135)
@@ -55,6 +55,7 @@
 import org.pathvisio.gui.swing.actions.CommonActions.StackAction;
 import org.pathvisio.gui.swing.actions.CommonActions.ZoomAction;
 import org.pathvisio.gui.swing.dialogs.PathwayElementDialog;
+import org.pathvisio.gui.swing.dnd.FileImportHandler;
 import org.pathvisio.gui.swing.propertypanel.PathwayTableModel;
 import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.AlignType;
@@ -86,7 +87,7 @@
 	
 	public MainPanel() {
 		setLayout(new BorderLayout());
-
+		setTransferHandler(new FileImportHandler());
 		Engine.getCurrent().addApplicationEventListener(this);
 		
 		menuBar = new JMenuBar();
Index: trunk/src/swing/org/pathvisio/gui/swing/dnd/FileImportHandler.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/dnd/FileImportHandler.java	(revision 0)
+++ trunk/src/swing/org/pathvisio/gui/swing/dnd/FileImportHandler.java	(revision 1135)
@@ -0,0 +1,39 @@
+package org.pathvisio.gui.swing.dnd;
+
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.net.URL;
+
+import javax.swing.JComponent;
+import javax.swing.TransferHandler;
+
+import org.pathvisio.debug.Logger;
+import org.pathvisio.gui.swing.SwingEngine;
+
+public class FileImportHandler extends TransferHandler {
+	DataFlavor urlFlavor;
+	
+	public boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {
+		for(DataFlavor df : transferFlavors) {
+			if(df.getRepresentationClass().equals(String.class)) {
+				if(df.getMimeType().contains("text/uri")) {
+					urlFlavor = df;
+					return true;					
+				}
+			}
+		}
+		return false;
+	}
+	
+	public boolean importData(JComponent comp, Transferable t) {
+		try {
+			URL url = new URL((String)t.getTransferData(urlFlavor));
+			System.out.println(url);
+			SwingEngine.getCurrent().openPathway(url);
+			return true;
+		} catch (Exception e) {
+			Logger.log.error("Unable to process drop", e);
+		}
+		return false;
+	}
+}
Index: trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java
===================================================================
--- trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1134)
+++ trunk/src/swing/org/pathvisio/gui/swing/SwingEngine.java	(revision 1135)
@@ -97,16 +97,39 @@
 		 return new VPathwaySwing(getApplicationPanel().getScrollPane());
 	}
 	
-	public boolean openPathway(URL url) {
+	public boolean processTask(SwingProgressKeeper pk, ProgressDialog d, SwingWorker sw) {
+		sw.execute();
+		d.setVisible(true);
 		try {
-			Engine.getCurrent().openPathway(url, createWrapper());
-			return true;
-		} catch(ConverterException e) {
-			handleConverterException(e.getMessage(), null, e);
+			return (Boolean)sw.get();
+		} catch (Exception e) {
+			Logger.log.error("Unable to perform task: " + pk.getTaskName(), e);
 			return false;
 		}
 	}
 	
+	public boolean openPathway(final URL url) {		
+		final SwingProgressKeeper pk = new SwingProgressKeeper(ProgressKeeper.PROGRESS_UNKNOWN);
+		final ProgressDialog d = new ProgressDialog(JOptionPane.getFrameForComponent(getApplicationPanel()), 
+				"Opening pathway", pk, false, true);
+				
+		SwingWorker sw = new SwingWorker() {
+			protected Object doInBackground() throws Exception {
+				try {
+					Engine.getCurrent().openPathway(url, createWrapper());
+					return true;
+				} catch(ConverterException e) {
+					handleConverterException(e.getMessage(), null, e);
+					return false;
+				} finally {
+					pk.finished();
+				}
+			}
+		};
+		
+		return processTask(pk, d, sw);
+	}
+	
 	public boolean importPathway(final File f) {
 		final SwingProgressKeeper pk = new SwingProgressKeeper(ProgressKeeper.PROGRESS_UNKNOWN);
 		final ProgressDialog d = new ProgressDialog(JOptionPane.getFrameForComponent(getApplicationPanel()), 
@@ -129,14 +152,7 @@
 			}
 		};
 		
-		sw.execute();
-		d.setVisible(true);
-		try {
-			return (Boolean)sw.get();
-		} catch (Exception e) {
-			Logger.log.error("Unable to import pathway", e);
-			return false;
-		}
+	return processTask(pk, d, sw);
 
 	}
 	
@@ -187,14 +203,7 @@
 			}
 		};
 		
-		sw.execute();
-		d.setVisible(true);
-		try {
-			return (Boolean)sw.get();
-		} catch (Exception e) {
-			Logger.log.error("Unable to export pathway", e);
-			return false;
-		}
+		return processTask(pk, d, sw);
 	}
 
 	public boolean importPathway() {
Index: trunk/src/core/org/pathvisio/view/VPathway.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1134)
+++ trunk/src/core/org/pathvisio/view/VPathway.java	(revision 1135)
@@ -1610,6 +1610,7 @@
 			Engine.getCurrent().clipboard = null;
 		}
 		
+		getWrapper().copyToClipboard(result);
 		//clipboard.dispose();
 	}
 	
Index: trunk/src/core/org/pathvisio/view/VPathwayWrapper.java
===================================================================
--- trunk/src/core/org/pathvisio/view/VPathwayWrapper.java	(revision 1134)
+++ trunk/src/core/org/pathvisio/view/VPathwayWrapper.java	(revision 1135)
@@ -18,10 +18,13 @@
 
 import java.awt.Dimension;
 import java.awt.Rectangle;
+import java.util.List;
 
 import javax.swing.Action;
 import javax.swing.KeyStroke;
 
+import org.pathvisio.model.PathwayElement;
+
 public abstract interface VPathwayWrapper
 {		
 	public void redraw();
@@ -35,4 +38,5 @@
 	public VPathway createVPathway();
 	
 	public void registerKeyboardAction(KeyStroke k, Action a);
+	public void copyToClipboard(List<PathwayElement> result);
 }
Index: trunk/src/core/org/pathvisio/view/swing/PathwayTransferable.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/PathwayTransferable.java	(revision 0)
+++ trunk/src/core/org/pathvisio/view/swing/PathwayTransferable.java	(revision 1135)
@@ -0,0 +1,44 @@
+package org.pathvisio.view.swing;
+
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.awt.datatransfer.UnsupportedFlavorException;
+import java.io.IOException;
+import java.util.List;
+
+import org.jdom.Element;
+import org.jdom.output.Format;
+import org.jdom.output.XMLOutputter;
+import org.pathvisio.model.GpmlFormat;
+import org.pathvisio.model.PathwayElement;
+
+public class PathwayTransferable implements Transferable {
+	public static final DataFlavor pathwayDataFlavor = new DataFlavor(String.class, "text/xml");
+	List<PathwayElement> elements;
+	
+	public PathwayTransferable(List<PathwayElement> elements) {
+		this.elements = elements;
+	}
+	
+	public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
+		XMLOutputter xmlout = new XMLOutputter(Format.getPrettyFormat());
+		String xml = "";
+		for(PathwayElement e : elements) {
+			try {
+				Element xmle = GpmlFormat.createJdomElement(e, GpmlFormat.GPML);
+				xml += xmlout.outputString(xmle) + "\n";
+			} catch(Exception ex) {
+				ex.printStackTrace();
+			}
+		}
+		return xml;
+	}
+
+	public DataFlavor[] getTransferDataFlavors() {
+		return new DataFlavor[] { pathwayDataFlavor };
+	}
+
+	public boolean isDataFlavorSupported(DataFlavor flavor) {
+		return pathwayDataFlavor.equals(flavor);
+	}
+}
Index: trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java
===================================================================
--- trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1134)
+++ trunk/src/core/org/pathvisio/view/swing/VPathwaySwing.java	(revision 1135)
@@ -21,11 +21,16 @@
 import java.awt.Graphics;
 import java.awt.Graphics2D;
 import java.awt.Rectangle;
+import java.awt.Toolkit;
+import java.awt.datatransfer.Clipboard;
+import java.awt.datatransfer.ClipboardOwner;
+import java.awt.datatransfer.Transferable;
 import java.awt.event.KeyEvent;
 import java.awt.event.KeyListener;
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import java.awt.event.MouseMotionListener;
+import java.util.List;
 
 import javax.swing.Action;
 import javax.swing.JPanel;
@@ -33,13 +38,15 @@
 import javax.swing.KeyStroke;
 import javax.swing.SwingUtilities;
 
+import org.pathvisio.gui.swing.dnd.FileImportHandler;
+import org.pathvisio.model.PathwayElement;
 import org.pathvisio.view.VPathway;
 import org.pathvisio.view.VPathwayEvent;
 import org.pathvisio.view.VPathwayListener;
 import org.pathvisio.view.VPathwayWrapper;
 
 public class VPathwaySwing extends JPanel implements VPathwayWrapper,
-		MouseMotionListener, MouseListener, KeyListener, VPathwayListener {
+		MouseMotionListener, MouseListener, KeyListener, VPathwayListener, ClipboardOwner {
 	VPathway child;
 
 	JScrollPane container;
@@ -55,6 +62,7 @@
 		
 		setFocusable(true);
 		setRequestFocusEnabled(true);
+		setTransferHandler(new FileImportHandler());
 	}
 
 	public void setChild(VPathway c) {
@@ -168,4 +176,12 @@
 		}
 	}
 
+	public void copyToClipboard(List<PathwayElement> result) {
+		Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
+		clip.setContents(new PathwayTransferable(result), this);
+	}
+
+	public void lostOwnership(Clipboard clipboard, Transferable contents) {
+		System.out.println("Lost ownership");
+	}
 }
